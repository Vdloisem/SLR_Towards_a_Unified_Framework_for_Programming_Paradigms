Sub-question 1.2 (Contribution),,,,,,,,,,,,,,,,,,,,,,,,,,,
"How can we define a set of conceptual primitives that enable programming paradigms to be reconstructed in a minimal and orthogonal manner, and how can we formally guarantee these properties within a unified mathematical framework?",,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,
Title,Authors,DOI,DOI link,Venue,Citation count,Year,Fundamental Analysis,Fundamental Analysis Rationale,Formal Framework,Formal Framework Assessment,Paradigm Theory,Paradigm Theory Rationale,Language Design Principles,Design Principles Assessment,Theoretical Foundation,Theoretical Foundation Rationale,Implementation Focus,Implementation Focus Assessment,Theoretical Contribution,Contribution Assessment Rationale,Publication Language,Language Assessment,Full-Text Accessibility,Accessibility Assessment,Screening judgement,Final Screening Rationale,Screening score
"Concepts, Techniques, and Models of Computer Programming","P. V. Roy, Seif Haridi",-,-,-,477,2004,yes,The paper analyzes fundamental programming language constructs through its kernel language approach and abstract machine model.,yes,"The abstract explicitly mentions defining kernel languages ""precisely in terms of a simple abstract machine,"" indicating a formal mathematical framework.",yes,"The paper explicitly focuses on programming paradigms, their relationships, and comparative theoretical analysis across multiple paradigms.",yes,"The paper discusses fundamental design principles through its focus on ""kernel languages"" and their relationships, including orthogonality in how different paradigms are presented in a ""uniform framework.""",yes,The paper presents a theoretical foundation through its abstract machine model and systematic approach to programming paradigms.,yes,"While implementation aspects are mentioned (Mozart Programming System), they appear to support theoretical contributions rather than being the primary focus.",yes,"The paper appears to focus on theoretical understanding, presenting programming as a ""unified discipline"" and analyzing fundamental relationships between paradigms.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract mentions this is a ""text"" (book) and references the Mozart Programming System, suggesting the full text is likely accessible, but this is not explicitly confirmed.",Include,"A comprehensive theoretical exploration of programming paradigms that systematically examines fundamental language design principles through a unified, mathematically rigorous framework. The work presents a sophisticated analysis of computational models, kernel languages, and their deep interrelationships, demonstrating strong theoretical contributions across multiple programming paradigms. Its approach emphasizes precise, abstract machine-based definitions and comparative theoretical analysis of programming constructs.",4.6
Gamma and the chemical reaction model : fteen years after ?,"J. Ban√¢tre, Pascal Fradet",-,-,-,5,2003,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including basic computation models and programming paradigms.",yes,"The paper presents Gamma as a formalism with clear mathematical foundations, using chemical reaction metaphors and formal definitions of program execution.",yes,"The paper explicitly examines programming paradigm foundations, comparing Gamma's approach to traditional sequential programming paradigms and discussing fundamental differences in programming style.",yes,"The paper explicitly discusses fundamental design principles of the Gamma programming language, including orthogonality and minimalism. It specifically mentions the ""very minimal nature"" of the language and how it avoids ""artificial sequentiality.""",yes,The paper presents a formal theoretical foundation based on chemical reaction models and provides mathematical definitions of program execution and transformation.,yes,"While implementation aspects are discussed, they serve to support the theoretical contributions rather than being the primary focus.",yes,"The paper focuses on theoretical contributions to programming language design and paradigm theory, rather than practical implementations or educational aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible, as it appears to be a formal academic publication, though this cannot be definitively determined from the abstract alone.",Include,"The paper presents a rigorous theoretical exploration of the Gamma programming language, focusing on fundamental design principles, paradigm theory, and mathematical frameworks for computational modeling. It provides a comprehensive analysis of programming language constructs through a chemical reaction metaphor, demonstrating strong theoretical contributions to understanding computational paradigms. The study meets multiple screening criteria by offering a formal, theoretically-grounded examination of programming language foundations.",4.9
Concepts and paradigms of object-oriented programming,P. Wegner,10.1145/382192.383004,https://doi.org/10.1145/382192.383004,OOPS,515,1990,yes,"The paper provides a fundamental analysis of OOP's basic nature, goals, and computational models.",yes,"The paper includes ""formal computational models"" and ""mathematical models,"" indicating the use of a formal mathematical framework or rigorous verification approach.",yes,"The paper explicitly focuses on examining programming paradigms, including OOP's foundations and future directions, meeting this criterion.",yes,"The paper explicitly examines ""language design alternatives"" and discusses fundamental principles of OOP, meeting this criterion.",yes,"The paper has a strong theoretical foundation through its discussion of formal models and mathematical frameworks, though the abstract notes making these ""accessible to nonmathematical readers.""",yes,The paper's discussion of implementation or tools serves to support broader theoretical contributions rather than focusing solely on practical aspects.,yes,"The paper appears primarily theoretical, examining fundamental questions about OOP's nature, goals, and foundations rather than practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text of the paper is likely accessible, as it is an OOPSLA keynote talk, though this cannot be confirmed from the abstract alone.",Include,"This research comprehensively explores object-oriented programming through a rigorous theoretical lens, examining its fundamental principles, paradigms, and computational models with a strong emphasis on mathematical and formal frameworks. The study provides an in-depth analysis of programming language design, theoretical foundations, and paradigmatic evolution, demonstrating a sophisticated approach to understanding computational constructs beyond practical implementation.",4.9
"Defining, analyzing, and transforming program constructs","Jingke Le, M. Wolfe",10.1109/88.281872,https://doi.org/10.1109/88.281872,IEEE Parallel & Distributed Technology Systems & Applications,5,1994,yes,"The paper analyzes fundamental programming language constructs (control constructs) at a theoretical level, examining their behavior and relations.",yes,"The abstract mentions ""well-founded semantic structure"" and ""well-known dependence analysis techniques,"" suggesting a formal mathematical framework. The focus on semantic analysis indicates rigorous verification approaches.",yes,"The paper explicitly addresses programming paradigms, noting that it's ""not confined to a single programming paradigm"" and discusses how different constructs interact.",yes,"The paper discusses fundamental design principles for control constructs and their interactions, particularly focusing on orthogonality (""nest in a very general way"") and minimality (""simple yet powerful scheme""), strongly meeting this criterion.",yes,"The paper presents a theoretical framework for analyzing control constructs and their interactions, with clear mathematical foundations (""well-founded semantic structure"").",yes,"While implementation is discussed (compiler implementation, optimization), it serves to support the theoretical framework rather than being the primary focus.",yes,"The paper makes clear theoretical contributions to understanding control constructs and their interactions, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A comprehensive theoretical framework exploring programming language control constructs across multiple paradigms, demonstrating rigorous mathematical foundations and semantic analysis. The research provides a well-structured approach to understanding language design principles, with a focus on theoretical contributions that transcend practical implementation considerations. By examining fundamental computational primitives and their interactions, the study offers a sophisticated analysis of programming language constructs.",4.9
A logical theory of concurrent objects and its realization in the Maude language,J. Meseguer,10.7551/mitpress/2087.003.0017,https://doi.org/10.7551/mitpress/2087.003.0017,-,304,1993,yes,"The paper strongly meets this criterion by analyzing fundamental programming language constructs at a theoretical level, particularly focusing on concurrent object-oriented computation and its logical foundations.",yes,"The paper very strongly meets this criterion by presenting rewriting logic as a formal mathematical framework for analyzing programming language properties, specifically for concurrent object-oriented computation.",yes,"The paper strongly meets this criterion by examining and comparing multiple programming paradigms (functional, relational, and concurrent object-oriented) and providing theoretical analysis of their unification.",yes,"The paper strongly meets this criterion by presenting fundamental design principles for concurrent object-oriented programming through rewriting logic, including structural axioms of associativity, commutativity, and identity.",yes,"The paper strongly meets this criterion by presenting a ""new theory of concurrent objects"" based on rewriting logic and providing formal semantic frameworks.",yes,"The paper meets this criterion well by discussing the Maude language implementation, which serves to support and demonstrate the theoretical contributions rather than being the primary focus.",yes,The paper very strongly meets this criterion by presenting new theoretical foundations and semantic frameworks rather than focusing on practical implementations.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and academic context of the paper suggest it is likely accessible through academic channels.",Include,"This research presents a rigorous theoretical framework for concurrent object-oriented programming, grounded in rewriting logic and offering a comprehensive semantic approach to programming language design. The study provides a deep theoretical analysis of programming paradigms, examining fundamental computational constructs through a formal mathematical lens and proposing novel unification of functional, relational, and concurrent object-oriented programming principles. By developing a new language (Maude) and exploring its theoretical foundations, the research makes significant contributions to understanding programming language design at a fundamental level.",4.9
Reconstruction of paradigm shifts,"R. L√§mmel, G. Riedewald",-,-,-,12,1999,yes,"The paper analyzes fundamental language constructs through formal meta-programming and examines core concepts in programming language design, meeting the fundamental analysis criterion.",yes,"The paper presents a ""generic and formal approach"" and discusses formal analysis of meta-programs, including ""preservation properties,"" meeting the formal framework criterion.",yes,"The paper explicitly discusses the declarative paradigm and compares different frameworks (attribute grammars, natural semantics, algebraic specification), meeting the paradigm theory criterion.",yes,"The paper explicitly discusses orthogonality in language design and formal reconstruction of language concepts, directly addressing the language design principles criterion.",yes,"The paper is built on formal theoretical foundations, including attribute grammars, natural semantics, and algebraic specification, meeting the theoretical foundation criterion.",yes,"While implementation is mentioned (""implemented in the specification framework of Œõ‚àÜŒõ""), it serves to support the theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions, presenting a formal framework for analyzing and reconstructing language concepts, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature and implementation details of the paper suggest it is likely an academic paper with accessible full text, though this cannot be determined from the abstract alone.",Include,"A rigorous theoretical exploration of programming language design principles, focusing on formal meta-programming frameworks and orthogonal reconstruction of language concepts across multiple paradigms. The study presents a comprehensive approach to analyzing fundamental computational constructs through mathematical frameworks, with strong emphasis on theoretical foundations and paradigmatic analysis. Its technical depth and systematic examination of language design principles demonstrate a sophisticated contribution to programming language theory.",4.9
"Confluence: The Unifying, Expressive Power of Locality","Jiaxiang Liu, J. Jouannaud",10.1007/978-3-642-54624-2_17,https://doi.org/10.1007/978-3-642-54624-2_17,"Specification, Algebra, and Software",6,2014,yes,"The abstract indicates analysis of fundamental programming language constructs through its discussion of lambda-calculus and rewriting systems, meeting this criterion.",maybe,"The abstract mentions formal elements like lambda-calculus and rewriting systems, suggesting a formal mathematical framework, though the depth of formal analysis isn't entirely clear from the abstract.",yes,"The abstract explicitly focuses on comparing and analyzing different programming paradigms (imperative, functional, logic, object-oriented, concurrent, distributed) and their theoretical foundations, strongly meeting this criterion.",yes,"The abstract discusses different programming paradigms and their foundations, including lambda-calculus and rewriting systems, which are fundamental design principles, suggesting this criterion is met.",yes,"The abstract indicates theoretical foundations through its discussion of lambda-calculus, typed lambda-calculus, and rewriting systems, suggesting a strong theoretical basis.",yes,"The abstract doesn't focus on implementation details, instead emphasizing theoretical aspects, meeting this criterion.",yes,"The abstract suggests a theoretical focus on analyzing and comparing programming paradigms rather than practical aspects, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"The abstract demonstrates a robust theoretical exploration of programming language paradigms, with strong emphasis on fundamental design principles, lambda-calculus, and comparative analysis across different programming approaches. Its focus on theoretical foundations, paradigm comparisons, and formal mathematical frameworks suggests significant alignment with rigorous research criteria. The text provides a comprehensive overview of programming language evolution through a theoretical lens, examining multiple paradigms and their underlying computational principles.",4.6
A minimalist two-level foundation for constructive mathematics,M. Maietti,10.1016/j.apal.2009.01.006,https://doi.org/10.1016/j.apal.2009.01.006,Annals of Pure and Applied Logic,82,2008,yes,"The paper analyzes fundamental constructs through type theory and set theory, examining basic mathematical and computational foundations.",yes,"The paper presents a ""two-level theory"" with formal type theory and set theory components, including a ""quotient model"" for interpretation, providing strong evidence of the use of a formal mathematical framework.",yes,"The paper explicitly connects to the ""proofs-as-programs"" paradigm and discusses programming language foundations, meeting the paradigm theory criterion.",yes,"The paper discusses Minimal type theory, which directly relates to the minimality design principle. The focus on ""minimal among the most relevant foundations"" suggests attention to fundamental design principles.",yes,"The paper has a clear theoretical foundation with formal type theory and set theory components, including constructive mathematics foundations.",maybe,"The paper appears to focus on theoretical foundations rather than implementation details, though it mentions programming language aspects in a theoretical context.",yes,"The paper is strongly theoretical, focusing on formal foundations and mathematical frameworks rather than practical applications, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of constructive mathematics through a two-level type theory framework, demonstrating strong alignment with programming language design principles and paradigm theory. The study presents a formal mathematical approach to understanding computational foundations, with explicit connections to the ""proofs-as-programs"" paradigm and minimal theoretical constructs. Its theoretical depth and focus on fundamental programming language principles make it highly relevant to systematic review criteria.",4.9
Structural Recursion as a Query Language,"V. Tannen, P. Buneman, S. Naqvi",-,-,International Workshop/Symposium on Database Programming Languages,182,1992,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on structural recursion, type systems, and computational primitives at a theoretical level.",yes,"The paper clearly uses formal mathematical frameworks, specifically mentioning lambda calculus and relational algebra. It discusses total maps and formal type systems, indicating a rigorous mathematical approach.",yes,"The paper directly examines programming paradigms, proposing a new paradigm that bridges relational algebra and unrestricted programming languages. It provides comparative theoretical analysis between different paradigms.",yes,"The paper explicitly discusses programming paradigm design principles, particularly focusing on structural recursion and type systems. It aims to balance semantic simplicity with expressive power, which relates to fundamental design principles.",yes,"The paper has a strong theoretical foundation through its use of lambda calculus, relational algebra, and formal type systems. The paper appears to be heavily theoretical in nature.",yes,"The paper balances theoretical and implementation aspects, with implementation considerations serving to support the theoretical framework rather than being the primary focus.",yes,"The paper makes clear theoretical contributions, focusing on fundamental properties of programming paradigms and their expressive power. While it mentions optimization, this appears to be secondary to the theoretical contributions.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the presence of citations suggests this is likely an academic paper that would be accessible through standard channels.",Include,"This research presents a rigorous theoretical exploration of programming paradigms, utilizing formal mathematical frameworks like lambda calculus and relational algebra to analyze computational constructs. The study offers a novel approach to programming language design, balancing semantic simplicity with expressive power while maintaining a strong theoretical foundation across multiple computational dimensions. Its comprehensive examination of structural recursion, type systems, and paradigm foundations demonstrates a sophisticated theoretical contribution to programming language research.",4.9
Mathematical Theory of Computation,J. McCarthy,10.21236/ada239419,https://doi.org/10.21236/ada239419,-,371,1991,yes,"The paper analyzes fundamental programming language constructs (functions, control, assignment, process) at a theoretical level, strongly meeting the fundamental analysis criterion.",yes,"The paper explicitly focuses on ""logical formalisms"" and ""semantic framework"" for reasoning about programs, strongly meeting the formal framework criterion.",yes,"The paper mentions ""clarification of existing programming paradigms"" and analysis of programming languages, meeting the paradigm theory criterion.",maybe,"The paper discusses higher-order abstractions and their semantic framework, which relates to fundamental design principles, though it does not explicitly address orthogonality or minimality.",yes,"The paper develops ""logics for reasoning"" about various programming concepts, indicating a strong theoretical foundation.",yes,"While implementation tools are mentioned, they serve to support the theoretical framework rather than being the primary focus, meeting the implementation focus criterion.",yes,"The focus of the paper is clearly on theoretical contributions through logical formalisms and semantic frameworks, rather than practical aspects, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible, as it appears to be a formal research project, suggesting it would be available through university libraries, author websites, or public archives.",Include,"This research project presents a rigorous theoretical investigation of programming language constructs through logical formalisms and semantic frameworks, focusing on fundamental abstractions and reasoning methodologies. The study demonstrates strong alignment with theoretical research criteria by developing formal approaches to analyzing programming paradigms, language properties, and computational primitives. Its comprehensive examination of higher-order abstractions and logical reasoning techniques provides a substantive contribution to theoretical understanding of programming language foundations.",4.9
Practical Foundations of Mathematics,P. Taylor,10.5860/choice.37-4551,https://doi.org/10.5860/choice.37-4551,Cambridge Studies in Advanced Mathematics,190,1999,yes,"The work analyzes fundamental programming language constructs at a theoretical level, including type theory and logical foundations.",yes,"The abstract strongly indicates a formal mathematical framework, discussing constructive logic, type theory, and categorical structures for formalization.",yes,"The abstract discusses fundamental programming paradigms, particularly the propositions-as-types paradigm and its relationship to computation.",yes,"The abstract discusses fundamental design principles in programming languages, particularly through the lens of constructive logic and type theory.",yes,"The work is heavily theoretical, focusing on mathematical foundations of computer science and logic, including type theory and constructive logic.",yes,"The abstract suggests a theoretical focus, with implementation aspects (like functional programs) serving to support theoretical understanding.",yes,"The work is primarily theoretical, focusing on mathematical foundations rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract appears to be from a book review rather than a research paper, which creates uncertainty about the full-text accessibility.",Include,"A comprehensive theoretical exploration of programming language foundations, focusing on constructive logic, type theory, and mathematical principles underlying computer science. The work demonstrates rigorous engagement with fundamental design principles, paradigm theory, and formal frameworks, while providing an in-depth analysis of computational constructs through a mathematical lens. Despite being a book review, the text exhibits strong theoretical contributions across multiple screening criteria.",4.6
Naturally Embedded Query Languages,"V. Tannen, P. Buneman, L. Wong",10.1007/3-540-56039-4_38,https://doi.org/10.1007/3-540-56039-4_38,International Conference on Database Theory,211,1992,yes,"The paper analyzes fundamental programming language constructs through structural recursion and examines computational primitives at a theoretical level, strongly meeting this criterion.",yes,"The paper uses category theory, cartesian categories, and strong monads as formal mathematical frameworks for analysis, clearly meeting this criterion.",yes,"The paper examines programming paradigm foundations through structural recursion and provides comparative theoretical analysis across different sublanguages, meeting this criterion well.",yes,"The paper explicitly investigates fundamental design principles through ""structural recursion on sets"" and examines ""conceptual restrictions"" in language design, strongly meeting this criterion.",yes,"The paper presents a formal theoretical foundation using category theory and algebraic perspectives, including ""equational theories"" and ""categorical ideas,"" strongly meeting this criterion.",yes,"While implementation aspects are discussed (optimizations), they are clearly secondary to the theoretical contributions and serve to support the theoretical framework, meeting this criterion.",yes,"The paper focuses on theoretical understanding, including semantic foundations, categorical constructions, and algebraic perspectives, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical investigation of programming language design principles, utilizing advanced mathematical frameworks like category theory and structural recursion to explore fundamental computational constructs. The study offers a comprehensive examination of language paradigms, semantic foundations, and theoretical contributions that deeply analyze programming language properties through a sophisticated mathematical lens. Its focus on theoretical understanding, formal frameworks, and paradigmatic analysis demonstrates a profound scholarly approach to computational language research.",4.9
A Glimpse of Paradise,H. A√Øt-Kaci,10.1007/3-540-54141-1_2,https://doi.org/10.1007/3-540-54141-1_2,East/West Database Workshop,5,1990,yes,"The paper meets the fundamental analysis criterion, as it analyzes fundamental programming language constructs at a theoretical level, proposing basic abstractions for programming.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, but it suggests a theoretical approach to language design through abstract structures.",yes,"The paper strongly meets the paradigm theory criterion, as it directly addresses programming paradigms, specifically discussing the integration of declarative and imperative programming styles.",yes,"The paper strongly meets the language design principles criterion, as it explicitly discusses fundamental design principles for programming languages, including the integration of different programming paradigms and the proposal of ""primeval abstractions.""",maybe,"The paper partially meets the theoretical foundation criterion, as it proposes theoretical foundations (abstract data, control, and constraint structures), but it's not clear if these are supported by formal mathematical frameworks.",yes,"The paper meets the implementation focus criterion, as the abstract suggests the implementation discussion will serve theoretical contributions rather than being the primary focus.",yes,"The paper meets the theoretical contribution criterion, as it appears to focus on theoretical contributions to language design rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract demonstrates a strong theoretical approach to programming language design, focusing on integrating declarative and imperative paradigms through fundamental abstractions. It proposes a framework for understanding programming language constructs at a conceptual level, with particular emphasis on abstract data, control, and constraint structures. The work appears to contribute significantly to theoretical understanding of programming language principles, though the depth of formal mathematical framework remains somewhat uncertain.",4.6
Towards a Unified Programming Language,O. Madsen,10.1007/3-540-45102-1_1,https://doi.org/10.1007/3-540-45102-1_1,European Conference on Object-Oriented Programming,15,2000,maybe,"The paper analyzes fundamental language constructs (patterns, virtual procedures, classes, etc.) at a theoretical level, though the depth of theoretical analysis is not entirely clear from the abstract.",no,The abstract does not explicitly mention formal mathematical frameworks or verification approaches. The discussion appears more conceptual than formal.,yes,"The paper explicitly focuses on programming paradigms, their integration, and comparative analysis across object-oriented, imperative-functional, logic programming, concurrent programming, and prototype-based programming.",maybe,"The paper discusses language design principles, particularly focusing on the integration of different paradigms and unified language design. While it does not explicitly mention orthogonality or minimality, it addresses fundamental design principles.",no,"While the paper discusses theoretical aspects of language design, it does not clearly indicate a formal theoretical foundation or mathematical framework.",maybe,"The paper discusses the BETA language implementation, but uses this to support broader theoretical contributions about paradigm integration and unified language design.",maybe,"The paper appears to make theoretical contributions about language design and paradigm integration, though it seems to focus more on practical implementation (BETA language) than pure theory.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores programming language design principles by examining paradigm integration across multiple computational approaches, with a focus on theoretical contributions to language development. While demonstrating strong engagement with fundamental language constructs and paradigm theory, the study appears more conceptual than formally rigorous, presenting a nuanced approach to understanding programming language foundations. The work centers on the BETA language as a case study for unified programming paradigm design, offering insights into theoretical language construction.",4
Logical foundations of object-oriented and frame-based languages,"M. Kifer, G. Lausen, James Wu",10.1145/210332.210335,https://doi.org/10.1145/210332.210335,JACM,1866,1995,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including object identity, inheritance, polymorphic types, and encapsulation.",yes,"The paper explicitly presents a formal mathematical framework (F-logic) with ""model-theoretic semantics and a sound and complete resolution-based proof theory.""",yes,"The paper directly examines programming paradigm foundations, specifically the object-oriented paradigm, comparing it to relational programming through formal logic.",yes,"The paper directly addresses fundamental design principles in programming languages, specifically focusing on formalizing object-oriented and frame-based language features.",yes,"The paper provides a clear theoretical foundation through F-logic, which is explicitly described as having formal semantics and proof theory.",maybe,"The paper appears to focus on theoretical aspects rather than implementation, though it mentions ""programming with a deductive object-oriented language."" The implementation discussion appears to support theoretical contributions.",yes,"The paper's primary focus is theoretical, proposing a novel formalism and analyzing fundamental aspects of programming paradigms.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"A rigorous theoretical exploration of programming language design principles, presenting a novel formal framework (F-logic) that systematically analyzes object-oriented and frame-based language constructs through mathematical semantics and proof theory. The study provides a comprehensive examination of fundamental programming paradigms, offering a deep theoretical contribution to understanding computational language foundations.",4.9
Foundations of Total Functional Data-Flow Programming,"B. T. Widemann, M. Lepper",10.4204/EPTCS.153.10,https://doi.org/10.4204/EPTCS.153.10,MSFP,8,2014,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in the context of stream programming and paradigm unification.",yes,"The paper appears to be heavily grounded in formal methods, with strong evidence of formal mathematical framework usage, including ""coalgebraic coinduction,"" ""relational model of stateful computation,"" and ""set theory.""",yes,"The paper directly examines programming paradigms, specifically comparing and unifying functional reactive and data-flow graph paradigms, which is a central focus of the work.",yes,"The paper clearly addresses fundamental design principles in programming languages, specifically focusing on unifying functional and data-flow programming paradigms. The mention of ""mathematical first principles"" and ""strongly compositional semantics"" suggests deep engagement with language design principles.",yes,"The paper explicitly mentions ""mathematical first principles"" and describes a formal theoretical foundation based on set theory and coalgebraic coinduction.",maybe,"While the abstract mentions a ""novel stream programming language,"" the focus appears to be on theoretical foundations rather than implementation details.",yes,"The paper appears to be primarily theoretical, focusing on foundational aspects and mathematical frameworks rather than practical implementations or patterns.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language paradigms, grounded in mathematical first principles and formal frameworks like coalgebraic coinduction. The study offers a novel approach to unifying functional and data-flow programming styles through a set-theoretic foundation, demonstrating deep engagement with fundamental language design principles and theoretical computational analysis.",4.9
On integration of programming paradigms,A. Mycroft,10.1145/234528.234735,https://doi.org/10.1145/234528.234735,CSUR,5,1996,yes,"The study analyzes fundamental programming language constructs at a theoretical level, particularly focusing on how different paradigms can be integrated and their semantic properties.",yes,"The paper presents a formal algebraic framework for analyzing paradigm integration, including mathematical notation and semantic embeddings (Œ∏i : Si ‚Üí T).",yes,"The paper explicitly focuses on programming paradigm foundations and their integration, comparing different paradigms (imperative, object-oriented, concurrent, functional, logic programming).",yes,"The paper directly addresses fundamental design principles by examining how different programming paradigms can be integrated, including discussion of constructors and semantic embeddings.",yes,"The abstract demonstrates a strong theoretical foundation, using mathematical concepts and formal semantics to analyze paradigm integration. The discussion of embeddings and semantic properties shows rigorous theoretical underpinning.",yes,"The paper uses implementation examples (C, Prolog, Haskell) to support theoretical analysis rather than focusing on practical implementation.",yes,"The paper appears to make a theoretical contribution to understanding paradigm integration, focusing on formal properties rather than practical implementation details.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The presence of citations and formal academic style suggests the full text of the paper is likely accessible, though this cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical exploration of programming paradigm integration, utilizing formal mathematical frameworks to analyze semantic embeddings and construct interactions across different programming languages. The study demonstrates a deep theoretical contribution by examining fundamental design principles, paradigm foundations, and computational primitives through a sophisticated algebraic lens. Its comprehensive approach to understanding programming language interactions provides significant insights into the theoretical underpinnings of computational systems.",4.9
Component-Based Description of Programming Languages,Peter D. Mosses,10.14236/EWIC/VOCS2008.23,https://doi.org/10.14236/EWIC/VOCS2008.23,BCS International Academic Conference,18,2008,yes,"The paper analyzes fundamental language constructs and their formal description at a theoretical level, meeting this criterion.",yes,"The paper explicitly focuses on ""formal description of programming languages"" and discusses formal syntax and semantics frameworks, strongly meeting this criterion.",maybe,"While the paper discusses language description frameworks, it does not explicitly compare programming paradigms, partially meeting this criterion.",maybe,"The paper discusses formal language descriptions and novel features for future languages, which relates to fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,"The paper is centered on formal theoretical foundations for programming languages and their description, clearly meeting this criterion.",yes,"The paper mentions tool support, but this is presented as supporting theoretical contributions rather than being the primary focus, meeting this criterion.",yes,"The paper focuses on theoretical foundations and formal description methods rather than practical aspects, strongly meeting this criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given its formal academic nature, though this cannot be determined from the abstract alone.",Include,"The research presents a rigorous theoretical exploration of programming language description frameworks, focusing on formal syntax, semantics, and novel design principles. It demonstrates strong alignment with theoretical foundations, formal frameworks, and fundamental analysis of computational constructs, while proposing innovative approaches to language description methodologies. The study's emphasis on theoretical contributions and systematic language design principles makes it a compelling candidate for in-depth scholarly review.",4.6
Four Concurrency Primitives for Haskell,Enno Scholz,-,-,-,15,1995,yes,"The paper analyzes fundamental programming language constructs (concurrency primitives) at a theoretical level, focusing on their minimal set and systematic construction.",yes,"The paper presents a formal monadic framework for concurrency, with ""very simple semantics"" and systematic construction of communication paradigms, suggesting a rigorous mathematical framework.",yes,"The paper examines functional programming paradigms and provides comparative theoretical analysis across different languages (Haskell, Concurrent ML, Facile, Erlang).",yes,"The paper explicitly discusses minimizing the number of concurrency primitives and maximizing functional abstractions in language design, which directly relates to minimality and orthogonality principles.",yes,"The paper appears to have a strong theoretical foundation, presenting a formal monadic approach to concurrency and discussing systematic construction of communication paradigms.",yes,"The implementation serves to support theoretical contributions, as evidenced by the statement that ""All programs presented in the course of the paper have been executed using this implementation"" to validate the theoretical framework.",yes,"The paper focuses on theoretical contributions to programming language design and concurrency theory, rather than practical aspects alone.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be an academic publication with a DFG grant, suggesting likely accessibility of the full text.",Include,"A rigorous theoretical exploration of programming language design principles, focusing on monadic concurrency frameworks with systematic construction of communication paradigms across functional programming languages. The research demonstrates strong theoretical foundations by examining fundamental language constructs, minimizing complexity, and providing comparative paradigm analysis. The study's emphasis on formal mathematical frameworks and theoretical contributions to programming language design makes it particularly significant.",4.9
A Calculus of Gamma Programs,"C. Hankin, D. L. M√©tayer, David Sands",10.1007/3-540-57502-2_57,https://doi.org/10.1007/3-540-57502-2_57,International Workshop on Languages and Compilers for Parallel Computing,68,1992,yes,The paper analyzes fundamental language constructs (sequential and parallel operators) at a theoretical level.,yes,"The paper appears to use formal mathematical concepts (conditional multiset rewriting) and studies properties of operators, suggesting a formal framework.",yes,"The paper explicitly examines a programming paradigm (Gamma) and its properties, particularly regarding parallelism.",yes,"The paper discusses Gamma as a ""minimal language,"" directly addressing the minimality design principle.",yes,The focus on formal properties of sequential and parallel operators and their transformations indicates a theoretical foundation. The mathematical nature of multiset rewriting further supports this.,yes,The discussion of implementation aspects (target architecture adaptation) appears to serve theoretical contributions rather than being the primary focus.,yes,"The paper focuses on theoretical properties and transformations between sequential and parallel compositions, rather than practical applications. While it mentions practical applications, these appear to be secondary to the theoretical contributions.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A theoretical exploration of the Gamma programming language demonstrates strong alignment with language design principles, formal mathematical frameworks, and paradigm theory. The research focuses on fundamental computational constructs, particularly sequential and parallel operators, with a rigorous approach to analyzing programming language properties. The study's emphasis on theoretical contributions and mathematical foundations suggests a comprehensive examination of programming language design at a conceptual level.",4.6
"Choreographies, Computationally","L. Cruz-Filipe, F. Montesi",-,-,arXiv.org,4,2015,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on concurrent programming primitives.",yes,"The paper presents formal analysis through Turing completeness proofs and process calculus synthesis, indicating a rigorous mathematical framework.",yes,"The paper directly examines programming paradigm foundations, specifically Choreographic Programming, and provides theoretical analysis of its properties.",yes,"The paper explicitly focuses on minimalism in language design (""Minimal Choreographies"") and investigates fundamental design principles of Choreographic Programming.",yes,"The paper develops theoretical foundations for Choreographic Programming, including formal proofs of Turing completeness and deadlock freedom.",yes,"While implementation is discussed (through synthesis to process calculus), it serves to support theoretical contributions rather than being the primary focus.",yes,"The paper focuses on theoretical contributions, including minimal language design, computational foundations, and formal properties.",yes,"The abstract is written in English, which is a strong indication that the full paper is also in English, though this cannot be confirmed without seeing the full paper.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, as this is a common limitation in screening.",Include,"This research presents a rigorous theoretical investigation of Choreographic Programming, focusing on fundamental language design principles, formal mathematical frameworks, and paradigm foundations. The study demonstrates strong alignment with theoretical programming language research by exploring minimal language constructs, Turing completeness, and computational primitives through a formal, paradigmatic lens. Its comprehensive approach to analyzing programming language properties and theoretical contributions makes it a highly relevant scholarly work.",4.9
Behavioral Types in Programming Languages,"D. Ancona, V. Bono, M. Bravetti, Joana Campos, Giuseppe Castagna, Pierre-Malo Deni√©lou, S. Gay, N. Gesbert, Elena Giachino, Raymond Hu, E. Johnsen, F. Martins, V. Mascardi, F. Montesi, R. Neykova, Nicholas Ng, L. Padovani, V. Vasconcelos, N. Yoshida",10.1561/2500000031,https://doi.org/10.1561/2500000031,Found. Trends Program. Lang.,151,2016,yes,The paper analyzes fundamental programming language constructs through the lens of behavioral types and their integration with programming constructs.,yes,"The paper deals with behavioral type theory, which is a formal mathematical framework, strongly meeting this criterion.",yes,"The abstract explicitly mentions covering ""particular programming paradigms,"" indicating comparative theoretical analysis of paradigms, meeting this criterion.",maybe,"The paper discusses behavioral types and their integration with programming constructs, which relates to fundamental design principles, but it does not explicitly mention orthogonality or minimality.",yes,"The focus on behavioral type theory and correctness properties indicates a strong theoretical foundation, meeting this criterion.",yes,"The paper discusses practical aspects but frames them within theoretical contributions, meeting this criterion.",yes,"While the paper discusses ""practical aspects,"" it does so in the context of theoretical foundations (behavioral type theory) and correctness properties, indicating a focus on theoretical understanding rather than purely practical applications.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it appears to be a book or comprehensive overview.",Include,"This comprehensive overview of behavioral type theory in programming languages demonstrates strong theoretical foundations, utilizing a formal mathematical framework to analyze programming paradigms and language constructs. The work provides a rigorous examination of fundamental programming principles, integrating theoretical insights with practical considerations while maintaining a focus on correctness properties and computational theory.",4.6
Programming as a mathematical exercise,J. Abrial,10.1098/rsta.1984.0070,https://doi.org/10.1098/rsta.1984.0070,Philosophical transactions of the Royal Society of London. Series A: Mathematical and physical sciences,18,1984,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, examining basic constructs and their relationship to logic and set theory, which strongly meets the fundamental analysis criterion.",yes,"The paper explicitly presents a formal framework and discusses basic deduction and definition rules, mathematical theories, and formal axiomatization of programming constructs, which strongly meets the formal framework criterion.",yes,"The paper examines programming paradigms by presenting programming notation as an extension of logic and set theory, and discusses the transformation of program construction into proof construction, which meets the paradigm theory criterion.",maybe,"The paper discusses fundamental principles of programming languages by examining them through the lens of logic and set theory, which aligns with the language design principles criterion, even though it does not explicitly discuss orthogonality or minimality.",yes,"The paper provides a formal theoretical foundation by integrating logic, set theory, and programming, with specific mathematical theories and formal frameworks, which clearly meets the theoretical foundation criterion.",yes,"While implementation aspects are discussed, they are clearly in service of theoretical contributions, particularly in the mechanization of proof calculus, which meets the implementation focus criterion.",yes,"The paper focuses entirely on theoretical contributions, presenting formal frameworks and mathematical foundations rather than practical aspects, which strongly meets the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of programming language foundations through formal mathematical frameworks, integrating logic, set theory, and computational constructs. The study presents a comprehensive theoretical approach to understanding programming notation, focusing on fundamental principles, mathematical theories, and formal verification methods. Its deep theoretical contribution examines programming paradigms through a sophisticated mathematical lens, demonstrating significant scholarly depth in computational theory.",4.9
A Formalization of Concepts for Generic Programming,"Jeremiah Willcock, Jaakko J√§rvi, A. Lumsdaine, D. Musser",-,-,-,17,2004,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on concepts and their role in generic programming.",maybe,"The abstract suggests a formal framework for concepts, mentioning ""uniform, language-independent definition"" and ""systematic design."" However, it doesn't explicitly mention mathematical formalism.",yes,"The paper directly addresses programming paradigms, specifically generic programming, and provides comparative theoretical analysis across different programming languages.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on generic programming and concepts. It explicitly addresses orthogonality through its discussion of ""minimal requirements"" and systematic design principles.",yes,"The paper appears to provide a theoretical foundation for concepts in programming languages, offering a ""unified framework"" for understanding and implementing concepts across languages.",maybe,"While the paper discusses implementation aspects (e.g., C++ STL), these appear to serve theoretical purposes rather than being the primary focus.",yes,"The paper makes clear theoretical contributions by providing a unified framework for concepts and analyzing fundamental aspects of generic programming, rather than focusing on practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"The research presents a rigorous theoretical exploration of generic programming principles, focusing on fundamental language design concepts and providing a unified framework for understanding programming paradigms across different languages. By systematically analyzing minimal type requirements and concept representations, the study offers a deep theoretical contribution to programming language foundations, with strong emphasis on systematic design and comparative analysis. The work demonstrates significant potential for advancing understanding of programming language constructs through a theoretically grounded approach.",4.6
Programming Paradigms of the Andorra Kernel Language,"Sverker Janson, Seif Haridi",-,-,ISLP,195,1991,yes,"The paper analyzes fundamental programming language constructs, particularly regarding search structuring and concurrent reactive processes.",maybe,"The abstract mentions the ""Kernel Andorra Prolog framework"" and references formal overhead, suggesting some formal framework, though the extent is not entirely clear.",yes,"The paper explicitly examines programming paradigms, comparing Prolog and GHC approaches and their integration in AKL.",maybe,"The paper discusses the design of AKL and its relationship to Prolog and GHC paradigms, suggesting some coverage of fundamental design principles, though it does not explicitly mention orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation, as it discusses formal frameworks and mentions stripping away ""formal overhead,"" indicating theoretical underpinnings.",maybe,"The abstract suggests a balance between theoretical and implementation aspects, with discussion of both theoretical frameworks and practical capabilities.",yes,"The paper appears to make theoretical contributions by introducing a new language framework and analyzing paradigm integration, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract demonstrates strong theoretical foundations in programming language design, particularly through its exploration of programming paradigms and fundamental language constructs. It presents a novel language framework (AKL) that integrates multiple programming approaches, with clear indications of theoretical contribution and analysis of computational primitives. The study appears to balance theoretical depth with practical implementation considerations, suggesting a rigorous approach to language design.",4.3
A compositional approach to multiparadigm programming,P. Zave,10.1109/52.35586,https://doi.org/10.1109/52.35586,IEEE Software,101,1989,yes,The paper analyzes fundamental aspects of programming paradigms and their composition at a theoretical level.,maybe,"The abstract does not explicitly mention a formal mathematical framework or verification approach. While it discusses ""conceptual levels,"" it does not clearly indicate a rigorous formal analysis.",yes,"The paper directly examines programming paradigms and their composition, which is central to the research.",maybe,"The paper discusses paradigm composition and multiparadigm programming, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",maybe,"The paper appears to have some theoretical foundation in its discussion of paradigm composition, but the abstract does not clearly indicate a formal mathematical framework.",maybe,"The implementation discussion (telephone network) appears to serve as an example to support the theoretical contribution about paradigm composition, rather than being the primary focus.",maybe,"The paper appears to make theoretical contributions about paradigm composition, though it includes practical examples (telephone network prototype).",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research explores multiparadigm programming through paradigm composition, demonstrating strong theoretical foundations in programming language design and paradigm theory. While the study provides insights into fundamental programming constructs, it lacks explicit formal mathematical frameworks, creating some uncertainty about its rigorous theoretical approach. The work appears to make meaningful contributions to understanding programming paradigms at a conceptual level.",4
Unified Modeling of Static Relationships between Program Elements,Ioana Sora,10.1007/978-3-642-45422-6_7,https://doi.org/10.1007/978-3-642-45422-6_7,International Conference on Evaluation of Novel Approaches to Software Engineering,8,2012,maybe,"While the paper analyzes programming language elements, it does so at a meta-modeling level rather than a fundamental theoretical level, so it only partially meets this criterion.",maybe,"While the paper presents a meta-model, it appears to be more focused on practical modeling rather than formal mathematical frameworks for verification, so it only partially meets this criterion.",maybe,"The paper does examine programming paradigms (object-oriented and procedural) and provides some comparative analysis, but this appears to be more about practical modeling than theoretical foundations, so it only partially meets this criterion.",no,"The paper focuses on meta-modeling of programming language elements rather than investigating fundamental design principles like orthogonality or minimality, so it does not clearly meet this criterion.",maybe,"The paper presents a meta-model with ""abstract concepts,"" but it's unclear if this is based on formal theoretical foundations. The focus seems more practical than theoretical.",no,"The paper heavily focuses on implementation aspects (tools for Java, C#, C) and practical applications, rather than using implementation to support theoretical contributions, so it does not meet this criterion.",no,The paper's primary contribution appears to be practical (model extraction tools and analysis applications) rather than theoretical. The focus is on implementation and practical applications.,yes,"The paper is written in English, meeting this criterion.",maybe,"The full text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a meta-model for programming language elements across paradigms, with a strong emphasis on practical implementation and tool development rather than deep theoretical foundations. While the study touches on programming paradigms and language modeling, it primarily focuses on practical applications and model extraction tools, falling short of rigorous theoretical analysis and formal mathematical frameworks. The work demonstrates technical utility but lacks the depth of theoretical contribution sought by the screening criteria.",2.9
Gamma and the chemical reaction model: ten years after,"Jean-Pierre Bon√¢tre, D. L. M√©tayer",10.1142/9781848161023_0001,https://doi.org/10.1142/9781848161023_0001,-,76,1996,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on the nature of computation and sequentiality, meeting the fundamental analysis criterion.",yes,"The paper presents Gamma as a formalism and discusses it in terms of chemical reaction models, suggesting a formal mathematical framework, meeting the formal framework criterion.",yes,"The paper explicitly examines programming paradigms, particularly challenging the traditional sequential paradigm and proposing an alternative chemical reaction model, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles, specifically focusing on ""programs without artificial sequentiality"" and minimal language design, meeting the language design principles criterion.",yes,"The abstract indicates a strong theoretical foundation, discussing the chemical reaction model as a formal basis for computation, meeting the theoretical foundation criterion.",yes,"While implementation is discussed, it's presented as one of three categories and appears to support the theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper appears primarily theoretical, focusing on fundamental concepts rather than practical applications, though it does mention implementation issues as one category of discussion, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but the paper's age (1986) suggests it may be available through academic archives.",Include,"The paper presents a rigorous theoretical exploration of programming language design, focusing on fundamental principles of computation through a chemical reaction model that challenges traditional sequential paradigms. It demonstrates strong alignment with theoretical research criteria, offering a formal framework for analyzing programming language constructs and paradigm foundations. The work appears to make significant theoretical contributions to understanding computational models beyond conventional sequential approaches.",4.9
Programming paradigms for dummies: what every programmer should know,P. V. Roy,-,-,-,69,2009,maybe,"The paper analyzes fundamental programming language constructs (records, closures, concurrency) at a theoretical level, though the depth of analysis is not entirely clear from the abstract.",no,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, and the paper appears more descriptive than formally rigorous.",yes,"The paper explicitly focuses on programming paradigms, their relationships, and comparative analysis, presenting a taxonomy of 30 paradigms and discussing their theoretical relationships.",maybe,"The paper discusses language design principles and relationships between paradigms, including ""dual-paradigm languages"" and ""definitive language,"" but does not explicitly focus on orthogonality or minimality.",no,"The paper presents a taxonomy and theoretical relationships between paradigms, but does not explicitly mention formal mathematical foundations, and the approach seems more conceptual than formally theoretical.",maybe,"The paper discusses implementation aspects (concurrency, computer music examples) but uses these to support broader theoretical contributions about paradigms.",maybe,"The paper appears to make theoretical contributions through its paradigm taxonomy and analysis of relationships between paradigms, but also includes practical applications (computer music examples).",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract suggests the paper is likely accessible as a book chapter, though this cannot be definitively determined from the abstract alone.",Exclude,"The abstract demonstrates strong theoretical engagement with programming paradigms, presenting a comprehensive taxonomy and exploring fundamental language constructs across multiple dimensions. While the work offers significant insights into paradigm relationships and theoretical foundations, it lacks explicit formal mathematical frameworks and rigorous verification approaches. The research balances theoretical contributions with practical applications, particularly in concurrency and computer music domains.",4
Representing Object Identity in a Pure Functional Language,A. Ohori,10.1007/3-540-53507-1_69,https://doi.org/10.1007/3-540-53507-1_69,International Conference on Database Theory,25,1990,yes,"The paper analyzes fundamental programming language constructs (object identity, references) at a theoretical level, clearly meeting the fundamental analysis criterion.",yes,"The paper explicitly uses mathematical modeling, categorical structure of monads, and formal semantics to analyze programming language properties, strongly meeting the formal framework criterion.",yes,"The paper examines the integration of object-oriented and functional programming paradigms, analyzing their theoretical foundations and relationships, meeting the paradigm theory criterion.",maybe,"The paper discusses fundamental design principles, particularly regarding object identity and its integration with type systems, even though it does not explicitly discuss orthogonality or minimality.",yes,"The paper presents a mathematical model for object identity and uses formal theoretical frameworks (Moggi's monads) to support its analysis, clearly meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed (references in Standard ML), they serve to support broader theoretical contributions about object identity, meeting the implementation focus criterion.",yes,"The paper focuses on establishing precise semantics and theoretical foundations rather than practical implementations, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and academic style of the paper suggest it is likely an academic paper that would be accessible through university libraries.",Include,"This research presents a rigorous mathematical exploration of object identity in programming languages, utilizing formal frameworks like monads to establish precise semantic foundations across object-oriented and functional paradigms. The study offers a theoretical contribution by analyzing fundamental programming language constructs through a sophisticated mathematical lens, demonstrating deep engagement with paradigm theory and computational primitives. Its approach integrates theoretical analysis with formal verification, providing a comprehensive examination of programming language design principles.",4.9
"Functional programming, object-oriented programming and algebras!",B. C. D. S. Oliveira,10.1145/2633628.2633637,https://doi.org/10.1145/2633628.2633637,Workshop on Generic Programming,1,2014,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on abstractions and their mathematical foundations.",yes,The paper discusses algebraic datatypes and (F-)Algebras as formal mathematical frameworks for analyzing programming language properties.,yes,"The paper directly examines programming paradigm foundations, comparing functional and OO paradigms and their theoretical underpinnings.",yes,"The paper explicitly discusses fundamental design principles in programming languages, particularly focusing on the dual views of functional and OO abstractions and their structuring principles.",yes,"The paper is grounded in theoretical foundations, discussing algebraic structures and their application to programming paradigms.",yes,"While implementations are discussed, they serve to support broader theoretical contributions about programming paradigms and their fundamental properties.",yes,The paper focuses on theoretical understanding of programming paradigms and their fundamental properties rather than practical applications.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The academic nature and reference to well-known researchers suggests the full text is likely accessible, though this cannot be determined from the abstract alone.",Include,"This research explores fundamental programming language design principles through a rigorous theoretical lens, examining functional and object-oriented paradigms using algebraic frameworks. By analyzing the Expression Problem and investigating mathematical structures underlying programming abstractions, the study provides a deep theoretical contribution to understanding computational paradigms. The work demonstrates a sophisticated approach to programming language theory, focusing on mathematical foundations and paradigmatic analysis rather than practical implementation.",4.9
Concept-based optimization,"Xiaolong Tang, Jaakko J√§rvi",10.1145/1512762.1512772,https://doi.org/10.1145/1512762.1512772,LCSD '07,24,2007,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on type systems, generic programming, and optimization properties.",yes,The paper presents a formal framework for specifying and implementing generic optimizations based on algebraic properties. It describes a systematic approach to categorizing these properties.,yes,The paper explicitly examines the generic programming paradigm and its application to compiler optimizations.,yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on generic programming and concept-based optimizations. It addresses how language features (concepts and concept maps) enable certain types of transformations.",yes,"The paper appears to have a strong theoretical foundation, discussing algebraic properties and semantic-preserving transformations. It presents a formal framework for analyzing these properties.",maybe,"While the paper discusses implementation aspects (ConceptGCC), these appear to serve the broader theoretical contributions rather than being the sole focus.",yes,The paper makes clear theoretical contributions by developing a framework for concept-based optimizations and analyzing the theoretical properties required for these optimizations.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but it is likely accessible through academic channels since it appears to be a formal academic paper.",Include,"The research presents a rigorous theoretical framework for generic programming and compiler optimizations, focusing on fundamental language design principles and algebraic properties of type systems. By exploring concept-based transformations and semantic-preserving techniques, the study offers a comprehensive theoretical contribution to programming language analysis, with strong emphasis on formal mathematical foundations and paradigm theory. The work demonstrates significant depth in examining computational primitives and generic programming constructs at a theoretical level.",4.6
Object-Orientation in the UTP,"Thiago L. V. L. Santos, Ana Cavalcanti, A. Sampaio",10.1007/11768173_2,https://doi.org/10.1007/11768173_2,Unifying Theories of Programming,38,2006,yes,"The study analyzes fundamental programming language constructs (subtyping, inheritance, recursive methods, dynamic binding) at a theoretical level, strongly meeting this criterion.",yes,"The paper explicitly uses the Unifying Theories of Programming (UTP) as a formal mathematical framework, strongly meeting this criterion.",yes,"The paper examines object-oriented programming paradigm foundations and mentions ""integrated languages that include constructs from several paradigms,"" meeting this criterion.",yes,"The paper examines fundamental design principles in object-oriented programming, including subtyping, inheritance, and dynamic binding, strongly meeting this criterion.",yes,"The abstract indicates a strong theoretical foundation through the UTP framework and its application to formalizing programming concepts, meeting this criterion.",yes,"The paper appears to focus on theoretical modeling rather than implementation, meeting this criterion.",yes,"The focus is clearly theoretical, providing formal descriptions of programming concepts rather than practical implementations, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical study examining object-oriented programming concepts through the Unifying Theories of Programming framework, demonstrating strong alignment with formal language design principles and paradigm theory. The research provides a comprehensive theoretical analysis of fundamental programming language constructs, utilizing a mathematical framework to explore subtyping, inheritance, and dynamic binding across multiple programming paradigms.",4.9
Modularity in Logic Programming,"M. Bugliesi, E. Lamma, P. Mello",10.1016/0743-1066(94)90032-9,https://doi.org/10.1016/0743-1066(94)90032-9,The Journal of Logic Programming,183,1994,yes,"The study analyzes fundamental programming language constructs at a theoretical level, particularly regarding module systems and logical connectives.",maybe,"The paper appears to deal with formal aspects of logic programming, including Horn clauses and logical connectives, suggesting a formal mathematical framework is present.",yes,"The paper explicitly compares different approaches to logic programming and discusses programming paradigms, meeting the paradigm theory criterion.",maybe,"The paper discusses module systems and compositional operators in logic programming, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",yes,"The paper provides strong evidence of a theoretical foundation through discussion of logical connectives, Horn clauses, and formal mapping between different approaches.",yes,"The paper appears to focus on theoretical aspects rather than implementation details, meeting the implementation focus criterion.",yes,"The paper clearly focuses on theoretical contributions, providing a ""uniform reconstruction"" of different approaches and formal mappings between them.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research demonstrates a robust theoretical approach to logic programming, presenting a formal framework that explores module systems, logical connectives, and paradigm foundations through a rigorous comparative analysis. By focusing on fundamental programming language constructs and providing a uniform reconstruction of different approaches, the study offers significant theoretical contributions that align closely with the screening criteria. The work's emphasis on mathematical frameworks and theoretical mapping suggests a deep engagement with programming language design principles.",4.6
of Logic,-,-,-,-,3,2022,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including atomic commands, operators, and their semantic properties, which strongly meets the fundamental analysis criterion.",yes,"The paper clearly presents a formal mathematical framework, using predicate calculus as a basis for semantics and formal verification of program correctness, which strongly meets the formal framework criterion.",yes,"The paper explicitly examines the logic programming paradigm, including its fundamental characteristics and how it differs from other paradigms, which strongly meets the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of logic programming, including how programs relate to specifications and how operators transform predicates, which strongly meets the language design principles criterion.",yes,"The paper has a strong theoretical foundation, using predicate calculus and formal semantics to analyze programming language properties, which strongly meets the theoretical foundation criterion.",yes,"While implementation aspects are mentioned (parallel implementation, impure features), these serve to support the theoretical framework rather than being the primary focus, which meets the implementation focus criterion.",yes,"The paper focuses on theoretical understanding, providing a unifying theory for programming and formal analysis of program correctness, which strongly meets the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical framework for logic programming, utilizing predicate calculus to formally analyze programming language semantics and paradigm foundations. The study provides a comprehensive examination of fundamental programming constructs, offering a unifying theory that explores program correctness, specification, and computational principles through a mathematical lens. Its strong theoretical contribution and focus on formal analysis of programming paradigms make it an exemplary match for the screening criteria.",4.9
Attribute grammar paradigms‚Äîa high-level methodology in language implementation,J. Paakki,10.1145/210376.197409,https://doi.org/10.1145/210376.197409,CSUR,395,1995,yes,The paper analyzes fundamental programming language constructs through the formalism of attribute grammars and their relationship to different programming paradigms.,yes,The paper explicitly discusses formal attribute grammar theory and its use as a formal mathematical framework for analyzing programming language properties.,yes,"The paper explicitly examines and compares different programming paradigms (structured, modular, object-oriented, logic, and functional) through the lens of attribute grammars.",maybe,"The paper discusses attribute grammars as a formalism for specifying programming languages, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",yes,The paper is based on formal attribute grammar theory and discusses theoretical foundations across different programming paradigms.,yes,The paper discusses implementation aspects (automatic production of language implementations) but uses these to support broader theoretical contributions about specification languages.,yes,"The paper appears to focus on theoretical understanding, presenting a taxonomy and analysis of different paradigms rather than practical implementations.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but the fact that it is a survey paper suggests it may be more widely available.",Include,"A comprehensive survey exploring attribute grammars across multiple programming paradigms, demonstrating strong theoretical foundations and formal mathematical frameworks for analyzing language specifications. The research provides a rigorous examination of programming language design principles, offering a systematic taxonomy of structured, modular, object-oriented, logic, and functional attribute grammars. Its theoretical contribution focuses on fundamental language constructs and paradigm analysis, with a clear emphasis on formal specification and comparative theoretical understanding.",4.6
Concatenative Programming - An Overlooked Paradigm in Functional Programming,"D. Herzberg, T. Reichert",10.5220/0002281402570262,https://doi.org/10.5220/0002281402570262,International Conference on Software and Data Technologies,10,2009,yes,The paper analyzes fundamental programming language constructs through the lens of concatenative programming and its relationship to functional programming.,maybe,"The abstract mentions that the paper ""formally introduces"" Concat, suggesting a formal mathematical framework, though details are not provided.",yes,"The paper explicitly examines programming paradigms, specifically concatenative programming and its relationship to functional programming.",maybe,"The paper discusses a programming paradigm (concatenative programming) and presents a formal language (Concat), suggesting investigation of fundamental design principles, though orthogonality and minimality are not explicitly mentioned.",yes,"The paper appears to have a theoretical foundation, as it presents a formal language and discusses fundamental software engineering research.",yes,The paper presents a research prototype (Concat) but uses it to support theoretical contributions rather than focusing on practical implementation.,yes,"The paper appears to focus on theoretical contributions, discussing fundamental software engineering research and new viewpoints on programming paradigms.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A theoretical exploration of concatenative programming presents a formal language prototype that examines fundamental software engineering principles and programming paradigms. The research offers a novel perspective on functional programming through a rigorous theoretical framework, focusing on conceptual analysis rather than practical implementation. By introducing a new programming paradigm, the study contributes to understanding computational primitives and language design principles.",4.6
Programming paradigms of the Andorra Kernel Language Programming,"Sverker Janson, Seif Haridi",-,-,-,4,1991,yes,"The paper analyzes fundamental programming language constructs, particularly regarding search and concurrent reactive processes.",maybe,"The abstract mentions the ""Kernel Andorra Prolog framework"" and references formal overhead, suggesting some formal framework, though the extent is not entirely clear.",yes,"The paper explicitly examines programming paradigms, comparing Prolog and GHC, and discusses theoretical capabilities beyond these paradigms.",maybe,"The paper discusses the design of AKL and its relationship to Prolog and GHC, suggesting investigation of fundamental design principles, though it does not explicitly mention orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation, discussing programming paradigms and formal frameworks, though the abstract does not explicitly detail the mathematical framework.",maybe,"The abstract suggests a balance between theoretical and implementation aspects, with implementation details serving theoretical contributions.",yes,"The paper appears to make theoretical contributions, particularly in combining programming paradigms and extending capabilities, and is not focused on practical patterns or optimization.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The formal nature of the paper suggests it is likely an academic paper with accessible full text, though this cannot be determined from the abstract alone.",Exclude,"The abstract demonstrates strong theoretical foundations in programming language design, particularly through its exploration of programming paradigms and fundamental language constructs. It presents a novel language framework (AKL) that extends existing programming paradigms, with a focus on theoretical contributions and fundamental analysis of computational primitives. The research appears to provide a rigorous examination of language design principles, though some details of the formal framework remain implicit in the abstract.",4.3
What we talk about when we talk about monads,T. Pet≈ô√≠ƒçek,10.22152/programming-journal.org/2018/2/12,https://doi.org/10.22152/programming-journal.org/2018/2/12,"The Art, Science, and Engineering of Programming",7,2018,yes,"The paper analyzes fundamental programming language constructs (monads) at a theoretical level, examining their formal definition, historical development, and conceptual understanding, meeting the fundamental analysis criterion.",yes,"The paper explicitly mentions formal definitions of monads and presents a framework for understanding programming concepts at three levels: formal, metaphorical, and implementation, meeting the formal framework criterion.",yes,"The paper examines programming concepts through multiple theoretical lenses and discusses how research paradigms influence programming concepts, meeting the paradigm theory criterion.",yes,"The paper discusses monads, which are fundamental programming language constructs, and their formal definition and syntactic support in programming languages, meeting the language design principles criterion.",yes,"The paper has a strong theoretical foundation, incorporating philosophy of science, philosophy of mathematics, and cognitive sciences to analyze programming concepts, meeting the theoretical foundation criterion.",yes,"While implementation is discussed, it's presented as one of three levels of analysis, supporting broader theoretical contributions rather than being the sole focus, meeting the implementation focus criterion.",yes,"The paper clearly focuses on theoretical understanding, providing a framework for understanding programming concepts and their evolution, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"This research provides a comprehensive theoretical exploration of programming language concepts, specifically monads, through multiple disciplinary lenses including philosophy, cognitive science, and formal analysis. The study offers a rigorous framework for understanding programming constructs at formal, metaphorical, and implementation levels, with a strong emphasis on theoretical foundations and paradigmatic analysis. By examining the historical, philosophical, and cognitive dimensions of programming concepts, the research contributes significantly to theoretical understanding of computational principles.",4.6
Mechanising a Unifying Theory,"Gift Nuka, J. Woodcock",10.1007/11768173_13,https://doi.org/10.1007/11768173_13,Unifying Theories of Programming,16,2006,yes,"The paper analyzes fundamental programming language constructs through formal semantics and theoretical frameworks, meeting the fundamental analysis criterion.",yes,"The paper presents a formalization of UTP using the alphabetised relational calculus and develops a formal verification framework, strongly meeting the formal framework criterion.",yes,"The paper explicitly examines multiple programming paradigms (functional, imperative, logic, and parallel) within a unifying theoretical framework, strongly meeting the paradigm theory criterion.",maybe,"The paper discusses unifying theories of programming (UTP) and relates different programming paradigms, which implies investigation of fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,"The paper is built on formal theoretical foundations, using Z formal semantics and theorem proving, clearly meeting the theoretical foundation criterion.",yes,"While implementation tools (ProofPowerZ) are mentioned, they serve to support the theoretical contributions rather than being the focus, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical foundations and formal verification rather than practical aspects, clearly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The formal nature and use of specific tools (ProofPowerZ) suggests this is likely a published academic paper, but the full-text accessibility cannot be determined from the abstract alone.",Include,"A rigorous theoretical study exploring unifying theories of programming through formal mathematical frameworks, examining multiple programming paradigms with deep semantic analysis. The research presents a comprehensive approach to understanding programming language foundations using formal verification techniques and theorem proving, demonstrating strong alignment with theoretical research criteria.",4.9
Unifying theories of healthiness condition,"J. He, C. Hoare",10.1109/APSEC.2000.896685,https://doi.org/10.1109/APSEC.2000.896685,Proceedings Seventh Asia-Pacific Software Engeering Conference. APSEC 2000,2,2000,yes,"The study analyzes fundamental programming language constructs through algebraic laws and healthiness conditions, meeting this criterion.",yes,"The abstract explicitly mentions Boolean algebra, algebraic laws, and formal constructions (Karoubi and Kleisli), indicating a strong formal mathematical framework.",yes,"The abstract explicitly mentions examining ""a wide range of programming paradigms"" including nondeterministic, sequential, parallel, logical, and probabilistic, strongly meeting this criterion.",yes,"The paper discusses fundamental design principles through ""healthiness conditions"" and algebraic laws for programming languages, strongly meeting this criterion.",yes,"The paper presents a clear theoretical foundation based on Boolean algebra and formal mathematical constructions, meeting this criterion.",yes,"The paper discusses implementation feasibility while maintaining focus on theoretical contributions through healthiness conditions, meeting this criterion.",yes,"The paper focuses on theoretical foundations and formal analysis rather than practical aspects, meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A comprehensive theoretical exploration of programming language design principles across multiple paradigms, utilizing rigorous mathematical frameworks like Boolean algebra and formal constructions. The research systematically examines fundamental language constructs through healthiness conditions, providing a unified theoretical approach to understanding programming language foundations. By investigating nondeterministic, sequential, parallel, logical, and probabilistic paradigms, the study offers a deep theoretical contribution to programming language analysis.",4.9
Multi-paradigm Declarative Languages,M. Hanus,10.1007/978-3-540-74610-2_5,https://doi.org/10.1007/978-3-540-74610-2_5,International Conference on Logic Programming,106,2007,yes,"The paper appears to analyze fundamental programming language constructs at a theoretical level, particularly regarding declarative programming and its various forms.",maybe,"The abstract mentions ""underlying formalism"" and discusses different classes of declarative languages, suggesting some formal framework analysis, though the depth isn't entirely clear.",yes,"The paper explicitly focuses on different programming paradigms (functional, logic, constraint programming) and their theoretical combination.",maybe,"The paper appears to discuss fundamental design principles by examining how different declarative programming paradigms can be combined, suggesting some coverage of language design principles.",maybe,"The paper appears to have a theoretical foundation, discussing different classes of declarative languages and their combination, suggesting a theoretical approach rather than purely practical.",yes,The abstract suggests a theoretical focus on combining paradigms rather than implementation details.,yes,The paper appears to focus on theoretical aspects of combining programming paradigms rather than practical implementations.,yes,"The abstract is written in English, meeting this criterion. However, the full paper's language cannot be determined from the abstract alone.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"The abstract demonstrates strong alignment with theoretical programming language research, particularly in examining declarative programming paradigms and their potential combination. It shows clear engagement with fundamental language design principles, paradigm theory, and theoretical contributions across functional, logic, and constraint programming domains. The study appears to prioritize theoretical analysis over practical implementation, suggesting a rigorous approach to understanding programming language foundations.",4.6
ATS: A Language That Combines Programming with Theorem Proving,"Sa Cui, Kevin Donnelly, H. Xi",10.1007/11559306_19,https://doi.org/10.1007/11559306_19,International Symposium on Frontiers of Combining Systems,147,2005,yes,"The paper examines type equality, constraint relations, and their theoretical properties, suggesting a focus on fundamental analysis.",yes,"The paper explicitly deals with formal type systems and theorem proving, indicating a rigorous mathematical framework. The discussion of constraint relations and their decidability suggests formal analysis.",maybe,"The abstract mentions ""programming paradigm"" and discusses combining programming with theorem proving, suggesting some paradigm-level analysis, though this isn't the primary focus.",yes,"The paper discusses type systems and their formalization, which relates to fundamental design principles in programming languages. The focus on constraint relations and type equality suggests attention to core language design principles.",yes,"The paper appears to be grounded in mathematical theory, with a formal treatment of type systems, constraint relations, and theorem proving, suggesting a strong theoretical foundation.",yes,"The paper appears to balance theoretical and practical aspects appropriately. While it mentions ""practical programming,"" the focus seems to be on theoretical foundations with practical applications.",yes,"The paper presents a novel approach to type system design and formalization, with theoretical foundations in theorem proving, indicating a strong theoretical contribution.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of type systems and programming paradigms, presenting a novel approach to constraint relations and theorem proving with strong mathematical foundations. The study demonstrates deep engagement with fundamental programming language design principles, offering a sophisticated framework that bridges theoretical analysis and practical programming considerations. Its comprehensive treatment of type equality, constraint relations, and formal verification techniques positions it as a significant contribution to programming language theory.",4.9
Semantics of Interaction,S. Abramsky,10.1007/3-540-61064-2_24,https://doi.org/10.1007/3-540-61064-2_24,Colloquium on Trees in Algebra and Programming,102,1996,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on semantics and computational primitives.",yes,"The paper explicitly deals with formal mathematical frameworks, discussing denotational semantics, category theory, and game semantics as formal approaches to analyzing programming language properties.",yes,"The paper explicitly examines programming paradigms, comparing denotational and operational semantics, and discussing their theoretical foundations.",maybe,"The paper discusses fundamental principles of programming language semantics, particularly focusing on denotational and operational semantics, which addresses fundamental design principles, even if not explicitly about orthogonality or minimality.",yes,"The paper is deeply theoretical, discussing mathematical semantics, category theory, and formal approaches to programming language analysis, providing a strong theoretical foundation.",yes,"While implementation aspects are discussed, they serve to support broader theoretical contributions rather than being the primary focus.",yes,"The paper focuses entirely on theoretical contributions, particularly in developing ""Intensional Semantics"" as a theoretical framework.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the academic nature and citations of the paper suggest it is likely accessible through academic channels.",Include,"This scholarly work presents a rigorous theoretical exploration of programming language semantics, focusing on mathematical frameworks and fundamental design principles across denotational and operational paradigms. The research demonstrates deep engagement with formal theoretical foundations, examining computational constructs through advanced mathematical approaches like game semantics and category theory. Its comprehensive theoretical contribution addresses multiple dimensions of programming language analysis, emphasizing mathematical structure and computational dynamics.",4.9
Data Parallelism and Functional Programming,B. Lisper,10.1007/3-540-61736-1_50,https://doi.org/10.1007/3-540-61736-1_50,The Data Parallel Programming Model,32,1996,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on data parallel operations and their formal expression.",yes,"The paper explicitly mentions developing ""a formalism for data parallel functional programming"" and discusses theoretical foundations, indicating the use of a formal mathematical framework or rigorous verification approach.",yes,"The paper strongly focuses on paradigm theory, specifically examining the integration of data parallel and functional programming paradigms.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on the integration of data parallelism and functional programming paradigms.",yes,"The paper presents a formal theoretical foundation for data parallel functional programming, including discussion of formalisms and theoretical integration of paradigms.",yes,"While the paper mentions practical aspects (like numerical computing), these appear to serve theoretical contributions rather than being the primary focus.",yes,"The paper appears to focus primarily on theoretical contributions, developing formalisms and analyzing paradigm integration rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of data parallel and functional programming paradigms, developing a formal framework that integrates computational principles across different programming approaches. By focusing on fundamental language design, paradigm theory, and theoretical contributions, the study offers a comprehensive analysis of programming language constructs at a deep mathematical level. The work demonstrates strong alignment with theoretical research criteria, examining computational primitives and paradigm foundations through a formal, systematic lens.",4.9
Syntactic finitism in the metatheory of programming languages,"C. Sch√ºrmann, Jeffrey Sarnat",-,-,-,4,2010,yes,"The paper analyzes fundamental aspects of programming language verification and proof systems at a theoretical level, meeting this criterion.",yes,"The paper explicitly deals with formal methods, mathematical soundness, and logical systems for verification. It discusses proof theory and formal proof assistants, strongly meeting this criterion.",maybe,"While the paper discusses programming language research broadly, it does not explicitly focus on paradigm foundations or comparative analysis of paradigms.",maybe,"The paper discusses formal methods for programming languages and reasoning principles, but does not explicitly focus on orthogonality or minimality. It is more focused on proof systems and verification.",yes,"The paper is deeply theoretical, discussing mathematical foundations, proof theory, and formal verification principles, clearly meeting this criterion.",yes,"The paper discusses implementation aspects (Twelf proof assistant) but primarily in service of theoretical contributions, meeting this criterion.",yes,"The paper focuses on theoretical foundations of proof systems and verification, proposing a philosophical viewpoint (syntactic finitism) and exploring theoretical implications, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be a dissertation, which typically has accessible full text through academic channels, but this cannot be confirmed from the abstract alone.",Include,"This dissertation presents a rigorous theoretical exploration of programming language verification, focusing on formal mathematical frameworks and proof systems with a strong emphasis on syntactic finitism. The research deeply engages with fundamental theoretical principles of programming language research, particularly in proof theory and logical reasoning, while proposing novel philosophical perspectives on verification methods. Its comprehensive theoretical approach and mathematical foundations demonstrate significant scholarly contribution to understanding programming language verification principles.",4.6
Automatic Synthesis of Typed Lambda-Programs on Term Algebras,"C. B√∂hm, A. Berarducci",10.1016/0304-3975(85)90135-5,https://doi.org/10.1016/0304-3975(85)90135-5,Theoretical Computer Science,232,1985,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on function definition and synthesis.",yes,"The paper clearly presents a formal mathematical framework, using lambda-calculus (Œõ) and discussing formal properties like completeness theorems and congruence relations.",yes,"The paper examines fundamental aspects of programming paradigms through its analysis of lambda-calculus and term algebras, providing theoretical analysis of programming constructs.",yes,"The paper discusses fundamental design principles through its focus on lambda-calculus and term algebras, particularly examining how functions can be defined without conditional or recursive constructs.",yes,"The paper has a strong theoretical foundation, presenting formal proofs (completeness theorem) and mathematical frameworks for analyzing programming language properties.",yes,"The paper uses implementation examples (over integers, lists, and trees) to support theoretical contributions rather than focusing on practical aspects.",yes,"The paper makes clear theoretical contributions through its proofs, new congruence relations, and theoretical analysis of function synthesis.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language design principles through lambda-calculus, offering a formal mathematical framework for analyzing function synthesis and computational constructs. The study provides a comprehensive theoretical contribution by introducing novel congruence relations, proving completeness theorems, and examining fundamental programming paradigms with mathematical precision. Its focus on theoretical foundations, supported by examples across different data structures, demonstrates a deep scholarly investigation of computational language principles.",4.9
Programming Language Abstractions for Modularly Verified Distributed Systems,"James R. Wilcox, Ilya Sergey, Zachary Tatlock",10.4230/LIPIcs.SNAPL.2017.19,https://doi.org/10.4230/LIPIcs.SNAPL.2017.19,Summit on Advances in Programming Languages,23,2017,yes,"The paper analyzes fundamental programming language constructs in the context of distributed systems and verification, meeting the fundamental analysis criterion.",yes,"The paper explicitly mentions using a proof assistant and discusses formal verification approaches for distributed systems, strongly meeting the formal framework criterion.",yes,"The paper explicitly focuses on programming paradigms and their relationship to verification, particularly in the context of distributed systems, strongly meeting the paradigm theory criterion.",maybe,"The paper discusses programming paradigms and verification frameworks, but does not explicitly focus on orthogonality or minimality. However, it does address fundamental design principles in the context of distributed systems verification.",yes,"The paper presents a theoretical framework for modular verification of distributed systems, including typing disciplines and formal primitives, clearly meeting the theoretical foundation criterion.",yes,"While implementation is discussed, it is clearly in service of theoretical contributions to verification and programming paradigms, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions to verification frameworks and programming paradigms rather than practical implementations, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical framework for distributed systems verification, focusing on programming paradigms and formal mathematical approaches to modular verification. By addressing fundamental design principles, paradigm theory, and theoretical contributions, the study offers a comprehensive examination of programming language constructs through a formal verification lens. The work demonstrates strong alignment with theoretical research criteria, particularly in its approach to analyzing computational primitives and verification methodologies.",4.6
Modeling Answer Constraints in Constraint Logic Programs,"M. Gabbrielli, G. Levi",-,-,International Conference on Logic Programming,69,1991,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on semantic properties and computational mechanisms, meeting the fundamental analysis criterion.",yes,"The paper presents a formal mathematical framework for analyzing CLP(X) programs, including operational, model-theoretic, and fixpoint semantics, as well as algebraic semantics, strongly meeting the formal framework criterion.",yes,"The paper explicitly examines the CLP(X) programming paradigm and its theoretical foundations, including comparative analysis with pure logic programs, strongly meeting the paradigm theory criterion.",maybe,"The paper discusses the CLP(X) paradigm and its semantic properties, which relates to fundamental design principles of programming languages, though it does not explicitly focus on orthogonality or minimality.",yes,"The paper is heavily theoretical, presenting formal semantics and mathematical frameworks for analyzing programming language properties, clearly meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed, they are clearly in service of theoretical contributions, particularly regarding program transformation and analysis techniques, meeting the implementation focus criterion.",yes,"The paper focuses entirely on theoretical contributions, developing new semantic frameworks and theoretical foundations rather than practical applications, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and academic context of the paper suggest it is likely accessible through academic channels.",Include,"This research presents a rigorous theoretical exploration of the CLP(X) programming paradigm, offering a comprehensive formal framework for analyzing semantic properties and computational mechanisms. The study deeply engages with fundamental programming language constructs, paradigm theory, and mathematical foundations, demonstrating strong alignment with theoretical research criteria. Its focus on semantic analysis, theoretical contributions, and formal mathematical frameworks positions it as a substantive scholarly work in programming language theory.",4.9
Unified type system for the modern general-purpose programing language,"Alexey Kanatov, Eugene Zouev",10.15514/ispras-2022-34(3)-2,https://doi.org/10.15514/ispras-2022-34(3)-2,Proceedings of the Institute for System Programming of RAS,0,2022,yes,"The paper analyzes fundamental type system constructs and their theoretical foundations, meeting this criterion.",maybe,"The abstract mentions ""static type checking"" and ""type inference,"" suggesting some formal framework, but the depth of the mathematical rigor is not fully clear from the abstract.",yes,"The paper explicitly discusses the convergence of multiple paradigms (procedural, object-oriented, functional, and concurrent) and their theoretical integration, suggesting strong alignment with this criterion.",yes,"The paper discusses type system design principles and mentions minimality (2 basis constants), suggesting alignment with this criterion.",maybe,"The focus on type systems and their mathematical basis (2 basis constants) indicates a theoretical foundation, though the depth is not fully clear from the abstract.",yes,"The abstract suggests a theoretical focus rather than implementation details, meeting this criterion.",yes,"The paper appears to focus on theoretical aspects of type systems rather than practical implementation, meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"A theoretical exploration of programming language type systems demonstrates strong alignment with paradigm convergence, fundamental design principles, and mathematical foundations across procedural, object-oriented, functional, and concurrent programming approaches. The study's focus on a minimalistic type system with two basis constants suggests a rigorous theoretical contribution to understanding programming language constructs and their underlying mathematical structures.",4.3
Frameworks compiled from declarations: a language‚Äêindependent approach,"P. V. D. Walt, C. Consel, E. Balland",10.1002/spe.2417,https://doi.org/10.1002/spe.2417,"Software, Practice & Experience",4,2017,yes,The paper analyzes fundamental programming language constructs through the lens of declaration-driven frameworks and their application across paradigms.,maybe,"While the paper mentions ""systematic"" application of concepts, it's not explicitly clear if it uses formal mathematical frameworks. The focus seems more practical than formal.",yes,"The paper explicitly examines programming paradigms, comparing object-oriented (Java) and functional (Racket) approaches and discussing framework development across paradigms.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on declaration-driven frameworks and their application across paradigms.",maybe,"The paper appears to have some theoretical underpinning in analyzing framework concepts, but the abstract doesn't strongly indicate a formal theoretical foundation.",yes,The implementation aspects (prototype mobile application) serve to demonstrate theoretical contributions rather than being the primary focus.,yes,The paper contributes to theoretical understanding by identifying fundamental concepts in declaration-driven frameworks and their application across paradigms.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract does not provide enough information to determine if the full text of the paper is accessible, but the copyright notice suggests it is likely accessible through academic channels.",Exclude,"The research explores declaration-driven programming frameworks across object-oriented and functional paradigms, demonstrating strong theoretical contributions in language design principles and paradigm theory. While the study systematically analyzes fundamental programming constructs and provides implementation insights, there remains some uncertainty regarding the depth of formal mathematical frameworks and rigorous verification approaches. The work appears to offer significant theoretical insights into programming language design and framework development.",4.3
A New Framework for Declarative Programming: Categorial Perspectives,"James Lipton, S. E. Finkelstein, P. Freyd",10.1007/3-540-60983-0_14,https://doi.org/10.1007/3-540-60983-0_14,Extensions of Logic Programming,1,1996,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on syntax and semantics.",yes,"The paper presents a formal mathematical framework using ""finite product categories"" and ""categorical semantics,"" indicating rigorous mathematical foundations.",yes,"The paper explicitly examines the declarative paradigm and provides theoretical analysis of programming paradigms, particularly logic programming.",maybe,"The paper discusses fundamental design principles in logic programming, particularly regarding syntax and semantics, even though it does not explicitly mention orthogonality or minimality.",yes,"The paper is built on formal theoretical foundations, including categorical semantics and the Kowalski-van Emden fixed point interpretation.",yes,The paper appears to focus on theoretical aspects rather than implementation.,yes,"The paper focuses on theoretical contributions, proposing a new framework and generalizing existing theoretical foundations rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but this is a common limitation in screening.",Include,"A rigorous theoretical exploration of logic programming semantics, presenting a novel categorical framework that generalizes existing paradigm foundations through mathematical formalism. The research deeply engages with fundamental programming language constructs, offering a sophisticated theoretical contribution to understanding declarative programming principles. Its strong mathematical approach and focus on paradigm theory demonstrate a comprehensive examination of computational semantics.",4.9
Programming Languages: Principles and Paradigms,"M. Gabbrielli, S. Martini",10.1007/978-1-84882-914-5,https://doi.org/10.1007/978-1-84882-914-5,Undergraduate Topics in Computer Science,102,2010,no,"While it covers ""main principles,"" there's no clear indication it analyzes fundamental constructs at a theoretical level.",no,There is no indication in the abstract that the work presents or utilizes formal mathematical frameworks.,no,"While it mentions ""modern programming,"" there's no clear indication it examines paradigm foundations or provides comparative theoretical analysis.",maybe,"The abstract mentions ""main principles behind the design"" of programming languages, but it's too brief to determine if it specifically covers orthogonality or minimality.",no,The abstract doesn't suggest any formal theoretical foundation.,no,"The abstract mentions ""design and implementation,"" but in the context of a textbook, this likely focuses on practical aspects rather than theoretical contributions.",no,"The abstract suggests this is a textbook providing ""detailed and up to date description,"" which typically focuses on practical aspects rather than theoretical contributions.",yes,"The abstract is written in English, so this criterion is met.",maybe,"The abstract mentions this is part of the ""UTiCS series of undergraduate textbooks,"" suggesting it's likely accessible, but I cannot be certain without more information.",Exclude,"The text appears to be a textbook description focused on practical programming language design, lacking clear evidence of theoretical foundations, formal frameworks, or rigorous mathematical analysis. Multiple screening criteria related to theoretical contributions, paradigm theory, and fundamental analysis remain unmet, suggesting the work is more educational and descriptive than research-oriented.",1.4
Category-based Semantics for Equational and Constraint Logic Programming,R. Diaconescu,-,-,-,34,1994,yes,"The study analyzes fundamental programming language constructs at a deep theoretical level, including equational deduction, quantifiers, and model theory.",yes,"The paper strongly meets this criterion, presenting a ""general framework for equational logic programming"" using category theory and formal mathematical approaches. It explicitly discusses formal frameworks and mathematical foundations.",yes,"The research extensively examines programming paradigm foundations, specifically focusing on equational logic programming and its relationship to other paradigms like constraint logic programming.",yes,"The paper deeply investigates fundamental design principles in programming languages, specifically focusing on equational logic programming and its theoretical foundations.",yes,"The paper is heavily theoretical, providing mathematical foundations for modularization, category-based semantics, and formal treatment of equational logic programming. It includes proofs of completeness and soundness.",yes,"While implementation aspects are discussed (e.g., Eqlog), they serve to support the broader theoretical contributions rather than being the primary focus.",yes,"The paper's primary focus is theoretical, contributing to fundamental understanding of programming language paradigms and their mathematical foundations, rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be a thesis, which typically has full text available through university libraries or archives, but this is not explicitly confirmed in the abstract.",Include,"This thesis presents a rigorous theoretical exploration of equational logic programming, utilizing advanced mathematical frameworks like category theory to analyze programming language paradigms. The work provides a comprehensive formal foundation for understanding computational logic, demonstrating deep theoretical contributions across multiple programming language constructs and paradigms. Its mathematical approach, focusing on fundamental principles of equational deduction and model theory, offers significant insights into programming language design and theoretical foundations.",4.9
What is Generic Programming ?,"G. D. Reis, Jaakko J√§rvi",-,-,-,4,2005,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on generic programming and type systems, meeting this criterion.",yes,"The abstract explicitly mentions analyzing ""core mathematical notions"" and ""algebraic structures,"" indicating a formal mathematical framework is used, strongly meeting this criterion.",yes,"The paper directly examines programming paradigms, comparing different approaches to generic programming across imperative and functional programming communities, strongly meeting this criterion.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on generic programming paradigms and their mathematical foundations, strongly meeting this criterion.",yes,"The paper clearly focuses on theoretical foundations, aiming to analyze ""core mathematical notions"" and provide a ""base for common understanding,"" strongly meeting this criterion.",yes,"The paper appears to use implementation examples (like STL) to support theoretical understanding rather than focusing on practical aspects, meeting this criterion.",yes,"The focus is clearly theoretical, analyzing mathematical foundations and providing a principled approach to understanding generic programming, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research explores fundamental programming language design principles through a rigorous mathematical lens, examining generic programming paradigms across different computational approaches. By analyzing core mathematical notions and providing a theoretical framework for understanding programming language constructs, the study offers a principled investigation of computational foundations. The work demonstrates a strong theoretical contribution to understanding programming paradigms, focusing on mathematical structures and conceptual analysis rather than practical implementation.",4.9
"The programming language jigsaw: mixins, modularity and multiple inheritance",Gilad Bracha,-,-,-,246,1992,yes,"The paper analyzes fundamental programming language constructs (inheritance, modularity, encapsulation) at a theoretical level, meeting the fundamental analysis criterion.",yes,"The paper explicitly mentions ""rigorous semantics"" and ""denotational model of inheritance,"" indicating a formal mathematical framework, meeting the formal framework criterion.",yes,"The paper examines modularity across different paradigms, specifically mentioning it can be applied to ""a wide variety of languages"" and ""independent of a particular computational paradigm,"" meeting the paradigm theory criterion.",yes,"The paper presents a fundamental framework (Jigsaw) for modularity in programming languages, including principles of inheritance, encapsulation, and typing, meeting the language design principles criterion.",yes,"The paper presents a theoretical framework with formal semantics and a denotational model, providing a solid theoretical foundation, meeting the theoretical foundation criterion.",yes,"While implementation is discussed (extension of Modula-3), it serves to demonstrate and validate the theoretical framework rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper's primary focus is on theoretical contributions to understanding modularity and inheritance, not just practical implementation, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it is a dissertation.",Include,"A comprehensive theoretical framework for programming language modularity is presented, demonstrating rigorous mathematical foundations and formal semantic analysis across computational paradigms. The research provides a fundamental examination of inheritance and module manipulation, offering a novel approach to understanding programming language design principles with strong theoretical contributions. The study's depth in theoretical analysis, formal framework, and paradigm-independent approach makes it a significant scholarly work in programming language theory.",4.9
Functional Programming,-,10.1002/9780470050118.ecse164,https://doi.org/10.1002/9780470050118.ecse164,Wiley Encyclopedia of Computer Science and Engineering,80,2008,yes,"The abstract analyzes fundamental programming language constructs (functions, statelessness, interfaces) at a conceptual level, though not necessarily at a deep theoretical level.",no,The abstract does not explicitly mention any formal mathematical framework or verification approach. It describes functional programming concepts but not in a formal mathematical way.,yes,"The abstract clearly examines programming paradigm foundations, comparing functional programming to other paradigms (object-oriented and logic programming) and discussing its fundamental characteristics.",maybe,"The abstract mentions ""highly orthogonal language constructs"" and discusses fundamental design principles of functional programming, partially meeting this criterion.",no,"While the abstract discusses fundamental concepts of functional programming, it doesn't explicitly present a formal theoretical foundation or mathematical framework.",yes,"The abstract discusses programming concepts at a theoretical level rather than focusing on implementation details, meeting this criterion.",maybe,"The abstract appears to focus on explaining fundamental concepts rather than practical applications, suggesting some theoretical contribution, though it's not clear if it presents new theoretical insights.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates strong alignment with programming paradigm theory and fundamental language construct analysis, while showing partial engagement with language design principles. However, it lacks explicit formal mathematical frameworks and rigorous theoretical foundations, which limits its comprehensive theoretical contribution. The text provides a conceptual overview of functional programming that meets several screening criteria but falls short of a fully rigorous theoretical examination.",3.5
A Graph-Based Formal Semantics of Reactive Programming from First Principles,"Bjarno Oeyen, Joeri De Koster, Wolfgang De Meuter",10.1145/3611096.3611101,https://doi.org/10.1145/3611096.3611101,FTfJP@ECOOP,0,2022,yes,"The paper analyzes fundamental programming language constructs (reactive programming) at a theoretical level, focusing on core semantics and graph-based program structure, which meets the fundamental analysis criterion.",yes,"The paper explicitly presents a formal framework called ""Karcharias"" for reactive programming, and emphasizes building from first principles, indicating a rigorous formal approach that meets the formal framework criterion.",yes,"The paper examines the reactive programming paradigm at a fundamental level, comparing it with various implementations and providing theoretical analysis, which meets the paradigm theory criterion.",maybe,"The paper discusses fundamental design principles of reactive programming, including graph-based program structure and value propagation, which addresses the language design principles criterion, even though it does not explicitly cover orthogonality or minimality.",yes,"The paper presents a formal theoretical foundation for reactive programming, built without relying on a base language, showing strong theoretical grounding that meets the theoretical foundation criterion.",yes,"The paper appropriately uses implementation examples (like Reactive Extensions, Akka Streams) to support theoretical contributions rather than focusing on practical aspects, which meets the implementation focus criterion.",yes,"The paper clearly focuses on theoretical contributions rather than practical aspects, aiming to formalize core semantics and provide a fundamental model, which meets the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of reactive programming paradigms, presenting a novel formal framework that systematically analyzes fundamental computational constructs without relying on existing language foundations. The research provides a comprehensive theoretical contribution by formalizing core semantics of stream processing through a graph-based model, demonstrating deep engagement with programming language design principles and paradigm theory.",4.9
Reusable Semantic Specifications of Programming Languages,Jose Emilio Labra Gayo,-,-,-,10,2002,yes,The paper provides clear evidence of fundamental analysis through the examination of programming language semantics and basic building blocks across paradigms.,yes,"The paper clearly involves formal mathematical frameworks, specifically mentioning ""monadic semantics"" and ""semantic building blocks,"" indicating a rigorous formal approach.",yes,"The paper explicitly compares different programming paradigms (functional, imperative, and logic programming) and their semantic specifications, indicating a strong focus on paradigm theory.",maybe,"The paper discusses semantic specification approaches and modularity, which relates to fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,The paper has strong evidence of a theoretical foundation through the use of monadic semantics and formal specification approaches.,maybe,"The paper seems to focus on theoretical aspects rather than implementation, though it does mention ""reusable semantic building blocks"" which could have practical applications.",yes,"The paper appears to focus on theoretical contributions through semantic specification and comparison of paradigms, rather than practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but the fact that it is a tutorial paper suggests it might be publicly available.",Include,"A comprehensive theoretical exploration of programming language semantics across functional, imperative, and logic paradigms, utilizing rigorous monadic semantic frameworks and reusable building blocks. The study demonstrates strong alignment with theoretical research criteria, focusing on fundamental design principles, paradigm comparison, and formal mathematical approaches to language specification. While full-text accessibility remains uncertain, the paper's tutorial nature and deep theoretical engagement suggest significant scholarly value.",4.6
A General Approach to Derive Uncontrolled Reversible Semantics,"Ivan Lanese, Doriana Medic",10.4230/LIPIcs.CONCUR.2020.33,https://doi.org/10.4230/LIPIcs.CONCUR.2020.33,International Conference on Concurrency Theory,14,2020,yes,"The paper examines basic computational primitives (reversible actions) and their theoretical properties at a deep level, demonstrating fundamental analysis.",yes,"The paper explicitly mentions ""reduction semantics"" and formal analysis of causal-consistency properties, and references formal systems like Higher-Order œÄ-calculus, indicating the use of a formal mathematical framework.",yes,"The paper explicitly examines reversible computing as a paradigm and provides theoretical analysis of its foundations and extensions, meeting the paradigm theory criterion.",maybe,"The paper discusses reversible computing as a paradigm and presents a general technique for extending forward models, which addresses fundamental design principles in programming languages through the lens of reversibility, even though it does not explicitly discuss orthogonality or minimality.",yes,"The paper builds on formal semantics and provides mathematical analysis of reversible extensions, including proofs of properties like causal-consistency, demonstrating a clear theoretical foundation.",maybe,The paper discusses implementation aspects (Core Erlang) but primarily as a vehicle for theoretical contributions rather than focusing on practical implementation details.,yes,"The paper makes clear theoretical contributions through its general technique for reversible extensions and formal analysis of properties, rather than focusing on practical patterns or optimization.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and academic context of the paper suggest it is likely accessible through academic channels.",Include,"This research presents a rigorous theoretical exploration of reversible computing, utilizing formal mathematical frameworks and reduction semantics to analyze programming language paradigms. The study offers a comprehensive examination of causal-consistent reversibility, demonstrating strong theoretical contributions through its general technique for extending forward models and formal analysis of computational properties. By addressing fundamental design principles and providing a systematic approach to reversible computing, the work makes significant theoretical contributions to programming language research.",4.9
Les objets des math√©matiques,"T. Hardin, R. Rioboo",10.3166/objet.10.4.83-118,https://doi.org/10.3166/objet.10.4.83-118,Obj. Logiciel Base donn√©es R√©seaux,9,2004,yes,"The paper analyzes fundamental programming language constructs through its examination of programming paradigms and mathematical implementation, which meets the fundamental analysis criterion.",maybe,"While the paper discusses mathematical programming, it's unclear if it presents a formal mathematical framework for verification.",yes,"The abstract explicitly mentions examining three programming paradigms based on OCaml's modules, classes, and objects, which meets the paradigm theory criterion.",yes,"The paper discusses the design of a programming language (FoCal) and its fundamental principles, including orthogonality in its programming paradigms, which meets the language design principles criterion.",yes,"The paper appears to have a theoretical foundation, discussing programming paradigms and mathematical implementation, which meets the theoretical foundation criterion.",yes,"The implementation discussion appears to serve theoretical contributions, particularly in how it enables both concrete and abstract programming, which meets the implementation focus criterion.",yes,"The paper focuses on theoretical aspects of language design and mathematical programming rather than practical optimization, which meets the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The study presents a theoretical exploration of programming language design, focusing on mathematical programming paradigms and language constructs with a strong emphasis on theoretical foundations. It demonstrates significant potential in examining programming language principles through the development of the FoCal language, with particular attention to paradigm theory and fundamental computational analysis. While some aspects of formal verification remain uncertain, the research appears to make substantive contributions to theoretical understanding of programming language design.",4.3
"Molecular Objects, Abstract Data Types, and Data Models: A Framework","D. Batory, A. Buchmann",-,-,Very Large Data Bases Conference,134,1984,maybe,"The paper analyzes fundamental data structures and molecular objects, but at a database systems level rather than programming language constructs.",maybe,"The abstract mentions a ""framework for studying"" molecular objects and discusses logical data models, suggesting some formal structure, but it is not clearly focused on programming language properties.",maybe,"While the paper mentions a ""programming language/data structure paradigm,"" it is not primarily focused on programming paradigm foundations or comparative theoretical analysis.",no,"The paper discusses data modeling and molecular objects, but does not explicitly address orthogonality or minimality of programming languages. It is more focused on data structures and database systems.",maybe,"The paper appears to have a theoretical foundation in data modeling and abstract data types, but it is more focused on database systems than programming language theory.",maybe,The paper discusses implementation aspects (DBMS support) but in the context of database systems rather than programming language implementation.,maybe,"The paper does make theoretical contributions, but they are primarily in the domain of database systems and data modeling rather than programming language theory.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract primarily addresses database systems and data modeling, with limited direct engagement with programming language theory and design principles. While the paper demonstrates theoretical foundations and a framework for studying molecular objects, it falls short of the systematic review's core focus on programming language theoretical analysis. Consequently, the paper only partially meets the screening criteria, with its primary contributions residing in database systems rather than programming language theory.",2.9
On the algebraic structure of declarative programming languages,-,10.1016/j.tcs.2009.07.038,https://doi.org/10.1016/j.tcs.2009.07.038,Theoretical Computer Science,31,2009,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including syntax, proof theory, and operational semantics, clearly meeting the fundamental analysis criterion.",yes,"The paper explicitly develops an ""algebraic framework"" using indexed premonoidal categories and provides formal mathematical analysis of programming language properties, strongly meeting the formal framework criterion.",yes,"The paper examines programming paradigm foundations, specifically logic programming and its extensions, including integration with other paradigms, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles through its algebraic framework for logic programming, including syntax and semantics, meeting the language design principles criterion.",yes,"The paper presents a rigorous mathematical framework based on categorical logic and provides formal theoretical foundations for logic programming, clearly meeting the theoretical foundation criterion.",yes,"The paper appears to focus on theoretical contributions rather than implementation, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions, developing new mathematical frameworks and formal analysis rather than practical applications, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous mathematical framework for logic programming using indexed premonoidal categories, demonstrating strong theoretical contributions across multiple programming language design principles. The study provides a comprehensive algebraic approach to analyzing syntax, semantics, and paradigm foundations, with a clear focus on fundamental theoretical understanding rather than practical implementation. Its sophisticated mathematical modeling and categorical logic approach comprehensively address theoretical programming language research criteria.",4.9
Proceedings of the third ACM SIGPLAN conference on History of programming languages,"B. Ryder, B. Hailpern",10.1145/1238844,https://doi.org/10.1145/1238844,-,71,2007,no,"While the paper covers programming paradigms, the abstract suggests a historical rather than fundamental theoretical analysis.",no,The abstract does not mention any formal mathematical frameworks or verification approaches.,yes,"The paper explicitly covers multiple programming paradigms (object-oriented, functional, reactive, parallel, and scripting) and their historical development.",no,"The abstract does not explicitly mention investigation of orthogonality or minimality, and while it covers multiple paradigms, it appears to be more historical than design-principle focused.",no,The abstract suggests a historical perspective rather than theoretical foundations.,no,There is no clear indication of implementation discussion or tools in the abstract.,no,"The abstract suggests a historical perspective rather than theoretical contributions, focusing on ""mini-histories"" of paradigms.",maybe,"The abstract is in English, but since this is a proceedings collection, the individual papers may vary in language, so it cannot be definitively confirmed that all papers meet this criterion.",maybe,"As a proceedings collection, it's likely that the full text is accessible through academic channels, but this is not explicitly stated in the abstract.",Exclude,"A historical proceedings collection covering multiple programming paradigms lacks the required theoretical depth and formal mathematical frameworks specified in the screening criteria. While the document touches on programming language paradigms, its historical perspective and absence of rigorous theoretical analysis suggest limited alignment with the specified research requirements.",2.7
Language and Architecture Paradigms as Object Classes,"D. Spinellis, S. Drossopoulou, S. Eisenbach",10.1007/3-540-57840-4_32,https://doi.org/10.1007/3-540-57840-4_32,Programming Languages and System Architectures,7,1994,yes,The paper analyzes fundamental programming language constructs through the lens of object-oriented technology and paradigm relationships.,maybe,"The abstract mentions ""proof theories"" and discusses modeling approaches, suggesting some formal framework, though the depth is not entirely clear.",yes,"The paper directly examines programming paradigms and their relationship to system architectures, offering a theoretical framework for understanding multiparadigm systems.",maybe,"The paper discusses linguistic abstractions and programming paradigms, but does not explicitly focus on orthogonality or minimality. It does address fundamental design principles through the lens of object-oriented technology.",maybe,"The paper appears to have a theoretical foundation in its approach to modeling programming languages and architectures, though it is not explicitly mathematical.",maybe,The paper discusses implementation aspects but uses them to support broader theoretical contributions about paradigm relationships and modeling.,yes,"The paper appears to make theoretical contributions by providing a unifying framework for understanding programming paradigms and architectures, rather than focusing on practical aspects alone.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a theoretical framework for understanding programming paradigms and system architectures through object-oriented technology, demonstrating strong alignment with paradigm theory and theoretical contributions. While the study offers insights into fundamental programming language constructs and modeling approaches, there is some uncertainty regarding the depth of formal mathematical analysis. The work appears to provide a nuanced exploration of multiparadigm systems with a focus on theoretical understanding.",4.3
Programming in Higher-Order Logic,Alwen Tiu,-,-,-,139,2009,yes,"The paper provides strong evidence of fundamental analysis of programming language constructs, particularly examining logical connectives as proof search instructions and basic computational primitives.",yes,"The paper presents a formal mathematical framework, discussing first-order logic, theorem proving, resolution, and formal logical connectives as proof search instructions.",yes,"The paper has a strong focus on programming paradigm foundations, specifically logic programming, comparing different approaches (Prolog vs. ŒªProlog) and examining fundamental paradigm questions.",yes,"The paper discusses fundamental design principles of logic programming languages, particularly focusing on Prolog and ŒªProlog, and examines core design elements like higher-order programming, modules, and abstract data types.",yes,"The paper has a clear theoretical foundation in mathematical logic and formal proof systems, examining the fundamental question ""what really is logic programming?"" and discussing formal properties like completeness.",yes,"While implementation aspects are discussed (e.g., Prolog extensions), they serve to support theoretical contributions rather than being the primary focus.",yes,"The paper appears primarily theoretical, focusing on fundamental questions about logic programming and its relationship to proof search, rather than practical patterns or optimization.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper may be accessible, as it appears to be course lecture material which could be publicly available.",Include,"The abstract demonstrates a rigorous theoretical exploration of logic programming, presenting a comprehensive examination of programming language design principles through a formal mathematical framework. It deeply investigates fundamental computational constructs, paradigm foundations, and theoretical contributions, with a strong emphasis on logical proof systems and programming language analysis. The work appears to provide a sophisticated theoretical treatment of logic programming, focusing on fundamental principles rather than practical implementations.",4.9
The paradigms of programming,R. W. Floyd,10.1145/359138.359140,https://doi.org/10.1145/359138.359140,CACM,147,1979,maybe,"The abstract suggests analysis of programming paradigms at a fundamental level, but the depth of analysis is unclear.",no,The abstract does not indicate the use of any formal mathematical frameworks or verification approaches.,yes,"The abstract directly states that it will discuss programming paradigms and their relationship to programming languages, indicating a focus on paradigm theory.",maybe,"The abstract mentions programming paradigms and their relationship to programming languages, suggesting potential coverage of language design principles, but it is not explicitly clear if it covers orthogonality or minimality.",maybe,"While the abstract suggests a theoretical discussion of paradigms, it does not explicitly mention formal theoretical foundations.",no,The abstract does not discuss implementation or tools.,maybe,"The abstract suggests theoretical discussion (""how they affect our success as designers""), but also mentions teaching aspects, which might indicate a more practical focus.",yes,"The abstract is written in English, meeting the publication language criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"The abstract suggests a theoretical exploration of programming paradigms, with potential alignment to language design principles and paradigm theory. However, significant uncertainties exist regarding the depth of theoretical analysis, formal frameworks, and the balance between theoretical and pedagogical approaches. The brevity of the abstract limits definitive assessment against the comprehensive screening criteria.",3.1
Operational versus definitional: a perspective on programming paradigms,"A. Ambler, M. Burnett, B. A. Zimmerman",10.1109/2.156380,https://doi.org/10.1109/2.156380,Computer,70,1992,yes,"The paper analyzes fundamental approaches to programming and problem-solving at a theoretical level, meeting this criterion.",maybe,"The abstract suggests a theoretical framework for analyzing paradigms (operational, demonstrational, definitional) but does not explicitly mention formal mathematical frameworks or verification approaches.",yes,"The paper directly examines programming paradigms, their theoretical foundations, and provides comparative analysis between different approaches, strongly meeting this criterion.",maybe,"The paper discusses programming paradigms and their fundamental approaches to problem-solving, which relates to language design principles, though it does not explicitly address orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation in its classification and analysis of programming paradigms, though the mathematical rigor is not explicitly stated.",maybe,"The abstract mentions a ""pure language solution"" for sorting, but this appears to serve theoretical purposes rather than being the main focus.",yes,"The paper appears to focus on theoretical understanding of paradigms rather than practical aspects, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract demonstrates a strong theoretical approach to programming paradigms, examining fundamental problem-solving strategies across operational, demonstrational, and definitional approaches. It provides a comparative theoretical analysis of programming paradigms, focusing on conceptual foundations rather than practical implementations, with a clear emphasis on understanding computational problem-solving at a theoretical level.",4.3
Programming Language Techniques for Cryptographic Proofs,"G. Barthe, B. Gr√©goire, Santiago Zanella B√©guelin",10.1007/978-3-642-14052-5_10,https://doi.org/10.1007/978-3-642-14052-5_10,International Conference on Interactive Theorem Proving,15,2010,yes,"The paper meets this criterion, as it analyzes fundamental programming language constructs in the context of formal verification and cryptographic proofs.",yes,"The paper strongly meets this criterion, as it uses the Coq proof assistant and discusses formal proof frameworks, including relational Hoare logic and semantics-preserving transformations.",maybe,"The paper partially meets this criterion, as it discusses programming paradigms (code-based paradigm), but is more focused on specific applications than comparative paradigm analysis.",no,"The paper focuses on programming language techniques, but not specifically on orthogonality or minimality. It discusses programming language tools for cryptographic proofs.",yes,"The paper clearly meets this criterion, as it is deeply theoretical, focusing on formal proofs and mathematical frameworks for cryptographic security.",yes,"The paper meets this criterion, as the implementation aspects (programming language tools) serve to support broader theoretical contributions to formal verification.",yes,"The paper strongly meets this criterion, as it focuses on theoretical contributions to cryptographic proof techniques and formal verification.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"A rigorous theoretical study utilizing formal mathematical frameworks and the Coq proof assistant to analyze cryptographic security through programming language techniques. The research provides deep theoretical contributions to formal verification, focusing on fundamental programming language constructs and mathematical frameworks for cryptographic proof techniques. While strongly aligned with theoretical and formal criteria, the paper's specific focus on cryptographic applications slightly nuances its broader programming language theory relevance.",4.6
AKL - A Multiparadigm Programming Language,Sverker Janson,-,-,-,71,1994,yes,"The study analyzes fundamental programming language constructs at a theoretical level, particularly in how different paradigms can be combined.",yes,"The abstract mentions ""operational semantics,"" ""computation model,"" and ""rewriting of 'semi-logical' expressions,"" indicating a formal mathematical framework.",yes,"The study explicitly examines multiple programming paradigms (concurrent, object-oriented, functional, logic, and constraint programming) and their theoretical integration.",yes,"The paper explicitly focuses on fundamental design principles, specifically mentioning ""new basic principles"" and discussing the combination of different programming paradigms in a coherent way.",yes,"The paper presents a theoretical foundation through its computation model and execution model, with formal treatment of constraints and computation states.",yes,"While implementation is discussed (abstract machine and AGENTS system), it serves to support the theoretical contributions rather than being the primary focus.",yes,"The paper's primary focus is theoretical, developing new principles for combining different programming paradigms and presenting formal models.",yes,"The paper is written in English, meeting this criterion.",maybe,"The abstract indicates this is a thesis with ISBN and ISSN numbers, suggesting it should be accessible through academic channels, though this isn't explicitly confirmed.",Include,"This thesis presents a comprehensive theoretical investigation of programming language design, focusing on fundamental principles of combining multiple paradigms through a rigorous mathematical framework. The research systematically explores operational semantics, computation models, and theoretical foundations of programming language constructs, demonstrating a deep theoretical contribution to understanding programming language design principles. By examining concurrent, object-oriented, functional, logic, and constraint programming paradigms, the study offers a sophisticated analysis of computational theory and language integration.",4.9
"Higher-order , linear , concurrent constraint programming",Vijay Saraswat Xerox,-,-,-,85,1992,yes,"The paper analyzes fundamental programming language constructs, including higher-order computation, asynchronous concurrency, state change mechanisms, and program abstractions.",yes,"The paper uses a formal mathematical framework, including higher-order linear logic, formal operational semantics, bisimulation analysis, and proof-theory connections.",yes,"The paper has a strong focus on paradigm theory, examining the concurrent constraint programming paradigm, comparing it with other paradigms (actors, Linda, Petri nets), and analyzing fundamental paradigm shifts.",yes,"The paper presents a framework for higher-order computation and discusses fundamental design principles in programming languages, particularly regarding concurrency and indeterminism.",yes,"The paper has a clear theoretical foundation based on linear logic formalism, proof-as-computation interpretation, and a formal mathematical framework for concurrency.",yes,The implementation aspects (operational semantics) in the paper serve the theoretical contributions rather than being the primary focus.,yes,"The paper makes a primarily theoretical contribution, presenting a new framework, developing theoretical foundations, and focusing on fundamental properties rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract mentions that the paper has been submitted for publication, suggesting the full text is likely accessible, but this is not certain from the abstract alone.",Include,"This research presents a rigorous theoretical framework for higher-order computation, grounded in linear logic and exploring fundamental programming language paradigms with a strong emphasis on formal mathematical analysis. The study comprehensively examines computational constructs through a sophisticated lens of concurrency, indeterminism, and paradigmatic foundations, demonstrating deep theoretical contributions across multiple computational domains. Its approach integrates proof-theory, operational semantics, and bisimulation to provide a nuanced exploration of programming language design principles.",4.9
BIONETS WP 2.2 ‚Äì PARADIGM APPLICATION AND MAPPING D2.2.9 Mathematical Framework for Interaction Computing with Applications to Security and Service Choreography,"Paolo Dini, Gabor Horvath, Daniel Schreckling, Heiko Pfeffer",-,-,-,3,2009,yes,"The paper provides clear analysis of fundamental constructs, including basic functional components, system behavior, structural properties, and dynamical systems.",yes,"The paper presents strong evidence of formal mathematical frameworks, including algebraic structure analysis, Lie group structure, formal specification frameworks, and a mathematical analysis workflow.",yes,"The paper examines programming paradigms, particularly interaction computing, and compares it with existing paradigms, discussing fundamental differences in concurrency, interdependability, and functionality.",maybe,"The paper discusses developing a new programming language for interaction computing, including considerations of fundamental design principles, but it does not explicitly focus on orthogonality or minimality.",yes,"The paper has a clear theoretical foundation with mathematical analysis of biological systems, formal specification approaches, and a theoretical framework for interaction computing.",maybe,"The paper appears to focus on theoretical foundations rather than implementation details, though it does discuss language development.",yes,"The paper has a strong theoretical focus, developing new mathematical frameworks and analyzing fundamental properties rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The formal academic style of the paper suggests it is likely a published paper, but the full-text accessibility cannot be determined from the abstract alone.",Include,"The research presents a rigorous theoretical exploration of programming language design, grounded in mathematical frameworks and formal specification approaches, with a strong emphasis on interaction computing paradigms. By developing a novel language based on biological system analysis and employing advanced mathematical structures like algebraic and Lie group frameworks, the study offers a sophisticated theoretical contribution to programming language foundations. The work demonstrates deep engagement with fundamental computational principles, theoretical modeling, and paradigmatic analysis across computational and biological domains.",4.6
Computing Surveys symposium on models of programming languages and computation,"C. Hankin, H. R. Nielson",10.1145/234528.234729,https://doi.org/10.1145/234528.234729,CSUR,0,1996,yes,"The abstract indicates analysis of fundamental programming language constructs through its coverage of semantics, program analysis, and verification.",yes,"The abstract mentions several formal approaches including ""abstract interpretation,"" ""algebraic view,"" and ""higher-order modal logics,"" indicating strong formal mathematical frameworks.",yes,"The abstract explicitly mentions ""integration of paradigms"" and discusses different programming paradigms, including declarative languages and programming languages for open systems.",maybe,"The abstract indicates coverage of ""programming language design"" and mentions ""integration of paradigms,"" suggesting discussion of fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,"The paper clearly has a theoretical foundation, discussing semantics, formal verification, and mathematical approaches to programming languages.",maybe,"While implementation aspects are mentioned (e.g., compilation, partial evaluation), they appear to serve theoretical contributions rather than being the primary focus.",yes,"The paper appears strongly theoretical, focusing on models, semantics, and formal analysis rather than practical implementation details.",yes,"The paper is written in English, meeting the language requirement.",maybe,"The paper appears to be a symposium overview published in a formal proceedings or journal, suggesting it is likely accessible through academic channels.",Include,"A comprehensive symposium overview exploring programming language design, semantics, and theoretical foundations across multiple paradigms, with strong emphasis on formal mathematical frameworks and rigorous analytical approaches. The work demonstrates deep engagement with fundamental programming language constructs, paradigm integration, and theoretical contributions spanning language design, program analysis, and verification techniques. Multiple theoretical dimensions are addressed, including declarative languages, open systems, and advanced mathematical modeling of computational principles.",4.6
A layered object-oriented programming language,T. Clark,-,-,-,9,1994,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically focusing on the core primitives of object-oriented programming languages.",yes,"The paper uses a simple functional notation and builds upon lambda-calculus, providing a formal mathematical framework for analyzing object-oriented programming language properties.",yes,"The paper directly examines programming paradigm foundations, specifically focusing on the object-oriented paradigm and its fundamental characteristics.",yes,"The paper explicitly focuses on fundamental design principles of object-oriented programming languages, including modularity, interfaces, polymorphism, inheritance, and reuse. It aims to provide a formal framework for understanding these principles.",yes,"The paper explicitly aims to provide a formal theoretical foundation for object-oriented programming languages, using functional programming as its basis and extending it with formal primitives.",yes,"While implementation aspects are discussed, they serve to support the theoretical framework rather than being the primary focus.",yes,"The paper's primary focus is on theoretical understanding, aiming to ""strip bare the underlying concepts of object-oriented programming languages"" rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research provides a rigorous theoretical framework for understanding object-oriented programming languages through a formal mathematical approach, utilizing lambda-calculus and functional notation to systematically analyze fundamental design principles. By constructing a layered language model that explores paradigm foundations, the study offers a comprehensive theoretical contribution to programming language design, focusing on core computational primitives and paradigmatic characteristics. The work demonstrates a strong emphasis on theoretical understanding, mathematical formalism, and systematic analysis of programming language constructs.",4.9
Toward a unified paradigm for constructing and understanding robot processes,"Juyang Weng, James McClelland, Alex Pentland, Olaf Sporns, Ida Stockman, Esther Thelen",10.1109/HCC.2002.1046362,https://doi.org/10.1109/HCC.2002.1046362,Proceedings IEEE 2002 Symposia on Human Centric Computing Languages and Environments,4,2002,yes,"The paper analyzes fundamental programming language constructs, particularly regarding concurrent programming and process structures, meeting this criterion.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, so it is unclear if the paper presents or utilizes a formal mathematical framework or rigorous verification approach for analyzing programming language properties.",yes,"The paper explicitly examines programming paradigms, their integration, and their relationship to process structure in concurrent programming, strongly meeting this criterion.",yes,"The paper discusses fundamental design principles in programming languages, particularly regarding process structure and concurrency, and explicitly addresses how programming paradigms can be integrated, meeting this criterion.",maybe,"The paper appears to have a theoretical foundation in examining process structures and programming paradigms, but the abstract does not explicitly indicate a formal mathematical framework.",yes,"The paper discusses implementation aspects, like ""in place"" execution, but uses these to support broader theoretical contributions about programming paradigms and process structures.",yes,"The paper appears to make theoretical contributions by analyzing how different paradigms can be integrated and how process structures can be represented in programming languages, and it is not purely practical.",yes,"The paper is written in English, meeting this criterion.",maybe,"The abstract does not provide enough information to determine if the full text of the paper is accessible, but the reference to Dijkstra (1968) suggests it is likely an academic paper that would be accessible through academic channels.",Exclude,"The abstract demonstrates strong alignment with theoretical programming language design principles, particularly in examining concurrent programming paradigms and process structures. While the paper shows significant theoretical depth in analyzing programming language constructs, there is some uncertainty regarding the presence of formal mathematical frameworks. The research appears to make substantive contributions to understanding programming language design at a fundamental level.",4.3
Abstract Behavior Types: a foundation model for components and their composition,F. Arbab,10.1016/j.scico.2004.05.010,https://doi.org/10.1016/j.scico.2004.05.010,Science of Computer Programming,206,2002,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in how components and their composition can be modeled abstractly, meeting this criterion.",yes,"The paper presents a formal framework through the ABT model and mentions a ""calculus of channels"" for Reo, indicating a rigorous mathematical approach, meeting this criterion.",yes,"The paper examines programming paradigm foundations by comparing ADT and ABT approaches, and discusses their implications for component-based systems, meeting this criterion.",yes,"The paper discusses fundamental design principles, particularly in the context of Abstract Behavior Types (ABT) as an alternative to Abstract Data Types (ADT). It addresses orthogonality and minimality in component-based systems, meeting this criterion.",yes,"The paper clearly presents a theoretical foundation through the ABT model and its mathematical framework for component behavior, meeting this criterion.",yes,"While the paper mentions Reo as an implementation, it's clearly used to support and demonstrate the theoretical contributions rather than being the primary focus, meeting this criterion.",yes,"The paper makes a clear theoretical contribution by introducing ABT as a new foundation model and analyzing its properties, rather than focusing on practical implementation, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical framework for programming language design, introducing Abstract Behavior Types as a novel paradigm for component-based systems with strong mathematical foundations. By examining fundamental design principles, paradigm theory, and providing a formal framework for analyzing computational constructs, the study offers a comprehensive theoretical contribution to programming language research. The work demonstrates a sophisticated approach to understanding component composition through a calculus of channels and a new theoretical model.",4.9
A domain-theoretic approach to functional and logic programming,"F. Silbermann, B. Jayaraman",10.1017/S095679680000040X,https://doi.org/10.1017/S095679680000040X,Journal of functional programming,14,1992,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including set abstraction, logical variables, and evaluation procedures, strongly meeting the fundamental analysis criterion.",yes,"The paper uses domain theory as a formal mathematical framework, employs Zermelo-Frankel set notation, and discusses denotational semantics and operational semantics, strongly meeting the formal framework criterion.",yes,"The paper explicitly examines the theoretical foundations of both functional and logic programming paradigms and their integration, strongly meeting the paradigm theory criterion.",yes,"The paper explicitly discusses fundamental design principles in integrating functional and logic programming paradigms, including orthogonality in combining different programming approaches, meeting the language design principles criterion.",yes,"The paper is built on formal theoretical foundations including domain theory, set theory, and mathematical semantics, clearly meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed (operational semantics, evaluation procedure), they serve to support the theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions to programming language design and semantics, rather than practical implementations, very strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and academic context of the paper suggest it is likely accessible through academic channels.",Include,"This research presents a rigorous theoretical exploration of programming language design, integrating functional and logic programming paradigms through domain theory and formal mathematical frameworks. The study offers a comprehensive analysis of fundamental programming language constructs, utilizing advanced mathematical techniques like Zermelo-Frankel set notation and denotational semantics to develop a novel, declarative language approach. By focusing on theoretical foundations and paradigm integration, the work contributes significantly to understanding programming language design principles at a deep, mathematical level.",4.9
Programming with algebraic structures: design of the MAGMA language,"W. Bosma, John J. Cannon, G. Matthews",10.1145/190347.190362,https://doi.org/10.1145/190347.190362,International Symposium on Symbolic and Algebraic Computation,49,1994,yes,The paper analyzes fundamental programming language constructs through the lens of algebraic structures and mathematical concepts.,maybe,"The abstract mentions ""mathematically rigorous"" treatment and uses mathematical concepts as first-class objects, suggesting some formal framework, though the depth is not entirely clear.",yes,"The paper examines programming paradigm foundations through its focus on algebraic structures as a design paradigm, comparing it to other computer algebra systems.",maybe,"The paper discusses design principles centered on algebraic structure (magma) and strong typing, which relates to fundamental design principles, though it does not explicitly address orthogonality or minimality.",maybe,"The paper appears to have a strong theoretical foundation based on algebraic structures and mathematical concepts, though the abstract does not explicitly detail the mathematical framework.",maybe,"The abstract mentions both conceptual and implementation aspects, but positions implementation as supporting the theoretical contributions rather than being the primary focus.",yes,"The paper appears to make theoretical contributions through its novel design paradigm and mathematical foundations, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"A theoretical exploration of programming language design centered on algebraic structures, demonstrating strong foundations in mathematical rigor and paradigm theory. The study presents a novel approach to computational algebra through a mathematically grounded design paradigm, with potential contributions to fundamental programming language understanding. While showing promise across multiple theoretical dimensions, some uncertainties remain regarding the depth of formal analysis and implementation details.",4.3
Multiparadigm Programming in Oz,"Martin M√ºller, Tobias M. Muller, Peter German",-,-,-,23,1995,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in how different paradigms can be unified through a common foundation.",yes,"The abstract mentions ""a simple formal model in the concurrent constraint paradigm"" and discusses first-order Horn clause logic with SLDNF resolution, indicating a formal mathematical framework is present.",yes,"The paper directly examines multiple programming paradigms (logic, functional, and concurrent object-oriented) and provides comparative theoretical analysis of how they can be unified.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on multiparadigm programming and its theoretical foundations. It explicitly addresses how different programming paradigms can be unified through a common foundation.",yes,The paper provides strong evidence of a theoretical foundation through its discussion of formal models and logical foundations. The paper explicitly aims to provide theoretical foundations for multiparadigm programming.,yes,"While the paper mentions implementation in Oz, this appears to serve as an example to support the theoretical contributions rather than being the primary focus.",yes,"The paper clearly focuses on theoretical contributions, specifically addressing the theoretical foundations of multiparadigm programming rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research provides a rigorous theoretical exploration of multiparadigm programming, presenting a formal mathematical framework that unifies logic, functional, and concurrent object-oriented programming paradigms through a common foundation. The study offers a deep theoretical analysis of programming language design principles, focusing on fundamental constructs and their integration within a comprehensive computational model. By examining the theoretical underpinnings of programming paradigms, the research contributes significant insights into the conceptual structure of computational systems.",4.9
iTask as a New Paradigm for Building GUI Applications,"Steffen Michels, M. J. Plasmeijer, P. Achten",10.1007/978-3-642-24276-2_10,https://doi.org/10.1007/978-3-642-24276-2_10,International Symposium on Implementation and Application of Functional Languages,10,2010,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly regarding workflow and GUI programming paradigms.",maybe,"While the paper mentions ""declarative specification"" and ""combinator functions,"" it's not explicitly clear if it presents a formal mathematical framework. However, the technical nature of the discussion suggests some formal analysis.",yes,"The paper explicitly examines programming paradigms, specifically the iTask paradigm and its application to GUI programming, including comparative analysis between workflow and GUI programming paradigms.",yes,"The paper discusses orthogonality explicitly and appears to address fundamental design principles in programming languages, particularly regarding workflow and GUI programming paradigms.",maybe,"The paper appears to have a theoretical foundation in its approach to workflow and GUI programming paradigms, though the abstract doesn't explicitly mention mathematical frameworks.",yes,The paper discusses implementation aspects (the iTask system) but uses these to support broader theoretical contributions about programming paradigms.,yes,"The paper appears to make theoretical contributions by analyzing and extending programming paradigms, though it also has practical applications. The focus seems balanced between theoretical and practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but this is a common limitation in screening.",Include,"The research explores programming language paradigms with a strong theoretical focus, examining workflow and GUI programming principles through a rigorous analysis of the iTask system. By investigating fundamental design principles, paradigm foundations, and theoretical contributions, the study demonstrates significant potential for advancing understanding of programming language constructs. The work appears to balance theoretical depth with practical implementation considerations, making it a compelling candidate for in-depth review.",4.6
On Traits and Types in a Java-like Setting,"V. Bono, Ferruccio Damiani, Elena Giachino",10.1007/978-0-387-09680-3_25,https://doi.org/10.1007/978-0-387-09680-3_25,IFIP TCS,34,2008,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on the basic structure of object-oriented programming.",yes,"The paper presents a formal mathematical framework, including a ""core calculus"" and a proof of ""soundness of the type system w.r.t. the operational semantics.""",yes,"The paper directly examines programming paradigm foundations, specifically analyzing and proposing changes to the object-oriented paradigm.",yes,"The paper explicitly discusses fundamental design principles in programming languages, particularly focusing on orthogonality (separation of concerns) in object-oriented programming. The paper argues for a principle that ""each software structuring construct must have exactly one role.""",yes,"The paper presents a theoretical foundation for rethinking object-oriented programming paradigms, including formal type system analysis and operational semantics.",yes,"While implementation aspects are discussed, they serve to support the theoretical contributions rather than being the primary focus.",yes,The paper focuses on theoretical contributions to programming language design and paradigm foundations rather than practical aspects.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The formal nature and academic style of the paper suggest it is likely a published paper, and therefore the full text is likely accessible.",Include,"This research presents a rigorous theoretical examination of object-oriented programming language design, focusing on fundamental principles of software structuring and paradigm foundations. By proposing a core calculus and proving type system soundness, the study offers a comprehensive theoretical analysis of programming language constructs with a strong emphasis on mathematical and conceptual frameworks. The work systematically explores the separation of roles in programming language design, demonstrating a deep theoretical contribution to understanding computational paradigms.",4.9
Parallel skeletons for structured composition,"J. Darlington, Yike Guo, H. To, Jin Yang",10.1145/209936.209940,https://doi.org/10.1145/209936.209940,ACM SIGPLAN Symposium on Principles & Practice of Parallel Programming,124,1995,maybe,"The paper analyzes fundamental programming constructs (skeletons, composition) at a theoretical level, though the focus seems more on practical application than pure theoretical analysis.",maybe,"While the paper presents a framework for parallel programming, it's not clear if it includes formal mathematical verification. The approach seems more structural than formally rigorous.",yes,"The paper does examine programming paradigms, specifically discussing the integration of compositional programming with data parallel programming paradigms.",maybe,"The paper discusses compositional programming and structured composition using skeletons, which relates to language design principles. However, it doesn't explicitly address orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation in terms of compositional programming and skeletons, but the abstract doesn't explicitly mention mathematical frameworks or formal proofs.",maybe,"The paper discusses implementation aspects (skeletons, composition) but uses these to support broader theoretical contributions about programming paradigms and composition.",maybe,"The paper appears to make theoretical contributions by proposing a new approach to compositional parallel programming, though it seems to balance theoretical and practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores compositional parallel programming through skeletons, demonstrating theoretical contributions in programming paradigms while balancing practical implementation with conceptual analysis. While the study addresses several key screening criteria related to language design and theoretical foundations, the depth of formal mathematical rigor remains uncertain from the abstract. The work appears to offer a nuanced approach to parallel programming composition that integrates theoretical principles with structural programming techniques.",3.5
Strategic polymorphism requires just two combinators!,"R. L√§mmel, Joost Visser",-,-,arXiv.org,13,2002,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly regarding strategic polymorphism and generic functions.",maybe,"The paper appears to present a formal framework, mentioning ""primitive combinators"" and ""operational reference model,"" suggesting mathematical rigor.",yes,"The paper explicitly examines functional programming paradigm foundations, comparing term rewriting strategies with functional programming approaches.",maybe,"The paper discusses functional strategies and their implementation, which relates to language design principles, though it does not explicitly focus on orthogonality or minimality.",yes,"The paper has a strong theoretical foundation through the analysis of ""strategic polymorphism"" and formal reconstruction of functional strategies.",maybe,The implementation discussion (Haskell model) appears to serve theoretical purposes rather than being the primary focus.,yes,"The paper clearly focuses on theoretical contributions, presenting a ""compact and matured reconstruction"" of functional strategies and analyzing design spaces.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature and reference to previous work suggests the full text of the paper is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"The research presents a rigorous theoretical exploration of functional strategies in programming languages, demonstrating strong foundations in paradigm theory, formal frameworks, and fundamental computational analysis. By reconstructing strategic polymorphism through primitive combinators and examining design spaces, the study offers a sophisticated theoretical contribution to understanding generic programming principles. The work's focus on mathematical rigor and theoretical foundations provides a comprehensive examination of programming language constructs.",4.6
Towards a Formal Specification of Multi-paradigm Modelling,"Moussa Amrani, Dominique Blouin, R. Heinrich, A. Rensink, H. Vangheluwe, A. Wortmann",10.1109/MODELS-C.2019.00067,https://doi.org/10.1109/MODELS-C.2019.00067,2019 ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems Companion (MODELS-C),14,2019,maybe,"The paper analyzes fundamental constructs, but of modeling paradigms rather than programming language constructs specifically.",yes,"The paper explicitly presents a formal framework aimed at capturing the notion of modeling paradigms and mentions formal reasoning about consistency, meeting the formal framework criterion.",yes,"The paper directly examines paradigm foundations, though for modeling paradigms rather than programming paradigms specifically. However, the theoretical approach to paradigms is highly relevant.",no,"The paper focuses on modeling paradigms rather than programming language design principles specifically, so it does not directly address orthogonality or minimality in programming languages.",yes,"The paper aims to provide a formal theoretical foundation for understanding modeling paradigms, with explicit mention of formal reasoning and comprehensive formalization, meeting the theoretical foundation criterion.",yes,"The paper mentions tools and environments but primarily as a consequence of the theoretical framework rather than the main focus, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical understanding, aiming to provide a formal framework and definition for modeling paradigms rather than practical applications, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"A rigorous theoretical study presenting a formal framework for modeling paradigms, demonstrating strong alignment with criteria related to theoretical foundations, formal analysis, and paradigm theory. While the research focuses on modeling paradigms rather than programming languages specifically, it exhibits high theoretical sophistication and mathematical rigor in its approach to understanding computational frameworks.",4.3
TopHat: A formal foundation for task-oriented programming,"Tim Steenvoorden, Nico Naus, M. Klinik",10.1145/3354166.3354182,https://doi.org/10.1145/3354166.3354182,ACM-SIGPLAN International Conference on Principles and Practice of Declarative Programming,12,2019,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on workflow specifications and interactive applications.",yes,"The paper explicitly develops a formal framework using ""simply typed lambda-calculus, extended with pairs and references"" and describes ""layered semantics"" with ""big-step evaluations"" and ""labelled transition systems.""",yes,"The paper explicitly examines the TOP programming paradigm, comparing it with other work and providing theoretical analysis of its foundations.",maybe,"The paper discusses fundamental design principles of Task-Oriented Programming (TOP), including its declarative programming style and workflow specifications, though it does not explicitly address orthogonality or minimality.",yes,"The paper provides a formal theoretical foundation for TOP, decomposing it into ""elementary language elements"" and developing formal semantics.",yes,The implementation aspects (Haskell implementation and iTasks framework) serve to support and demonstrate the theoretical contributions rather than being the primary focus.,yes,"While the paper includes practical implementations, its primary focus is on theoretical contributions, specifically formalizing TOP and providing a framework for formal reasoning.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be an academic publication with implementation details, suggesting likely accessibility of the full text.",Include,"The research presents a rigorous theoretical exploration of Task-Oriented Programming, developing a formal mathematical framework using lambda-calculus and providing a comprehensive semantic analysis of programming paradigms. By decomposing language elements into fundamental constructs and establishing a layered semantic approach, the study offers significant theoretical contributions to understanding programming language design and verification. The work demonstrates a strong focus on formal reasoning, paradigm theory, and fundamental computational analysis.",4.9
Converse: an interoperable framework for parallel programming,"L. Kal√©, M. Bhandarkar, Narain Jagathesan, Sanjeevi Krishnan, Josh Yelon",10.1109/IPPS.1996.508060,https://doi.org/10.1109/IPPS.1996.508060,Proceedings of the International Conference on Parallel Processing,91,1996,yes,"The paper does analyze fundamental programming language constructs, particularly regarding parallel programming paradigms and their interoperability.",maybe,"The abstract mentions a ""framework"" (Converse) but doesn't explicitly indicate whether it's formal or mathematical. The verification mentioned is likely practical rather than formal.",yes,"The paper explicitly examines multiple programming paradigms (SPMD, message-driven, parallel object-oriented, thread-based) and their fundamental differences.",maybe,"The paper discusses fundamental aspects of parallel programming languages and their interoperability, which relates to language design principles. However, it doesn't explicitly focus on orthogonality or minimality.",maybe,"While the paper presents a framework, there's no clear indication of a formal theoretical foundation or mathematical framework.",maybe,"The paper seems to focus significantly on practical implementation aspects (runtime support, core components) rather than using implementation to support theoretical contributions.",maybe,"The paper appears to focus more on practical interoperability than theoretical contributions, though it does analyze fundamental paradigm differences.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text accessibility cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores multi-lingual interoperability across parallel programming paradigms, demonstrating strong theoretical engagement with fundamental language constructs and paradigm differences. While the study presents a framework for understanding programming language interactions, its approach appears more practical than purely theoretical, with limited explicit discussion of formal mathematical foundations. The work provides insights into programming language design principles through comparative analysis of different parallel programming styles.",3.5
Programming language concepts and paradigms,D. Watt,10.5860/choice.28-3329,https://doi.org/10.5860/choice.28-3329,Prentice Hall International Series in Computer Science,127,1990,maybe,"The mention of ""basic concepts"" suggests some fundamental analysis, but the depth and theoretical nature are not clear.",no,There is no explicit mention of formal mathematical frameworks or verification approaches.,yes,"The abstract explicitly mentions covering functional, object-oriented, and imperative programming paradigms, suggesting some comparative analysis.",maybe,"The abstract mentions ""basic concepts"" of programming languages but does not specifically indicate coverage of orthogonality or minimality.",maybe,"While the abstract covers ""basic concepts,"" there is no clear indication of formal theoretical foundations.",maybe,There is no clear indication of implementation focus or theoretical contributions.,no,The focus appears to be on introducing concepts rather than advancing theoretical understanding.,maybe,"The abstract is in English, but it is not certain if the full book is in English or French.",maybe,"Being a book, it is likely accessible through libraries or purchase, but this is not explicitly confirmed.",Exclude,"The abstract suggests an introductory text covering programming language paradigms, but lacks clear evidence of rigorous theoretical foundations or formal mathematical frameworks. While touching on fundamental concepts across functional, object-oriented, and imperative programming, the text appears more descriptive than analytically deep, leaving many screening criteria uncertain or unmet.",2.8
A multi-paradigm foundation for model transformation language engineering,Eugene Syriani,-,-,-,32,2011,yes,"The paper analyzes fundamental transformation language constructs at a theoretical level, particularly through T-Core's primitive building blocks.",yes,"The paper presents a formal framework (T-Core) with primitive transformation operations and includes formal semantics for MoTif. It also incorporates DEVS, a formal discrete-event simulation formalism.",maybe,"While the paper discusses modeling paradigms and transformation languages, it doesn't appear to focus on fundamental paradigm foundations or comparative theoretical analysis.",yes,"The paper discusses language design principles, particularly for model transformation languages, focusing on orthogonality and minimality through ""maximally constrain[ing] the modeller to only use the constructs needed.""",yes,"The paper has a clear theoretical foundation, discussing primitive building blocks of transformation languages and formal modeling of syntax and semantics.",yes,The implementation (Python implementation of T-Core) serves to support the theoretical contributions rather than being the primary focus.,yes,"The paper makes theoretical contributions through its framework for designing transformation languages and primitive building blocks, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but the fact that it is a thesis suggests it may be available through academic channels.",Include,"The research presents a robust theoretical framework for model transformation languages, demonstrating strong alignment with language design principles, formal mathematical approaches, and fundamental computational analysis. By introducing T-Core and MoTif, the study contributes significant theoretical insights into programming language constructs, with a rigorous approach to modeling and transformation that transcends practical implementation. The work's comprehensive examination of transformation language primitives and formal semantics provides a substantive theoretical contribution to the field of programming language research.",4.6
Set-Theoretic Models of Computations,J. Abrial,10.1007/978-3-642-39698-4_1,https://doi.org/10.1007/978-3-642-39698-4_1,Theories of Programming and Formal Methods,1,2013,yes,"The paper analyzes fundamental computational paradigms at a theoretical level using set-theoretic models, indicating a focus on fundamental analysis.",yes,"The paper explicitly mentions ""set-theoretic models"" and aims to provide a ""unified mathematical theory,"" indicating a formal mathematical framework.",yes,"The abstract directly addresses ""mechanical computation paradigms"" and aims to unify different computational approaches (sequential, distributed, parallel), suggesting a focus on paradigm theory.",maybe,"The paper appears to focus on computational paradigms rather than specific language design principles, so it does not explicitly address orthogonality or minimality.",yes,"The paper is explicitly focused on developing mathematical theories and formal specifications for computation, indicating a strong theoretical foundation.",yes,"The paper appears to focus on theoretical aspects rather than implementation, meeting this criterion.",yes,"The paper focuses on theoretical foundations and mathematical unification rather than practical aspects, indicating a theoretical contribution.",yes,"The paper is written in English, meeting this criterion.",maybe,"The reference to Hoare and He's book suggests this is likely an academic paper with accessible full text, though this cannot be determined from the abstract alone.",Include,"A rigorous theoretical exploration of computational paradigms using set-theoretic models, demonstrating strong alignment with formal mathematical frameworks and fundamental analysis of programming principles. The study presents a unified theoretical approach to understanding computational mechanisms across sequential, distributed, and parallel paradigms, with a clear focus on mathematical foundations rather than practical implementations.",4.7
Toward a unified paradigm for constructing and understanding robot processes,Chris Hancock,10.1109/HCC.2002.1046362,https://doi.org/10.1109/HCC.2002.1046362,Proceedings IEEE 2002 Symposia on Human Centric Computing Languages and Environments,1,2002,yes,"The paper analyzes fundamental programming language constructs, particularly regarding concurrent programming and process structures, meeting this criterion.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, so it is unclear if the paper presents or utilizes a formal mathematical framework or rigorous verification approach for analyzing programming language properties.",yes,"The paper explicitly examines programming paradigms, their integration, and their relationship to process structure in concurrent programming, strongly meeting this criterion.",yes,"The paper discusses fundamental design principles in programming languages, particularly regarding process structure and concurrency, and explicitly addresses how programming paradigms can be integrated, meeting this criterion.",maybe,"The paper appears to have a theoretical foundation in examining process structures and programming paradigms, but the abstract does not explicitly indicate a formal mathematical framework.",yes,"The paper discusses implementation aspects, like ""in place"" execution, but uses these to support broader theoretical contributions about programming paradigms and process structures.",yes,"The paper appears to make theoretical contributions by analyzing how different paradigms can be integrated and how process structures can be represented in programming languages, and it is not purely practical.",yes,"The paper is written in English, meeting this criterion.",maybe,"The abstract does not provide enough information to determine if the full text of the paper is accessible, but the reference to Dijkstra (1968) suggests it is likely an academic paper that would be accessible through academic channels.",Exclude,"The abstract demonstrates strong alignment with theoretical programming language design principles, particularly in examining concurrent programming paradigms and process structures. While the paper shows significant theoretical depth in analyzing programming language constructs, there is some uncertainty regarding the presence of formal mathematical frameworks. The research appears to make substantive contributions to understanding programming language design at a fundamental level.",4.3
Putting curry-howard to work,T. Sheard,10.1145/1088348.1088356,https://doi.org/10.1145/1088348.1088356,ACM SIGPLAN Symposium/Workshop on Haskell,25,2005,yes,"The paper analyzes fundamental programming language constructs (types, propositions, static propositions) at a theoretical level, strongly meeting this criterion.",yes,"The paper deals with the Curry-Howard isomorphism, which is a formal mathematical framework relating types and propositions. The discussion of type systems and static propositions indicates a formal approach, meeting this criterion.",yes,"The paper explicitly discusses a ""new programming paradigm"" and examines fundamental aspects of functional programming paradigms, strongly meeting this criterion.",yes,"The paper explicitly discusses fundamental design principles in programming languages, specifically proposing new features for functional programming languages and their integration with existing features, strongly meeting this criterion.",yes,"The paper builds on the Curry-Howard isomorphism and discusses formal type systems, indicating a strong theoretical foundation, clearly meeting this criterion.",yes,"While implementation aspects are discussed (backward compatibility, integration with existing features), these serve to support the broader theoretical contributions, meeting this criterion.",yes,"The paper focuses on theoretical contributions to programming language design and type systems rather than practical patterns or optimization, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and likely academic venue of the paper suggest it is probably accessible through academic channels.",Include,"This research presents a rigorous theoretical exploration of programming language design, focusing on fundamental principles of type systems and the Curry-Howard isomorphism. By proposing novel features for functional programming languages and examining paradigm foundations, the study offers a substantive theoretical contribution to understanding computational constructs and programming language principles. The work demonstrates a deep engagement with formal mathematical frameworks and theoretical analysis of programming paradigms.",4.9
Engineering UToPiA - Formal Semantics for CML,J. Woodcock,10.1007/978-3-319-06410-9_3,https://doi.org/10.1007/978-3-319-06410-9_3,World Congress on Formal Methods,20,2014,yes,"The paper analyzes fundamental language constructs at a theoretical level, including state-rich imperative constructs, communication, concurrency, and object orientation.",yes,The paper explicitly uses Hoare & He's Unifying Theories of Programming (UTP) as a formal mathematical framework for analyzing language properties.,yes,"The paper explicitly examines multiple programming paradigms (imperative, CSP, object-oriented, timed CSP) and their theoretical integration.",yes,"The paper discusses semantic domains and formal composition of language features, which relates to fundamental design principles. The focus on semantic openness and composability suggests attention to orthogonality.",yes,"The paper presents a formal theoretical foundation using UTP and discusses semantic domains, Galois connections, and formal definitions.",yes,"The paper appears to balance theoretical and practical aspects appropriately, with implementation details serving to support the theoretical framework.",yes,"The paper makes clear theoretical contributions through its formal semantic framework and paradigm integration, rather than focusing on practical aspects.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, even though it cannot be determined from the abstract alone.",Include,"A comprehensive theoretical study exploring programming language semantics through the Unifying Theories of Programming framework, examining multiple paradigms and their formal integration. The research provides a rigorous mathematical approach to language design, focusing on semantic domains, composability, and fundamental computational constructs across different programming models. By presenting a formal theoretical foundation with Galois connections and paradigm analysis, the study offers significant insights into programming language design principles.",4.9
Programming with Behaviors in an ML Framework - The Syntax and Semantics of LCS,"B. Berthomieu, Thierry Le Sergent",10.1007/3-540-57880-3_6,https://doi.org/10.1007/3-540-57880-3_6,European Symposium on Programming,26,1994,yes,"The paper has a clear focus on fundamental analysis, examining concurrency and communication primitives, analyzing language constructs at a theoretical level, and including formal semantics.",yes,"The paper uses a formal framework, including the CCS formalism as a basis, typechecking for communication consistency, an abstract operational semantics, and a transition system for formal analysis.",yes,"The paper has a strong focus on paradigm theory, explicitly exploring behavioral paradigms, based on CSP and CCS paradigms, and extending Standard ML with new paradigmatic features.",yes,"The paper clearly focuses on language design principles, specifically exploring the design of an experimental programming language based on behavioral paradigms. It extends Standard ML with specific primitives, indicating attention to fundamental design principles.",yes,"The paper has a clear theoretical foundation, based on formal systems (CSP and CCS), including formal typechecking and presenting operational semantics.",yes,"While implementation is discussed, it serves to support theoretical contributions rather than being the primary focus.",yes,"The paper appears primarily theoretical, focusing on language design and formal properties rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language design, focusing on formal frameworks, paradigm foundations, and fundamental computational constructs. By extending Standard ML with concurrency primitives and utilizing CCS formalism, the study provides a comprehensive theoretical analysis of language design principles and computational paradigms. The work demonstrates strong theoretical contributions through its formal semantic approach and systematic examination of programming language fundamentals.",4.9
Functional and predictive programming in OODB's,"C. Beeri, Tova Milo",10.1145/137097.137863,https://doi.org/10.1145/137097.137863,ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems,25,1992,yes,"The paper analyzes fundamental constructs of programming languages, particularly in the context of object-oriented and relational data models.",maybe,"The abstract mentions formal frameworks like relational algebra, calculus, and logic programming, and discusses theoretical equivalences (e.g., Codd's result), suggesting a formal mathematical approach.",yes,"The paper explicitly examines programming paradigms (relational, object-oriented) and their theoretical foundations, including comparative analysis of different query paradigms.",maybe,"The abstract discusses object-oriented paradigm and data modeling principles, but does not explicitly address orthogonality or minimality. It touches on fundamental design aspects but not deeply enough to fully satisfy this criterion.",yes,"The paper appears to have a strong theoretical foundation, discussing mathematical models and formal equivalences between different query paradigms.",yes,"The abstract suggests a theoretical focus rather than implementation details, meeting this criterion.",yes,"The paper appears focused on theoretical contributions, examining fundamental properties and equivalences between different query paradigms rather than practical implementations.",yes,"The paper is written in English, meeting this criterion.",maybe,"The presence of citations suggests this is a formal academic paper likely accessible through academic channels, though the full-text accessibility cannot be determined from the abstract alone.",Include,"The abstract demonstrates a strong theoretical approach to programming language paradigms, with a focus on formal mathematical frameworks and comparative analysis of relational and object-oriented data models. It exhibits robust theoretical foundations, examining fundamental constructs and equivalences between different query paradigms while maintaining a rigorous mathematical perspective. The research appears to contribute significantly to understanding programming language principles through a sophisticated theoretical lens.",4.6
Programming Languages and Operational Semantics: A Concise Overview,M. Fernndez,10.5860/choice.185661,https://doi.org/10.5860/choice.185661,-,8,2014,yes,"The abstract indicates analysis of ""significant constructs"" and ""essential concepts"" in programming languages, suggesting the study analyzes fundamental programming language constructs or computational primitives at a theoretical level.",yes,"The abstract explicitly mentions the use of ""operational semantics techniques,"" which is a formal mathematical framework for analyzing programming language properties.",yes,"The abstract explicitly mentions ""alternative programming language paradigms"" and covers ""imperative, functional and logic programming languages,"" suggesting the study examines programming paradigm foundations or provides comparative theoretical analysis of paradigms.",maybe,"The abstract mentions ""essential concepts"" and ""significant constructs"" in programming languages, which suggests the study investigates language design principles, but it does not explicitly discuss orthogonality or minimality.",yes,The use of operational semantics indicates the study includes a formal theoretical foundation or mathematical framework to support its claims.,yes,"The abstract does not mention implementation details, focusing instead on theoretical analysis, suggesting the study's discussion of implementation or tools serves to support broader theoretical contributions rather than focusing solely on practical aspects.",yes,"While the book appears to have educational goals, it focuses on theoretical analysis of language constructs and paradigms rather than practical patterns, indicating the study contributes to theoretical understanding.",yes,"The abstract is written in English, which meets the publication language criterion. However, there is some uncertainty about whether the paper is also available in French.",maybe,"The paper appears to be a book rather than a research paper, which may affect its full-text accessibility. Books are typically available through libraries or purchase, but this creates some uncertainty about the accessibility of the full text.",Exclude,"The text demonstrates strong theoretical foundations in programming language analysis, utilizing operational semantics and exploring multiple programming paradigms with a rigorous mathematical approach. While primarily an educational resource, the work provides comprehensive coverage of fundamental language constructs and theoretical principles across imperative, functional, and logic programming domains. The book's focus on theoretical understanding and paradigmatic analysis suggests significant scholarly contribution to programming language research.",4.3
Constraint imperative programming,B. Freeman-Benson,-,-,-,30,1992,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including control flow, assignment, and constraints.",maybe,"The abstract mentions ""clean, well-defined semantics"" and includes a ""semantic definition of CIP,"" suggesting a formal mathematical framework is present, though the specific rigor of the formalism isn't detailed.",yes,This criterion is strongly met as the paper directly examines and compares programming paradigms (imperative and declarative) and their integration.,yes,"The paper strongly meets this criterion as it explicitly discusses the integration of fundamental design principles from imperative and declarative paradigms, including explicit control flow, destructive assignment, and system-maintained constraints.",yes,"The paper appears to have a strong theoretical foundation, presenting a new programming language framework with formal semantics and theoretical claims about expressiveness.",maybe,The implementation (Kaleidoscope 90) appears to serve as a proof-of-concept to support the theoretical contributions rather than being the primary focus.,yes,"The paper makes clear theoretical contributions by presenting a new framework and analyzing its properties, rather than focusing on practical aspects alone.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be a dissertation, which typically has accessible full texts through academic libraries or institutional repositories, though this cannot be confirmed from the abstract alone.",Include,"A comprehensive theoretical exploration of programming language paradigms, presenting a novel framework integrating imperative and declarative approaches with rigorous semantic foundations. The research offers a fundamental analysis of computational constructs, examining paradigm integration through a formal mathematical lens and demonstrating theoretical contributions to programming language design. The study provides a sophisticated examination of language principles, focusing on theoretical understanding rather than purely practical implementation.",4.9
Towards a minimal object-oriented language for distributed and concurrent programming,"Matthias Radestock, S. Eisenbach",10.1145/197917.198152,https://doi.org/10.1145/197917.198152,ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing,1,1994,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including concurrency, object models, and basic language constructs.",yes,"The paper uses Milner's calculus for formal semantics and introduces a new operator (""mismatch"") to extend the calculus, showing strong formal mathematical framework usage.",yes,"The paper examines object-oriented paradigm foundations, stating ""an abstract but very simple and compact definition of the object oriented paradigm"" and analyzes fundamental aspects of object-oriented systems.",yes,"The paper explicitly focuses on minimalistic language design and fundamental principles, stating ""The language has only a few constructs. This minimalistic approach makes it easier to reason about it.""",yes,The paper presents a formal theoretical foundation through its use of Milner's calculus and formal specification of the language model.,yes,"While implementation is discussed, it serves to support theoretical contributions rather than being the primary focus. The abstract explicitly mentions using implementation to demonstrate ""correctness and usefulness of the design.""",yes,"The paper focuses on theoretical contributions, including formal semantics, new calculus operators, and fundamental language design principles.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and academic style of the paper suggest it is likely an academic paper that would be accessible through standard channels.",Include,"A rigorous theoretical investigation of programming language design, focusing on minimalistic principles, formal mathematical frameworks, and fundamental paradigm analysis. The study presents a comprehensive examination of object-oriented language constructs through Milner's calculus, introducing novel theoretical contributions and exploring computational primitives at a deep theoretical level. Strong emphasis on formal semantics, paradigm foundations, and theoretical understanding characterizes this research.",4.9
Teaching Programming Broadly and Deeply: The Kernel Language Approach,"P. V. Roy, Seif Haridi",10.1007/978-0-387-35619-8_6,https://doi.org/10.1007/978-0-387-35619-8_6,Informatics Curricula and Teaching Methods,17,2002,yes,The paper analyzes fundamental programming language constructs through the lens of kernel languages and their translations.,maybe,"The abstract mentions ""simple formal semantics"" and reasoning about correctness, indicating some formal framework, though the depth of the formal treatment is not entirely clear.",yes,"The paper explicitly examines multiple programming paradigms (imperative, object-oriented, concurrent, logic, and functional) and their relationships, strongly matching this criterion.",maybe,"The paper discusses kernel languages with ""small numbers of programmer-significant concepts"" and their relationships, suggesting attention to minimality and fundamental design principles, though orthogonality is not explicitly mentioned.",maybe,"The paper appears to have a theoretical foundation in its kernel language approach and formal semantics, though the mathematical rigor is not explicitly detailed.",yes,"The paper discusses practical languages (Java, Haskell, Prolog, Erlang) but uses these to support theoretical contributions about kernel languages and their relationships.",yes,"The paper appears to make theoretical contributions by showing ""deep relationships"" between paradigms and providing a unified theoretical framework, though it is presented in an educational context.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a comprehensive theoretical framework exploring programming paradigms through kernel languages, demonstrating strong alignment with criteria related to paradigm theory, theoretical contribution, and fundamental analysis. While the study shows promise in examining programming language design principles and providing a unified theoretical approach, some uncertainty remains regarding the depth of formal mathematical treatment and rigorous verification methods.",4.3
The Next Generation of Programming,J. Reinfelds,10.1007/978-0-387-35596-2_105,https://doi.org/10.1007/978-0-387-35596-2_105,IFIP World Conference on Computers in Education,0,2001,maybe,"The paper does analyze fundamental programming concepts and their relationship to different paradigms, though the depth of this analysis is not entirely clear from the abstract.",no,The abstract does not explicitly mention any formal mathematical framework or verification approach. The paper appears to be more conceptual in nature.,yes,"The paper explicitly discusses programming paradigms (object-oriented, logic, functional) and their relationship to fundamental concepts, strongly meeting this criterion.",maybe,"The paper discusses programming language design and abstractions, but does not explicitly focus on orthogonality or minimality. However, it does address fundamental design principles by critiquing how programming is taught and the confusion between tools and concepts.",no,"While the paper discusses theoretical aspects of programming education and paradigms, it does not clearly indicate a formal theoretical foundation or mathematical framework.",maybe,The abstract mentions implementation aspects (like Java's concurrency) but uses these to support broader theoretical points about programming paradigms and education.,maybe,"The paper appears to make theoretical contributions by challenging current programming education approaches and discussing the relationship between paradigms and fundamental concepts. However, it seems more focused on pedagogical aspects than pure theoretical contributions.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract addresses programming paradigms and educational approaches, demonstrating strong theoretical engagement with language design principles and paradigm theory. While the text offers conceptual insights into programming fundamentals, it lacks explicit formal mathematical frameworks or rigorous verification methods. The work appears more pedagogically oriented, challenging traditional programming education approaches through a comparative analysis of programming paradigms.",3.5
Functional Polytypic Programming,Patrik Jansson,-,-,-,33,2000,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including generic algorithms, type systems, term rewriting, and data conversion primitives.",yes,"The paper explicitly mentions proving properties of polytypic algorithms and includes formal verification aspects, particularly in the context of term rewriting and data conversion functions.",yes,"The paper examines functional programming paradigms and provides theoretical analysis of polytypic programming as a paradigm, including its relationship to other programming concepts.",yes,"The paper discusses fundamental design principles through polytypic programming, which relates to orthogonality and minimality in programming language design. The focus on generic algorithms across datatypes suggests attention to fundamental design principles.",yes,"The paper provides strong evidence of a theoretical foundation through formal proofs of correctness, a mathematical framework for polytypic programming, structured recursion operators, and a formal treatment of term rewriting.",yes,"The implementation aspects (PolyP language extension, PolyLib) clearly serve to support and demonstrate the theoretical contributions rather than being the primary focus.",yes,"The paper makes clear theoretical contributions through the development of polytypic programming theory, formal proofs, and a theoretical framework for data conversion. While it includes practical applications, these serve to demonstrate theoretical concepts.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be a dissertation, which typically has accessible full text through academic channels, but this cannot be confirmed from the abstract alone.",Include,"This dissertation presents a rigorous theoretical exploration of polytypic programming, demonstrating strong alignment with fundamental programming language design principles through formal mathematical frameworks and proofs. The research provides a comprehensive theoretical foundation for generic algorithms across datatypes, examining programming paradigms with a focus on mathematical verification and computational primitives. By developing a formal approach to polytypic programming and presenting concrete implementations, the study makes significant contributions to theoretical understanding of programming language constructs.",4.9
The constraint-based paradigm: integrating object-oriented and rule-based programming,"M. van Biema, G. Maguire, S. Stolfo",10.1109/HICSS.1990.205206,https://doi.org/10.1109/HICSS.1990.205206,Twenty-Third Annual Hawaii International Conference on System Sciences,4,1990,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including invocation mechanisms, inheritance, and procedural attachments, strongly meeting this criterion.",maybe,"The abstract indicates a formal approach through its discussion of ""formalism"" and ""semantics,"" suggesting a rigorous mathematical framework, though details aren't fully explicit.",yes,"The paper directly examines programming paradigm foundations, specifically the combination of object-oriented and rule-based paradigms, and provides theoretical analysis of their integration, strongly meeting this criterion.",yes,"The paper explicitly discusses orthogonality in language design, presenting ""three orthogonal subparadigms"" and emphasizing the importance of ""elegant and orthogonal"" combination of paradigms, strongly meeting this criterion.",yes,"The paper presents a theoretical foundation for combining programming paradigms, including formal concepts like constraint-based invocation and instance inheritance, clearly meeting this criterion.",maybe,"The abstract suggests the paper maintains a theoretical focus, with implementation aspects serving to support theoretical contributions rather than being the primary focus.",yes,"The paper focuses on theoretical contributions to understanding programming paradigms and their integration, rather than practical implementation details, meeting this criterion well.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of programming language paradigms, presenting a novel formalism that integrates object-oriented and rule-based approaches through orthogonal subparadigms. The study offers a deep theoretical analysis of fundamental programming language constructs, emphasizing semantic principles and paradigm unification. Its comprehensive examination of language design principles, theoretical foundations, and computational primitives demonstrates a sophisticated approach to understanding programming language structures.",4.9
Multiparadigm research: a new direction of language design,J. Placer,10.1145/122167.122168,https://doi.org/10.1145/122167.122168,SIGP,13,1991,yes,The paper appears to analyze fundamental aspects of programming paradigms at a theoretical level.,maybe,"The abstract doesn't explicitly mention formal mathematical frameworks or verification approaches, suggesting the paper appears more conceptual in nature.",yes,"The paper explicitly focuses on multiparadigm research and examines paradigm foundations, strongly meeting this criterion.",maybe,"The paper discusses programming language design and multiparadigm approaches, suggesting it likely covers fundamental design principles, though orthogonality and minimality aren't explicitly mentioned.",maybe,"While the paper discusses ""ideas that underlie"" multiparadigm approaches, it's unclear if it provides a formal theoretical foundation.",maybe,"The abstract mentions an ""example"" but suggests it's used to support theoretical contributions rather than being the primary focus.",yes,"The paper appears to focus on theoretical understanding of multiparadigm approaches rather than practical aspects, meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"Multiparadigm programming language research demonstrates strong theoretical foundations, with a focus on paradigm analysis and conceptual exploration of language design principles. The study appears to contribute to theoretical understanding by examining fundamental aspects of programming paradigms, though some uncertainty exists regarding formal mathematical frameworks. The research seems oriented toward theoretical contributions rather than practical implementation, suggesting potential alignment with rigorous programming language research criteria.",4.2
Simplifying OMG MOF-Based Metamodeling,N. Rouquette,10.1007/978-3-319-47169-3_8,https://doi.org/10.1007/978-3-319-47169-3_8,Leveraging Applications of Formal Methods,2,2016,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in its deconstruction of MOF and UML architectures and reconstruction of normalized schemas.",maybe,"The paper appears to present a formal framework for analyzing programming language properties, particularly through its discussion of normalized schema tables and functional information architecture. However, it's not explicitly clear if this includes rigorous mathematical verification.",yes,"The paper explicitly examines programming paradigm foundations, comparing functional programming languages with modeling paradigms and proposing a unified theoretical approach.",yes,"The paper discusses fundamental design principles, particularly focusing on normalized, implementation-neutral database schemas and the separation of structural and operational aspects, which aligns with orthogonality and minimality principles.",yes,"The paper presents a theoretical foundation through its information-centric architecture and normalized schema approach, and it appears to have a solid theoretical basis for its claims about unifying modeling and programming.",yes,"The paper's discussion of implementation aspects (APIs, serialization) serves to support its broader theoretical contributions about language design and unification.",yes,"The paper clearly focuses on theoretical contributions rather than practical aspects, proposing a fundamental rethinking of how modeling and programming can be unified.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a theoretically rigorous exploration of programming language design principles, focusing on unifying modeling and programming through normalized schema approaches. It demonstrates strong alignment with paradigm theory, fundamental analysis, and theoretical contributions, while offering a novel perspective on language architecture that transcends traditional API-centric and serialization-based approaches. The study's emphasis on information-centric design and theoretical foundations suggests a significant contribution to understanding programming language constructs at a fundamental level.",4.6
Functional Programming Languages with Logical Variables: A Linear Logic View,"J. Darlington, Yike Guo, Martin K√∂hler",10.1007/3-540-57186-8_80,https://doi.org/10.1007/3-540-57186-8_80,Symposium on Programming Language Implementation and Logic Programming,5,1993,yes,"The paper analyzes fundamental programming language constructs (logical variables) at a theoretical level using formal methods, meeting the fundamental analysis criterion.",yes,"The paper explicitly uses linear logic formalization and constraint computation formalism to analyze programming language properties, providing strong evidence of a formal framework.",yes,"The paper examines programming paradigm foundations, specifically the paradigm of functional programming languages with logical variables, and provides theoretical analysis, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on logical variables in functional programming languages, meeting the language design principles criterion.",yes,"The paper presents a formal theoretical foundation using linear logic to model computational behavior, meeting the theoretical foundation criterion.",yes,"While implementation is mentioned (""general abstract machine""), it serves to support the theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical understanding, providing a formal model of computational behavior and logical meaning, rather than focusing on practical patterns or optimization, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The reference to [RJK92] suggests this is an academic paper likely accessible through academic channels, though the full-text accessibility cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical investigation of functional programming languages using linear logic formalization, demonstrating strong alignment with fundamental programming language design principles and theoretical foundations. The study provides a comprehensive mathematical framework for analyzing computational behavior, focusing on logical variables and paradigmatic constructs through a formal, resource-conscious approach. Its theoretical contribution centers on establishing a systematic model of programming language properties using advanced mathematical techniques.",4.9
A Sorted Semantic Framework for Applied Process Calculi,"Johannes Borgstr√∂m, Ramunas Gutkovas, J. Parrow, B. Victor, Johannes √Öman Pohjola",10.2168/LMCS-12(1:8)2016,https://doi.org/10.2168/LMCS-12(1:8)2016,Log. Methods Comput. Sci.,13,2013,yes,"The paper analyzes fundamental computational primitives and constructs at a theoretical level, strongly meeting the fundamental analysis criterion.",yes,"The paper presents a formal mathematical framework (psi-calculi) and explicitly mentions machine-checked proofs using Nominal Isabelle, strongly meeting the formal framework criterion.",yes,"The paper examines computational paradigms and provides comparative theoretical analysis across different process calculi, meeting the paradigm theory criterion.",maybe,"The paper discusses fundamental design principles in process calculi, including type systems and communication patterns, which are relevant to programming language design principles, even though the paper is not specifically about programming languages.",yes,"The paper is heavily theoretical, focusing on formal frameworks and mathematical foundations for process calculi, clearly meeting the theoretical foundation criterion.",yes,"While implementation aspects are mentioned (machine-checking), they serve to support the theoretical contributions rather than being the focus, meeting the implementation focus criterion.",yes,"The paper focuses entirely on theoretical contributions, developing a unified framework for representing different process calculi, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and reference to machine-checking suggests the paper is likely an academic publication with accessible full text.",Include,"A rigorous theoretical study exploring process calculi through a unified mathematical framework, demonstrating strong alignment with formal language design principles and computational paradigm analysis. The research presents a sophisticated examination of computational constructs, utilizing machine-checked proofs and providing a comprehensive theoretical contribution to understanding fundamental programming language principles.",4.9
Para-functional programming: a paradigm for programming multiprocessor systems,"P. Hudak, Lauren Smith",10.1145/512644.512667,https://doi.org/10.1145/512644.512667,ACM-SIGACT Symposium on Principles of Programming Languages,63,1986,yes,"The study analyzes fundamental programming language constructs, specifically concurrency and parallelism at a theoretical level.",yes,The paper presents a formal denotational description and execution trees as mathematical frameworks for analyzing the language properties.,yes,The research examines functional programming paradigm foundations and compares it with conventional languages regarding concurrency.,yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on concurrency and parallelism in functional programming.",yes,The paper presents a theoretical foundation through its formal denotational semantics and execution trees framework.,yes,"While the paper discusses implementation aspects (ParAlfl language), these serve to support the broader theoretical contributions about concurrency and parallelism.",yes,"The paper makes theoretical contributions by developing a new ""para-functional"" programming methodology and formal semantics, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, though the NSF and IBM funding suggests it may be accessible through academic channels.",Include,"This research presents a rigorous theoretical exploration of functional programming paradigms, focusing on concurrency and parallelism through a formal denotational framework and execution trees. The study contributes substantive theoretical insights into programming language design principles, examining fundamental constructs and developing a novel ""para-functional"" methodology with mathematical precision. By addressing multiple theoretical dimensions including paradigm foundations, language design, and formal semantics, the work demonstrates significant scholarly depth in computational theory.",4.6
Programming Languages and Systems ‚Äî ESOP '94,D. Sannella,10.1007/3-540-57880-3,https://doi.org/10.1007/3-540-57880-3,Lecture Notes in Computer Science,19,1994,maybe,"The mention of ""programming language concepts"" and ""semantics"" suggests fundamental analysis is included.",maybe,"The abstract indicates coverage of ""formal framework for design"" and ""verification/certification,"" suggesting formal mathematical frameworks are included.",yes,"The abstract explicitly mentions ""programming paradigms (functional, logic, object-oriented, concurrent, etc.) and their combinations,"" indicating strong coverage of paradigm theory.",maybe,"The abstract mentions ""fundamental issues in the specification, design and implementation of programming languages,"" suggesting coverage of language design principles, though specific principles like orthogonality aren't explicitly mentioned.",maybe,"The mention of ""fundamental issues"" and ""formal framework"" suggests theoretical foundations are present, though the specific depth isn't clear.",maybe,"The abstract explicitly states it covers both theoretical and practical aspects, with implementation serving to support theoretical concepts.",maybe,"The abstract emphasizes ""fundamental issues"" and bridges between ""theory and practice,"" suggesting theoretical contributions are central.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"As this is a conference proceedings volume, it's likely accessible through academic libraries or databases, though this isn't explicitly confirmed in the abstract.",Exclude,"The conference proceedings volume demonstrates strong alignment with theoretical programming language research, covering fundamental design principles, paradigm theory, and formal frameworks across multiple programming domains. While the abstract suggests comprehensive theoretical contributions bridging theory and practice, the proceedings format introduces some uncertainty about the specific depth and focus of individual papers. The content appears to meet most screening criteria, particularly those related to theoretical foundations and programming language analysis.",4.3
A Meta-model for Representing Language-independent Primary Dependency Structures,Ioana Sora,10.5220/0003991400650074,https://doi.org/10.5220/0003991400650074,International Conference on Evaluation of Novel Approaches to Software Engineering,6,2012,yes,"The paper analyzes fundamental dependency structures across programming languages, meeting this criterion.",maybe,"The paper presents a meta-model for describing dependency structures, which suggests some formal framework, but the abstract does not explicitly mention mathematical rigor or formal verification approaches.",yes,"The paper explicitly examines both object-oriented and procedural programming paradigms and their similarities, meeting this criterion.",maybe,"The paper focuses on dependency structures and meta-modeling across programming paradigms, but does not explicitly address orthogonality or minimality. It partially meets this criterion through its comparative analysis of programming paradigms.",maybe,"The meta-model provides a theoretical foundation for describing dependency structures, but the abstract emphasizes practical applications more than theoretical foundations.",maybe,"The paper discusses implementation tools, but these appear to serve the theoretical contribution of the meta-model rather than being the primary focus.",maybe,"The paper makes theoretical contributions through its meta-model, but the abstract emphasizes practical applications (architectural reconstruction, impact analysis, etc.) more than theoretical understanding.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a meta-model exploring dependency structures across programming paradigms, demonstrating theoretical contributions in paradigm theory and fundamental analysis. While the study offers insights into programming language structures, its emphasis on practical applications and implementation tools suggests a balanced approach between theoretical foundations and practical utility. The work partially meets multiple screening criteria, with notable strengths in comparative paradigm analysis and fundamental construct examination.",3.5
Conceptual Evolution of Object-Oriented Programming,P. Wegner,-,-,-,7,1989,yes,"There is clear evidence of fundamental analysis through examination of basic constructs like ""objects, classes, inheritance"" and their mathematical models.",yes,"The abstract specifically mentions ""mathematical models"" and ""formal computational models,"" indicating the use of formal frameworks.",yes,"The paper directly addresses programming paradigms, examining ""paradigms of object-oriented programming"" and speculating on ""what comes after object-oriented programming.""",yes,"The abstract explicitly mentions examining ""design alternatives"" and ""language design alternatives for objects, classes, inheritance,"" suggesting coverage of fundamental design principles.",yes,"There is strong evidence of a theoretical foundation through mentions of ""mathematical models"" and ""formal computational models"" for various aspects of OOP.",yes,"The abstract suggests a theoretical rather than implementation-focused approach, with emphasis on models and design principles.",yes,"The focus appears strongly theoretical, examining fundamental questions about OOP's goals, origins, and formal models rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract demonstrates a comprehensive theoretical exploration of object-oriented programming, presenting a rigorous examination of design principles, mathematical models, and paradigm foundations. Its focus on fundamental constructs, formal computational models, and theoretical analysis strongly aligns with the screening criteria, particularly in investigating programming language design principles and theoretical contributions. The study appears to offer a deep, systematic investigation of object-oriented programming's theoretical underpinnings.",4.6
Towards Requirements for Enactment Mechanisms,"M. Dowson, Christer Fernstr√∂m",10.1007/3-540-57739-4_13,https://doi.org/10.1007/3-540-57739-4_13,European Workshop on Software Process Technology,86,1994,yes,The paper analyzes fundamental constructs (process variables) and their relationship to different formalisms at a theoretical level.,yes,"The abstract mentions formalisms and operational semantics, suggesting a formal mathematical framework is present. References to Petri nets and formal process definition languages indicate rigorous theoretical foundations.",yes,"The abstract explicitly mentions process definition paradigms and discusses theoretical aspects of different formalisms, including programming language-like formalisms.",maybe,"The abstract discusses formalisms and language design, particularly regarding process definition formalisms, and addresses fundamental design principles in the context of process definition languages, even though it does not explicitly mention orthogonality or minimality.",yes,"The paper appears to have a strong theoretical foundation, discussing formalisms, operational semantics, and theoretical implications for language design.",yes,"While implementation (enactment mechanisms) is discussed, it's clearly in service of theoretical contributions about formalisms and their design.",yes,"The paper focuses on theoretical aspects of process definition formalisms and their enactment mechanisms, rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The presence of citations suggests this is likely a formal academic paper, but the full-text accessibility cannot be determined from the abstract alone.",Include,"The abstract demonstrates a strong theoretical approach to programming language design, focusing on formalisms, process definition paradigms, and operational semantics across multiple computational frameworks. Its rigorous examination of language constructs, theoretical implications, and fundamental design principles suggests a comprehensive theoretical contribution to programming language research. The work appears to provide a systematic exploration of process definition formalisms with a clear emphasis on theoretical foundations and paradigm analysis.",4.6
An Introduction to AKL A Multi-Paradigm Programming Language,"Sverker Janson, Seif Haridi",10.1007/978-3-642-85983-0_16,https://doi.org/10.1007/978-3-642-85983-0_16,NATO ASI CP,19,1993,maybe,"The mention of a concurrent constraint framework suggests fundamental analysis, but the depth and nature of this analysis is unclear.",maybe,"The mention of a ""concurrent constraint framework"" suggests some formal framework, but the abstract is too brief to confirm the rigor of the mathematical approach.",yes,"The abstract explicitly mentions ""multi-paradigm"" and indicates support for multiple paradigms, suggesting some paradigm analysis, though the depth is unclear.",maybe,"The abstract mentions a ""concurrent constraint framework"", which suggests some investigation of language design principles, but there is insufficient detail to confirm if it covers orthogonality or minimality specifically.",maybe,"The reference to a framework suggests theoretical foundations, but the abstract is too brief to assess the depth of theoretical analysis.",maybe,The abstract does not provide enough information to determine if the study's discussion of implementation or tools serves to support broader theoretical contributions.,maybe,The abstract does not provide enough information to determine if the study contributes to theoretical understanding rather than focusing exclusively on practical aspects.,yes,"The abstract is written in English, meeting the publication language criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"A multi-paradigm programming language framework suggests potential theoretical depth, with references to a concurrent constraint approach indicating possible paradigm and design principle investigations. However, the extremely brief abstract provides insufficient detail to confidently assess most screening criteria, leaving significant uncertainty about the study's theoretical contributions and analytical rigor.",3.1
Towards a Generic Framework for Trustworthy Program Refactoring,"D√°niel Horp√°csi, Judit K√∂szegi, D. J. N√©meth",10.14232/ACTACYB.284349,https://doi.org/10.14232/ACTACYB.284349,Acta Cybernetica,2,2021,yes,"The paper analyzes fundamental program transformations and their semantic properties at a theoretical level, meeting the fundamental analysis criterion.",yes,"The paper explicitly focuses on ""formal semantics"" and ""formal verification"" of program transformations, strongly meeting the formal framework criterion.",maybe,"The abstract mentions ""multiple paradigms"" and discusses program transformations across paradigms, though this is not the primary focus of the paper, partially meeting the paradigm theory criterion.",maybe,"The paper discusses program transformations and semantics, which relates to language design principles, though it does not explicitly focus on orthogonality or minimality.",yes,"The paper proposes a ""specification formalism"" and discusses formal semantics and verification approaches, clearly meeting the theoretical foundation criterion.",yes,"While implementation is discussed (""semi-automatic execution""), it serves to support the theoretical framework rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper focuses on formal verification and theoretical foundations rather than practical patterns or optimization, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical study exploring formal semantics and verification of program transformations across multiple programming paradigms, with a strong emphasis on mathematical frameworks and fundamental computational analysis. The research presents a specification formalism that enables semi-automatic execution and formal verification, demonstrating significant theoretical contributions to programming language design principles.",4.6
"Never mind the language, what about the paradigm?",P. Luker,10.1145/65293.71442,https://doi.org/10.1145/65293.71442,Technical Symposium on Computer Science Education,21,1989,yes,"The paper appears to analyze fundamental properties of programming languages at a theoretical level, particularly regarding their size and verifiability.",maybe,"The abstract does not explicitly mention a formal mathematical framework. While it discusses verifiability, it does not indicate a rigorous verification approach.",maybe,"The abstract touches on language classification (""right class"" of languages) but does not deeply examine paradigm foundations.",yes,"The abstract discusses ""small"" languages and their properties, which relates to minimality as a design principle. It mentions verifiability and predictability, suggesting some focus on fundamental design principles.",maybe,The abstract suggests some theoretical consideration of language properties but does not explicitly mention a formal theoretical foundation.,yes,The abstract mentions implementation predictability but primarily in service of theoretical arguments about language properties.,yes,"The paper appears to make theoretical arguments about language properties and their implications, though it is presented as a position paper (""I do not pretend to answer any more questions than I ask"").",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract explores theoretical aspects of programming language design, particularly focusing on the properties of ""small"" languages and their implications for verifiability and implementation. While demonstrating potential alignment with several screening criteria related to language design principles and theoretical contributions, the text lacks explicit evidence of formal mathematical frameworks or rigorous verification approaches. The discussion suggests a position paper that raises questions about programming language selection in educational contexts.",3.5
Call-by-push-value: Decomposing call-by-value and call-by-name,P. Levy,10.1007/s10990-006-0480-6,https://doi.org/10.1007/s10990-006-0480-6,High. Order Symb. Comput.,76,2006,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on evaluation paradigms and their decomposition, strongly meeting this criterion.",yes,"The paper presents multiple formal frameworks, including big-step semantics, stack machine implementation, denotational semantics using cpos and monads, behaviour semantics, and categorical semantics, very strongly meeting this criterion.",yes,"The paper directly examines programming paradigms (CBV and CBN) and provides comparative theoretical analysis through the CBPV framework, strongly meeting this criterion.",yes,"The paper explicitly deals with fundamental design principles by decomposing CBV and CBN paradigms into fine-grain primitives and analyzing their theoretical foundations, strongly meeting this criterion.",yes,"The paper is heavily theoretical, presenting formal mathematical frameworks and proving equivalences between different semantic approaches, clearly meeting this criterion.",yes,"While implementation aspects (stack machine) are discussed, they serve to support the theoretical contributions rather than being the primary focus, meeting this criterion.",yes,"The paper's primary focus is theoretical, presenting new frameworks, proving equivalences, and providing formal comparisons between different approaches, very strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and academic style of the paper suggest it is likely accessible through academic channels.",Include,"This research presents a rigorous theoretical investigation of programming language paradigms, focusing on the call-by-push-value calculus through multiple formal mathematical frameworks and semantic analyses. The study provides a comprehensive examination of fundamental programming language design principles, offering deep theoretical insights into evaluation paradigms and their decomposition. By presenting formal frameworks, proving equivalences, and conducting comparative theoretical analysis, the work makes significant contributions to understanding programming language foundations.",4.9
"Unifying Programming Languages and Databases: Scoping, Metadata, and Process Communication","T. Merrett, Heping Shang",-,-,International Workshop/Symposium on Database Programming Languages,2,1992,yes,The paper explicitly focuses on fundamental concepts in programming languages and their theoretical connections to databases.,maybe,"While the paper discusses systematic investigation of fundamental concepts, it does not explicitly mention formal mathematical frameworks or verification approaches.",yes,"The paper explicitly discusses multiple paradigms (structured, imperative, functional, and object-oriented) and their integration, meeting the paradigm theory criterion.",yes,"The paper explicitly mentions ""insistence on orthogonality"" and aims for ""a minimum number of concepts,"" directly addressing fundamental design principles in programming languages.",yes,"The paper aims to systematically investigate fundamental concepts and their connections, suggesting a theoretical foundation.",yes,"While implementation aspects are mentioned (scoping mechanism, metadata, IPC), these appear to serve theoretical goals rather than being the primary focus.",yes,"The focus of the paper is on fundamental concepts and their theoretical connections, though there is some implementation discussion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research systematically explores fundamental programming language concepts across multiple paradigms, demonstrating strong theoretical foundations in language design principles and paradigm theory. By investigating orthogonality, minimalism, and cross-paradigm connections, the study provides a rigorous theoretical approach to programming language development, with implementation details serving broader conceptual goals.",4.6
Task-oriented programming in a pure functional language,"M. J. Plasmeijer, B. Lijnse, Steffen Michels, P. Achten, P. Koopman",10.1145/2370776.2370801,https://doi.org/10.1145/2370776.2370801,ACM-SIGPLAN International Conference on Principles and Practice of Declarative Programming,55,2012,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in the context of distributed systems and multi-user interactions.",maybe,"The abstract mentions that ""The semantics of these core concepts is defined in this paper,"" suggesting a formal mathematical framework, though the specific nature is not detailed in the abstract.",yes,The paper explicitly presents and analyzes a new programming paradigm (TOP) and its theoretical foundations.,maybe,"The paper discusses fundamental design principles of TOP, including core concepts like tasks, data sharing, and combinators, though it does not explicitly discuss orthogonality or minimality.",maybe,"The paper appears to provide a theoretical foundation through its formal semantics definition and core concepts, though the depth of the mathematical framework is not clear from the abstract.",yes,"The implementation discussion (iTask3) appears to serve the theoretical contribution rather than being the primary focus, as the abstract emphasizes the theoretical aspects of TOP.",yes,"The paper makes theoretical contributions through its paradigm definition and formal semantics, though it also includes practical implementation (iTask3 framework).",yes,"The paper is written in English, meeting this criterion.",maybe,"The paper appears to be an academic publication, suggesting likely accessibility of the full text, though this cannot be determined from the abstract alone.",Exclude,"A novel programming paradigm for distributed systems is presented, demonstrating strong theoretical foundations through its formal semantics and core design principles. The research provides a comprehensive theoretical analysis of Task-Oriented Programming, with a focus on fundamental language constructs and paradigm theory that supports both theoretical understanding and practical implementation.",4.3
Special issue on ‚ÄòLogical frameworks and metalanguages‚Äô,G. Huet,10.1017/S0956796802004549,https://doi.org/10.1017/S0956796802004549,Journal of functional programming,8,2003,yes,"The paper meets this criterion well, as it analyzes fundamental logical constructs and their relationships at a theoretical level.",yes,"The paper strongly meets this criterion, discussing multiple formal mathematical frameworks including propositional logic, first-order logic, higher-order logic, and various mathematical approaches to logic.",maybe,"The paper partially meets this criterion. While it discusses different logical paradigms and their relationships, it does not specifically focus on programming paradigms. The discussion of Logic Programming as a paradigm is brief.",maybe,The abstract discusses various logical systems and their relationships but does not specifically focus on programming language design principles like orthogonality or minimality. It touches on programming aspects only peripherally.,yes,"The paper strongly meets this criterion, with extensive discussion of theoretical foundations in logic, including mathematical models, consistency, completeness, and formal specifications.",yes,"The paper appears to maintain a theoretical focus, with implementation aspects (like automated theorem proving) serving to support theoretical discussions rather than being the primary focus.",yes,"The paper strongly meets this criterion. It appears to be primarily theoretical, discussing the evolution and foundations of logic rather than practical applications.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract demonstrates strong theoretical foundations in logic, presenting a comprehensive overview of logical systems and their mathematical frameworks. While the text exhibits rigorous theoretical depth and formal analysis, its direct relevance to programming language design principles is moderate, with only peripheral connections to programming paradigms. The work primarily explores the evolution of logic as a mathematical discipline rather than focusing specifically on programming language theory.",4
Unifying sets and programs via dependent types,Wojciech Moczydlowski,10.1016/j.apal.2011.09.016,https://doi.org/10.1016/j.apal.2011.09.016,Annals of Pure and Applied Logic,0,2009,yes,The paper analyzes fundamental programming language constructs through the lens of dependent types and set theory.,yes,"The paper presents a formal framework ""D"" that unifies programming language with constructive set theory, showing clear mathematical rigor.",yes,"The paper examines programming paradigms (lazy programming) and their theoretical foundations, particularly in relation to set theory.",yes,"The paper discusses fundamental design principles through its unification of programming language and set theory, particularly focusing on dependent types and their implications for language design.",yes,"The paper is built on formal theoretical foundations, combining programming language theory with constructive set theory (IZFR).",yes,"The paper appears to maintain a theoretical focus, with any implementation discussion serving theoretical purposes rather than practical applications.",yes,"The paper focuses on theoretical contributions, including meta-theoretic properties and fundamental analysis of programming language constructs.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical study unifying programming language and constructive set theory through dependent types, demonstrating strong mathematical foundations and fundamental analysis of computational paradigms. The research presents a formal framework that explores meta-theoretic properties, programming language design principles, and theoretical contributions across multiple computational domains. Its comprehensive approach integrates theoretical rigor with innovative computational constructs, providing deep insights into programming language foundations.",4.9
Commentary on Practical Foundations for Programming Languages (Second Edition) *,R. Harper,-,-,-,6,2017,yes,"The paper analyzes fundamental concepts in programming language classification and evolution, meeting the fundamental analysis criterion.",no,The abstract does not indicate the use of formal mathematical frameworks or verification approaches. The paper takes a more philosophical/evolutionary biology analogy approach.,yes,"The paper directly examines programming paradigm foundations and classification systems, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental classification and design principles of programming languages, particularly regarding paradigms, meeting the language design principles criterion.",maybe,"While the paper discusses theoretical concepts, it appears to be more focused on critiquing existing classification systems rather than presenting a new formal theoretical foundation.",yes,"The paper appears to be purely theoretical, not focused on practical implementations, meeting the implementation focus criterion.",yes,"The paper appears to make theoretical contributions by challenging existing paradigm classification systems and proposing a different way of thinking about programming language evolution, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"The abstract presents a theoretical exploration of programming language paradigms, challenging traditional classification systems through an evolutionary biology analogy. While demonstrating strong theoretical foundations and fundamental analysis of programming language constructs, the text lacks a formal mathematical framework and leaves full-text accessibility uncertain. The work appears to contribute novel perspectives on programming language evolution and paradigm theory.",4
Logical reconstruction of programming language paradigms,D. Lauc,-,-,-,0,2013,yes,The paper analyzes fundamental programming language constructs at a theoretical level through its paradigm model.,yes,"The paper uses ""logical reconstruction"" and ""logical models of computation,"" suggesting a formal mathematical framework.",yes,"The paper's primary focus is on programming paradigms and their theoretical relationships, including a comparative analysis of imperative, functional, and logical paradigms.",maybe,"The paper discusses programming paradigms and their fundamental relationships, which relates to language design principles, but it does not explicitly mention orthogonality or minimality.",yes,"The paper presents a theoretical framework for modeling programming paradigms using logical models, indicating a strong theoretical foundation.",yes,The paper seems to focus on theoretical aspects rather than implementation details.,yes,"The paper appears to make a theoretical contribution by providing a new model for understanding programming paradigms, rather than focusing on practical aspects.",yes,"The paper is written in English, though there is a minor grammatical error.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"A theoretical exploration of programming language paradigms using logical reconstruction, presenting a novel model that systematically analyzes computational paradigms through a rigorous mathematical framework. The study demonstrates strong theoretical foundations by examining fundamental programming language constructs across imperative, functional, and logical paradigms, with a focus on conceptual understanding rather than practical implementation.",4.6
2011 international workshop on foundations of object-oriented languages (fool'11): splash/oopsla '11 workshop summary,"Jonathan Aldrich, Jeremy G. Siek, E. Zucca",10.1145/2048147.2048228,https://doi.org/10.1145/2048147.2048228,OOPSLA Companion,0,2011,yes,"The mention of ""key concepts of object-oriented languages"" and focus on foundations suggests fundamental analysis.",yes,"The abstract mentions ""type theory, semantics, program verification"" which strongly suggests the use of formal mathematical frameworks.",yes,"The abstract explicitly mentions ""integration with other paradigms"" and discusses object-oriented language foundations, meeting the paradigm theory criterion.",yes,"The abstract explicitly mentions ""sound principles for object-oriented languages"" and discusses foundations, suggesting alignment with the language design principles criterion.",yes,"The focus on ""foundations of object-oriented languages"" and mention of type theory and semantics indicates strong theoretical foundations.",yes,"The abstract doesn't mention implementation details, focusing instead on theoretical aspects, which is appropriate for the implementation focus criterion.",yes,"The workshop's focus on ""foundations"" and theoretical aspects rather than practical applications suggests strong theoretical contribution.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but I notes that being a workshop paper, it is likely accessible through academic channels.",Include,"The abstract demonstrates a strong theoretical focus on object-oriented language foundations, explicitly addressing principles of language design, type theory, and paradigm integration. Its emphasis on fundamental concepts, formal frameworks, and theoretical contributions aligns closely with rigorous academic research in programming language theory. The workshop's scope encompasses critical theoretical aspects of object-oriented programming, suggesting a comprehensive examination of language design principles.",4.6
On the Semantics of ReFLect as a Basis for a Reflective Theorem Prover,"T. Melham, Raphael Cohn, Ian Childs",-,-,arXiv.org,7,2013,yes,"The paper examines core language constructs (combinatory fragment), semantic properties, and type systems at a theoretical level, indicating a focus on fundamental analysis of programming language constructs or computational primitives.",yes,"The paper deals with lambda-calculus, formal semantics, and theorem proving, indicating the use of a formal mathematical framework or rigorous verification approach for analyzing programming language properties.",yes,The paper examines functional programming paradigm foundations through its analysis of reFLect (similar to ML) and its relationship to theorem proving. The discussion of reflection mechanisms suggests paradigm-level analysis.,yes,"The paper directly addresses fundamental design principles in programming languages, specifically examining the semantics and type system of reFLect. The focus on ""minimal modification"" suggests attention to minimality principles.",yes,"The paper has a clear theoretical foundation, including lambda-calculus, formal semantics, and higher-order logic, suggesting a formal theoretical foundation or mathematical framework to support its claims.",yes,"The paper appears to use implementation aspects (reFLect's use in hardware design) only to support theoretical analysis, not as the primary focus.",yes,"The paper clearly focuses on theoretical contributions, specifically addressing semantic issues and proposing theoretical modifications to the type system, rather than focusing exclusively on practical patterns, optimization, or educational aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, I notes that given the paper's academic nature, it is likely accessible through academic channels.",Include,"This research presents a rigorous theoretical investigation of programming language semantics, focusing on the lambda-calculus and formal verification principles of reFLect. The study demonstrates deep engagement with fundamental design principles, paradigm theory, and mathematical frameworks, offering a sophisticated analysis of computational constructs through a higher-order logical lens. Its primary contribution lies in theoretical exploration rather than practical implementation, with a clear emphasis on semantic and type system modifications.",4.9
Reactive objects,"J. Nordlander, Mark P. Jones, M. Carlsson, R. Kieburtz, A. Black",10.1109/ISORC.2002.1003682,https://doi.org/10.1109/ISORC.2002.1003682,Proceedings Fifth IEEE International Symposium on Object-Oriented Real-Time Distributed Computing. ISIRC 2002,56,2002,yes,"The paper analyzes fundamental programming language constructs, specifically I/O primitives and concurrency models, at a theoretical level.",maybe,"While the abstract mentions a ""consistent model,"" it doesn't explicitly state whether this is formalized mathematically. However, the theoretical nature of the work suggests some formal framework may be present in the full paper.",yes,"The paper directly examines programming paradigms (object-oriented, concurrent, and event-based) and provides comparative theoretical analysis between different approaches.",yes,"The paper discusses fundamental design principles in programming languages, specifically addressing the gap between traditional I/O models and event-based programming, and presents a new model of event-based concurrency, which relates to language design principles.",maybe,"The paper appears to have a theoretical foundation, presenting a new model of event-based concurrency and reactive objects, though the abstract doesn't explicitly mention mathematical frameworks.",yes,The paper includes implementation discussion (Java comparison) but uses this to support theoretical contributions rather than focusing solely on practical aspects.,yes,"The paper makes theoretical contributions by presenting a new model of event-based concurrency and analyzing fundamental programming paradigms. While it includes a practical example, this appears to support the theoretical contribution rather than being the primary focus.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be a formal academic work, suggesting likely accessibility of the full text, though this cannot be determined from the abstract alone.",Exclude,"The research presents a theoretical exploration of programming language paradigms, focusing on event-based concurrency and reactive objects with a strong emphasis on fundamental design principles. By examining the gap between traditional I/O models and contemporary programming approaches, the study offers a novel theoretical framework that contributes to understanding programming language constructs at a conceptual level. The work demonstrates significant potential for advancing theoretical understanding of programming paradigms through its comparative analysis and proposed model.",4.3
Discrete Mathematics and Functional Programming,Thomas VanDrunen,-,-,-,5,2012,yes,"The abstract indicates analysis of fundamental programming language constructs, particularly in the context of functional programming and its mathematical foundations.",maybe,"While the abstract mentions mathematical foundations, it does not explicitly indicate whether the study presents a formal mathematical framework for analyzing programming language properties.",yes,"The abstract strongly meets this criterion, explicitly comparing different programming paradigms (functional, imperative, object-oriented) and their fundamental characteristics.",yes,"The abstract discusses fundamental programming paradigms and their underlying principles, particularly focusing on functional programming as a paradigm, meeting the language design principles criterion.",maybe,"The abstract suggests mathematical foundations are present, but does not explicitly detail the theoretical framework.",maybe,"The abstract suggests a balanced approach between theoretical and practical aspects, but appears to lean more toward educational implementation than pure theoretical contribution.",maybe,"While the book appears to have theoretical elements, it seems to focus significantly on educational aspects and practical applications, which might not align with the criterion's emphasis on theoretical contributions.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract indicates the paper is from a book, but it is unclear whether the full text is accessible.",Exclude,"The text demonstrates strong theoretical foundations in programming paradigms, particularly functional programming, with a robust integration of discrete mathematics and computational concepts. While showing significant potential for theoretical analysis, the work appears more oriented toward educational objectives and practical applications rather than pure theoretical research. The discussion effectively explores fundamental programming language constructs and paradigm comparisons, though with some uncertainty regarding formal mathematical frameworks.",3.5
Procedural Choreographic Programming,"L. Cruz-Filipe, F. Montesi",10.1007/978-3-319-60225-7_7,https://doi.org/10.1007/978-3-319-60225-7_7,Formal Techniques for (Networked and) Distributed Systems,26,2016,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on procedural abstraction and concurrent programming primitives.",maybe,"The abstract mentions ""correct-by-construction"" and ""typing discipline,"" suggesting a formal framework, though the details are not explicit. The connection to process calculus indicates formal analysis.",yes,"The paper directly addresses programming paradigms, specifically choreographic programming and its relationship to concurrent programming paradigms.",maybe,"The paper discusses procedural abstraction and typing discipline in choreographic programming, which relates to fundamental design principles, though it does not explicitly address orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation, discussing formal properties like correctness and typing systems. The mention of compilation to process calculus suggests mathematical rigor.",maybe,The abstract suggests the implementation aspects (compilation to process calculus) serve theoretical goals rather than being the primary focus.,yes,"The paper appears to make theoretical contributions through its formal framework and analysis of procedural abstraction, rather than focusing on practical patterns.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"A theoretical investigation of choreographic programming that explores procedural abstraction, concurrent programming paradigms, and formal language design principles. The research demonstrates strong alignment with theoretical foundations, paradigm analysis, and fundamental computational constructs, while presenting a rigorous approach to programming language design. The study's focus on correct-by-construction principles and typing discipline suggests a sophisticated theoretical contribution to programming language research.",4.3
Programming language theory and its implementation - applicative and imperative paradigms,-,-,-,Prentice Hall International series in Computer Science,18,1988,yes,"The abstract provides evidence that the paper covers fundamental theoretical aspects and programming language theory, meeting the fundamental analysis criterion.",yes,"The abstract provides strong evidence for the use of a formal mathematical framework, specifically mentioning ""Floyd-Hoare logic and Calculus"" which are formal frameworks for analyzing programming languages.",maybe,"The abstract mentions ""Functional Programming"" and suggests that the paper covers theoretical aspects of programming paradigms, providing some evidence for the paradigm theory criterion.",maybe,"The abstract mentions ""programming language theory"" which suggests some coverage of language design principles, even though it does not explicitly discuss orthogonality or minimality.",yes,"The abstract clearly indicates that the paper focuses on programming language theory and formal systems, providing a theoretical foundation.",yes,"The abstract indicates that the paper has a theoretical focus rather than an implementation focus, meeting the implementation focus criterion.",yes,"The abstract strongly suggests that the paper makes a theoretical contribution, focusing on introducing and exploring programming language theory rather than practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"The abstract demonstrates a strong theoretical focus on programming language theory, with explicit references to formal mathematical frameworks like Floyd-Hoare logic and calculus. It covers fundamental programming concepts, functional programming, and theoretical foundations, suggesting a rigorous approach to understanding programming language principles. The work appears to prioritize theoretical contributions over practical implementation, aligning closely with the screening criteria's emphasis on theoretical analysis.",4.6
Common sense for concurrency and strong paraconsistency using unstratified inference and reflection,C. Hewitt,-,-,arXiv.org,8,2008,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including concurrency, reflection, and mathematical foundations, strongly meeting the fundamental analysis criterion.",yes,"The paper presents a formal mathematical framework (Direct Logic) and discusses mathematical induction, Godel's incompleteness theorem, and formal proofs, strongly meeting the formal framework criterion.",yes,"The paper explicitly compares programming paradigms (Logic Programming vs. Procedural Embedding of Knowledge) and provides theoretical analysis of their relative generality, strongly meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles through its development of Direct Logic and ActorScript, including orthogonality in handling inconsistencies and reflection, meeting the language design principles criterion.",yes,"The paper builds on formal theoretical foundations including Godel's incompleteness theorem, Tarskian framework, and develops a new theoretical framework (Direct Logic), clearly meeting the theoretical foundation criterion.",yes,"While the paper discusses ActorScript implementation, this serves to support broader theoretical contributions about programming paradigms and formal frameworks, meeting the implementation focus criterion.",yes,"The paper's primary focus is theoretical, including formal proofs and theoretical comparisons of programming paradigms, and it is not focused on practical patterns or optimization, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language foundations, developing a novel formal framework (Direct Logic) that systematically examines computational paradigms through mathematical proofs and theoretical analysis. The study provides a comprehensive investigation of programming language design principles, paradigm comparisons, and fundamental computational constructs, with a strong emphasis on theoretical contributions and mathematical foundations. Its sophisticated approach to analyzing programming language properties demonstrates a deep engagement with formal theoretical frameworks and computational theory.",4.9
Applicative bidirectional programming with lenses,"Kazutaka Matsuda, Meng Wang",10.1145/2784731.2784750,https://doi.org/10.1145/2784731.2784750,ACM SIGPLAN International Conference on Functional Programming,38,2015,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically focusing on bidirectional transformations and their relationship to functional programming.",maybe,"The abstract suggests a formal framework is developed, and mentions bridging different approaches (lens framework and semantic bidirectionalization), indicating mathematical rigor.",yes,"The paper directly examines programming paradigms, specifically bidirectional programming, and compares different approaches (applicative-style and higher-order bidirectional programming).",maybe,"The paper discusses bidirectional programming as a paradigm and presents a framework for programming languages, which relates to fundamental design principles, though it does not explicitly address orthogonality or minimality.",yes,"The paper appears to have a strong theoretical foundation, discussing formal approaches to bidirectional programming and bridging different theoretical frameworks.",maybe,"The abstract suggests the implementation discussion serves theoretical purposes, focusing on how the framework enables bidirectional programming in standard functional languages.",yes,"The paper makes clear theoretical contributions by developing a new framework and bridging different theoretical approaches, rather than focusing on practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical framework for bidirectional programming, exploring fundamental language design principles through a formal mathematical approach that bridges different programming paradigms. The study offers a deep theoretical contribution by developing a novel framework for bidirectional transformations, demonstrating strong alignment with programming language theory and paradigm analysis. Its focus on theoretical foundations and mathematical rigor makes it a significant contribution to understanding computational language constructs.",4.9
THE CLASSIFICATION OF PROGRAMMING ENVIRONMENTS,"J. Koll√°r, Peter V√°clav√≠k, J. Porub√§n",-,-,-,7,-,yes,"The paper analyzes fundamental programming language constructs through environment classification and safe programming requirements, meeting the fundamental analysis criterion.",yes,"The abstract mentions ""formalized definitions"" and presents a theoretical classification of environments, suggesting a formal framework is used, meeting the formal framework criterion.",yes,"The paper explicitly examines programming paradigms, specifically discussing the process functional paradigm and its relationship to functional and imperative languages, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of PFL, including orthogonality (minimal superset) and minimality (experimental language design), meeting the language design principles criterion.",yes,"The paper presents theoretical foundations through formalized definitions of environments and their classification, meeting the theoretical foundation criterion.",yes,"While implementation is mentioned (von Neumann architectures), it serves to support the theoretical framework rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions through formal definitions and paradigm analysis rather than practical implementation details, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of programming language design, focusing on the process functional paradigm and its fundamental principles through formalized definitions and environment classification. By examining paradigm foundations, theoretical contributions, and language design principles, the study offers a comprehensive analysis of computational constructs with potential implications for unified programming language implementation.",4.6
Exploiting parallelism in functional languages: a ‚Äúparadigm-oriented‚Äù approach,F. Rabhi,-,-,-,37,1995,yes,The paper analyzes fundamental programming language constructs related to parallelism and computational primitives at a theoretical level.,yes,"The paper presents a ""framework under which programs can be developed and transformed into efficient and portable implementations"" and discusses formal analysis of parallelism, meeting the formal framework criterion.",yes,"The paper explicitly focuses on ""parallel programming paradigms"" and their theoretical foundations, including the ""iterative transformation paradigm,"" meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on parallel programming paradigms and their structures.",yes,"The paper appears to have a strong theoretical foundation, discussing algorithmic structures, paradigms, and formal transformation approaches.",yes,"While implementation is discussed, it serves to support the theoretical framework rather than being the primary focus.",yes,"The paper appears to make theoretical contributions to understanding parallel programming paradigms and their structures, rather than focusing solely on practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"The research presents a comprehensive theoretical exploration of parallel programming paradigms, focusing on fundamental design principles, algorithmic structures, and formal frameworks for understanding computational parallelism. By examining parallel programming paradigms through a rigorous theoretical lens, the study offers significant insights into the structural and transformative aspects of programming language design. The work demonstrates strong alignment with theoretical research criteria, particularly in its analysis of computational primitives and paradigm foundations.",4.6
Transitioning from structural to nominal code with efficient gradual typing,"Fabian Muehlboeck, R. Tate",10.1145/3485504,https://doi.org/10.1145/3485504,Proc. ACM Program. Lang.,7,2021,yes,"The paper analyzes fundamental programming language constructs (typing systems, structural vs. nominal objects) at a theoretical level, which meets this criterion.",yes,"The abstract mentions presenting a calculus and discusses formal guarantees, indicating that a formal mathematical framework is used, which strongly meets this criterion.",yes,"The paper explicitly examines programming paradigms, specifically the interaction between structural and nominal typing paradigms in object-oriented languages, which strongly meets this criterion.",yes,"The paper directly addresses fundamental design principles in programming languages, specifically focusing on gradual typing and the interaction between typed and untyped code, which strongly meets this criterion.",yes,"The paper appears to have a strong theoretical foundation, discussing formal guarantees and presenting a calculus for analyzing type systems, which meets this criterion.",yes,"While implementation is mentioned (""can be implemented efficiently""), it appears to serve the theoretical contributions rather than being the primary focus, which meets this criterion.",yes,"The paper makes clear theoretical contributions to understanding gradual typing and cross-paradigm code migration, rather than focusing on practical aspects alone, which meets this criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical investigation of gradual typing, exploring fundamental programming language design principles through a formal calculus that examines cross-paradigm code migration. The study provides a comprehensive analysis of structural and nominal typing paradigms, offering formal guarantees and theoretical contributions to understanding programming language constructs. Its strong theoretical foundation, mathematical framework, and focus on fundamental language principles make it a highly relevant scholarly work.",4.9
Semantic and Logical Properties of Stateful Programming,Cristiano Calcagno,-,-,-,5,2002,yes,"The study analyzes fundamental programming language constructs at a theoretical level, including memory management, pointer operations, and code execution.",yes,"The paper extensively uses formal mathematical frameworks, including Hoare logic, formal semantics, and type systems. The abstract explicitly mentions ""formalism,"" ""type safety,"" and ""formal analyses.""",yes,"The paper examines programming paradigms, particularly focusing on imperative programming and multi-staged programming, providing theoretical analysis of these paradigms.",yes,"The paper deeply investigates fundamental design principles in programming languages, particularly focusing on imperative operations, memory management, and multi-staged programming.",yes,"The study is heavily grounded in theoretical foundations, including formal semantics, type theory, and mathematical frameworks for analyzing programming language properties.",yes,"While implementation aspects are discussed (e.g., garbage collection), they serve to support broader theoretical contributions rather than being the primary focus.",yes,"The paper makes clear theoretical contributions, focusing on fundamental properties of programming languages rather than practical implementations. It develops new theoretical frameworks and proves formal properties.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be a thesis, which typically has full text available through university libraries or archives, but this cannot be confirmed from the abstract alone.",Include,"This comprehensive thesis provides a rigorous theoretical exploration of programming language foundations, focusing on imperative operations, memory management, and multi-staged programming through formal mathematical frameworks. The research deeply investigates fundamental design principles, paradigm theory, and computational primitives using sophisticated formal analysis techniques, demonstrating significant theoretical contributions to programming language understanding. Its systematic approach to examining language constructs, type systems, and semantic properties offers substantial insights into the theoretical underpinnings of computational systems.",4.9
Semantic formalization in mathematical modeling languages,"F. Vicu√±a, A. M. Geoffrion, M. A. Melkanoff",-,-,-,12,1990,yes,The study analyzes fundamental language constructs and semantics at a theoretical level.,yes,The paper strongly meets this criterion by using attribute grammar formalism as a rigorous mathematical framework for analyzing language properties.,yes,The research examines fundamental aspects of mathematical modeling language paradigms and their theoretical foundations.,yes,"The paper investigates formal semantic principles in mathematical modeling languages, which relates to fundamental design principles in programming languages.",yes,"The study is heavily focused on formal theoretical foundations, specifically using attribute grammar equations to formalize language semantics.",yes,The implementation (prototype modeling environment) serves to validate and support the theoretical contributions rather than being the primary focus.,yes,"The paper's primary focus is on theoretical contributions to semantic formalization, though it does include practical implementation aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract appears to be from a dissertation, which typically has accessible full texts through academic channels, but this is not explicitly confirmed.",Include,"The dissertation presents a rigorous theoretical investigation of mathematical modeling language semantics using attribute grammar formalism, demonstrating strong alignment with language design principles, formal frameworks, and fundamental theoretical analysis. By focusing on semantic formalization and employing a mathematical framework to examine programming language constructs, the research provides a comprehensive theoretical contribution that bridges formal methods with practical language design. The study's emphasis on theoretical foundations and rigorous mathematical approaches positions it as a substantive scholarly work in programming language research.",4.6
Programming in Protocols - A Paradigm of Behavioral Programming,"A. McNeile, Ella E. Roubtsova",10.5220/0001759200230030,https://doi.org/10.5220/0001759200230030,International Conference on Evaluation of Novel Approaches to Software Engineering,4,2008,yes,"The paper analyzes fundamental programming language constructs through the lens of event protocols and behavioral models, meeting this criterion.",yes,"The abstract mentions ""process algebraic techniques,"" which indicates a formal mathematical framework is used, strongly meeting this criterion.",yes,"The paper directly addresses programming paradigm foundations by presenting a new paradigm based on event protocols, strongly meeting this criterion.",maybe,"The paper discusses a new programming paradigm based on event protocols, which suggests investigation of fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,"The paper appears to have a theoretical foundation, discussing behavioral models and formal composition of partial behavioral descriptions, meeting this criterion.",maybe,"While the abstract mentions ""high level executable language,"" the implementation discussion appears to serve theoretical contributions about behavioral models and code generation.",yes,"The focus appears to be on theoretical understanding, discussing behavioral models and their relationship to code, contributing to theoretical understanding rather than just practical aspects.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A novel programming paradigm exploring event protocols demonstrates strong theoretical foundations through process algebraic techniques and fundamental analysis of behavioral models. The research contributes to programming language theory by examining paradigm foundations, behavioral descriptions, and computational primitives at a rigorous theoretical level. Multiple screening criteria are met, particularly in theoretical contribution, paradigm theory, and formal framework development.",4.6
Multiparadigm Constraint Programming Languages,Petra Hofstedt,10.1007/978-3-642-17330-1,https://doi.org/10.1007/978-3-642-17330-1,Cognitive Technologies,11,2011,maybe,"The abstract suggests analysis of fundamental programming paradigms, potentially meeting this criterion.",no,There is no clear indication of formal mathematical frameworks or verification approaches in the available text.,yes,"The abstract explicitly focuses on programming paradigms and their classification, mentioning multiple paradigms (imperative, functional, logic, etc.), suggesting alignment with this criterion.",maybe,"The abstract mentions paradigms, suggesting potential coverage of fundamental design principles, but does not explicitly discuss orthogonality or minimality.",maybe,"The abstract suggests a theoretical approach to classifying programming paradigms, but there is insufficient information to confirm the depth of the theoretical foundation.",maybe,"The focus appears to be on theoretical classification rather than implementation, but this cannot be fully determined from the truncated abstract.",maybe,"The abstract suggests a theoretical focus on paradigm classification rather than practical aspects, potentially meeting this criterion.",yes,"The abstract appears to be written in English, meeting the language requirement.",maybe,The full-text accessibility cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates potential alignment with theoretical programming language research, particularly in paradigm classification, with promising indications of theoretical depth across multiple programming paradigms. However, the truncated text creates significant uncertainty about the full scope and methodological rigor of the study, preventing definitive assessment of its theoretical contributions.",3.4
Deenitional Trees,S. Antoy,-,-,-,42,1992,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on rewriting systems, control structures, and parallelism properties.",yes,"The abstract indicates a formal mathematical framework through its discussion of ""hierarchical structure"" and formal analysis of rewriting systems. The mention of ""necessary set of redexes"" and ""and-or relation"" suggests mathematical rigor.",yes,"The paper directly examines programming paradigms, specifically focusing on rewriting paradigms and their relationship to functional programming. It provides theoretical analysis of these paradigms.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on rewriting paradigms and control structures in functional programming languages.",yes,"The paper appears to have a strong theoretical foundation, presenting a formal framework for analyzing rewriting systems and their properties. The discussion of parallelism degrees and redex relationships indicates theoretical depth.",yes,"While the paper discusses implementation aspects (e.g., LogF) and BABEL(), these appear to serve theoretical purposes rather than being the primary focus. The implementation discussion supports broader theoretical contributions.",yes,"The paper makes clear theoretical contributions, focusing on fundamental properties of rewriting systems and their theoretical implications for parallelism and sequentiality.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of rewriting paradigms in functional programming, offering a formal mathematical framework that analyzes computational control structures and parallelism properties. By examining fundamental programming language constructs through a hierarchical structure and investigating theoretical foundations of rewriting systems, the study provides deep insights into computational paradigms and their implementation characteristics. The work demonstrates strong theoretical contributions across multiple dimensions of programming language design and analysis.",4.9
The CTM approach for teaching and learning programming,P. V. Roy,-,-,-,4,2010,yes,"The paper analyzes fundamental programming language constructs and paradigms at a theoretical level, meeting the fundamental analysis criterion.",yes,"The abstract explicitly mentions ""complete formal semantics"" and ""abstract machine,"" indicating the paper presents a formal mathematical framework, meeting the formal framework criterion.",yes,"The paper explicitly examines three main programming paradigms (functional, object-oriented, and dataflow concurrent) and their theoretical relationships, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles through its ""CTM"" framework and uniform syntax approach in Oz, meeting the language design principles criterion.",yes,"The paper presents a formal theoretical foundation through its semantics and framework for understanding programming paradigms, meeting the theoretical foundation criterion.",yes,"The implementation discussion (Oz/Mozart) serves to support the theoretical framework rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper appears to focus on theoretical understanding of programming paradigms and their relationships, though it also includes educational aspects, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract indicates the paper is from a book chapter, but the full-text accessibility cannot be determined from the abstract alone.",Exclude,"The study presents a comprehensive theoretical exploration of programming paradigms, offering a formal semantic framework that systematically examines functional, object-oriented, and dataflow concurrent programming models. By introducing a uniform theoretical approach through the CTM framework and utilizing the Oz multiparadigm language, the research provides a rigorous mathematical analysis of programming language constructs and their fundamental relationships. The work demonstrates strong theoretical contributions while maintaining a connection to educational implementation, balancing theoretical depth with practical pedagogical considerations.",4.3
Abstract Interpretation as a Programming Language,Mads Rosendahl,10.4204/EPTCS.129.7,https://doi.org/10.4204/EPTCS.129.7,Festschrift for Dave Schmidt,4,2013,yes,"The paper analyzes fundamental programming language constructs through the lens of denotational semantics and abstract interpretation, which aligns with this criterion.",yes,"The paper deals with denotational semantics and abstract interpretation, which are formal mathematical frameworks for analyzing programming language properties, indicating a strong match with this criterion.",yes,"The paper explicitly examines programming paradigms, particularly discussing denotational semantics and abstract interpretation as programming paradigms, indicating a strong match with this criterion.",maybe,"The paper discusses denotational semantics and abstract interpretation as programming paradigms, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",yes,"The paper is heavily theoretical, focusing on formal semantics and mathematical frameworks (lattices, fixpoint operators), which provides a clear match with this criterion.",yes,"The paper discusses implementation aspects (compiler generators, interpreters) but clearly uses these to support theoretical contributions rather than focusing on practical aspects, indicating a match with this criterion.",yes,"The paper focuses on theoretical contributions, specifically how strictness analysis results can be used as fixpoint operators for higher-order functions over lattices, which aligns with this criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This theoretical work deeply explores programming language semantics through formal mathematical frameworks, focusing on denotational semantics and abstract interpretation as programming paradigms. The research provides a rigorous theoretical contribution by examining fundamental language constructs, fixpoint operators, and higher-order functions over lattices, with a strong emphasis on mathematical foundations and paradigm analysis.",4.9
Towards Megaprogramming: A Paradigm for Component-Based Programming,"G. Wiederhold, P. Wegner, S. Ceri",-,-,-,38,1992,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly regarding module interconnection and service-oriented programming.",maybe,"The abstract mentions a ""conceptual framework"" but does not explicitly indicate the use of formal mathematical frameworks or rigorous verification approaches. The focus appears more conceptual than formal.",yes,"The paper does examine programming paradigm foundations, specifically introducing a new paradigm of megaprogramming and service-oriented programming.",maybe,"The paper discusses a programming language framework for megaprogramming, but does not explicitly focus on orthogonality or minimality. It does address fundamental design principles in terms of module interconnection and service-oriented programming.",maybe,"While the paper presents a theoretical framework for megaprogramming, it does not clearly indicate a formal mathematical foundation. The approach seems more architectural than mathematical.",maybe,"The paper discusses implementation aspects (module interconnection, data transfer, etc.) but these appear to serve the broader theoretical contribution of the megaprogramming paradigm.",maybe,"The paper makes theoretical contributions by introducing a new programming paradigm and conceptual framework, though it appears to balance theoretical and practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research presents a novel programming paradigm focused on megamodules and service-oriented programming, demonstrating strong theoretical contributions in paradigm theory and fundamental analysis. While the study offers conceptual insights into module interconnection and programming frameworks, it lacks explicit formal mathematical foundations and rigorous verification approaches. The work balances theoretical exploration with practical implementation considerations, providing a nuanced approach to understanding large-scale software systems.",3.5
A programming calculus based on partial inductive definitions (with an introduction to the theory of partial inductive definitions),"L. Eriksson, Lars Halln√§s",-,-,-,4,1988,yes,The paper analyzes fundamental programming language constructs through the lens of partial inductive definitions and their relationship to Horn clauses.,yes,"The paper explicitly presents a formal mathematical framework based on partial inductive definitions for program specification, verification, and synthesis.",yes,"The paper examines programming paradigms, specifically comparing and extending logic programming paradigms through partial inductive definitions.",yes,"The paper presents a programming calculus framework that appears to address fundamental design principles, particularly in how it extends Horn clauses and logic programming paradigms.",yes,The paper is built on the theory of partial inductive definitions and provides a formal theoretical foundation for programming language analysis.,yes,"The paper appears to maintain a theoretical focus, with implementation aspects serving the theoretical framework rather than being the primary focus.",yes,"The paper focuses on theoretical contributions, presenting a new framework for program specification and verification rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A comprehensive theoretical framework exploring programming language design through partial inductive definitions, presenting a rigorous mathematical approach to program specification, verification, and synthesis. The research deeply examines programming paradigms, offering a novel extension of logic programming principles with strong theoretical foundations and fundamental computational analysis. The study demonstrates significant theoretical contributions by developing a calculus that enables flexible specification language integration and systematic program verification.",4.9
Supporting Multiparadigm Programming on Actor Architectures,G. Agha,10.1007/3-540-51285-3_29,https://doi.org/10.1007/3-540-51285-3_29,Parallel Architectures and Languages Europe,18,1989,yes,"The paper analyzes fundamental programming language constructs, particularly regarding concurrency and programming paradigms.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches. While the paper discusses theoretical aspects, it appears more conceptual than formally rigorous.",yes,"The paper explicitly discusses programming paradigms, their relationship to actors, and multiparadigm programming systems, showing a strong match with this criterion.",maybe,"The paper discusses fundamental programming primitives and their relationship to concurrency models, suggesting investigation of design principles, but it does not explicitly mention orthogonality or minimality.",maybe,"The paper presents theoretical arguments about concurrency models and programming paradigms, but does not explicitly mention mathematical frameworks. The approach seems more conceptual and argumentative.",yes,The discussion of multicomputers and implementation aspects appears to support broader theoretical contributions about concurrency models and paradigms.,yes,"The paper appears to focus on theoretical understanding of concurrency models and their relationship to programming paradigms, rather than practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract demonstrates strong theoretical engagement with programming paradigms, concurrency models, and fundamental language constructs, particularly emphasizing multiparadigm programming and actor-based systems. While presenting conceptual insights into programming language design, the work appears less rigorous in formal mathematical frameworks and lacks explicit discussion of orthogonality or minimality. The research contributes theoretical understanding of computational structures and programming paradigms with a focus on conceptual analysis rather than strict formal verification.",4
An Axiomatic Semantics for Functional Reactive Programming,C. King,-,-,-,2,2008,yes,"The paper analyzes fundamental programming language constructs (FRP primitives) at a theoretical level, meeting the fundamental analysis criterion.",yes,"The paper uses first-order linear temporal logic for axiomatic semantics and employs formal verification using the Coq proof assistant, which meets the formal framework criterion.",yes,"The paper examines functional reactive programming as a paradigm and its fundamental primitives, meeting the paradigm theory criterion.",yes,"The paper explicitly focuses on identifying a minimal subset of primitives in functional reactive programming, directly addressing the minimality design principle.",yes,"The paper provides a formal theoretical foundation through axiomatic semantics and formal verification, meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed, they serve to support the theoretical contributions through formal verification, meeting the implementation focus criterion.",yes,"The focus of the paper is on theoretical contributions through formal semantics and verification, rather than practical applications, meeting the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it is a thesis.",Include,"This research comprehensively addresses theoretical programming language design through a rigorous examination of functional reactive programming primitives, utilizing formal mathematical frameworks like first-order linear temporal logic and Coq proof assistant. The study provides a deep theoretical analysis of programming language constructs, focusing on minimality, paradigm foundations, and formal verification of computational primitives. Its strong emphasis on theoretical contributions and fundamental design principles makes it a robust scholarly work in programming language research.",4.9
First-order Lax Logic as a framework for Constraint Logic Programming,"M. Fairtlough, M. Walton, M. Mendler",-,-,-,19,1997,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on the semantics of constraint logic programming and its relationship to formal logic.",yes,"The paper strongly meets this criterion, presenting a formal mathematical framework (QLL - an intuitionistic first-order modal logic) and utilizing rigorous verification approaches. It explicitly discusses proof theory and formal semantics.",yes,"The paper examines programming paradigm foundations, specifically focusing on Constraint Logic Programming and its theoretical underpinnings. It provides comparative theoretical analysis between different approaches.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on the semantics of Constraint Logic Programming and its theoretical foundations.",yes,"The paper has a very strong theoretical foundation, building on Lax Logic and presenting formal mathematical frameworks for analyzing programming language properties. It includes soundness and completeness theorems.",yes,"While the paper discusses implementation aspects (constraint computation), these serve to support broader theoretical contributions rather than being the primary focus.",yes,"The paper is primarily theoretical, focusing on proof-theoretic approaches and formal semantics rather than practical applications. It makes clear theoretical contributions to understanding programming language semantics.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract indicates the paper is a technical report, but the full-text accessibility cannot be definitively determined from the abstract alone.",Include,"This technical report presents a rigorous theoretical investigation of Constraint Logic Programming through a novel proof-theoretic approach using an intuitionistic first-order modal logic. The work demonstrates strong mathematical foundations, focusing on formal semantics, paradigm theory, and fundamental analysis of programming language constructs. Its primary contribution lies in developing a comprehensive theoretical framework for understanding computational semantics through a sophisticated logical and mathematical lens.",4.9
A Metalanguage for Guarded Iteration,"S. Goncharov, C. Rauch, Lutz Schr√∂der",10.1016/j.tcs.2021.04.005,https://doi.org/10.1016/j.tcs.2021.04.005,International Colloquium on Theoretical Aspects of Computing,4,2018,yes,"The paper provides strong evidence of fundamental analysis through the study of guarded iteration, the analysis of computational primitives, and the theoretical examination of programming language constructs, meeting the fundamental analysis criterion.",yes,"The paper presents a strong formal mathematical framework through the use of symmetric monoidal categories, categorical semantics, formal operational semantics, and soundness and adequacy proofs, meeting the formal framework criterion.",yes,"The paper explicitly examines programming paradigms through the integration of guarded iteration with the call-by-value paradigm and the analysis of computational effects, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles through its focus on guarded iteration and its integration with the call-by-value paradigm, meeting the language design principles criterion.",yes,"The paper has a clear theoretical foundation through the axiomatic notion of guardedness, the categorical framework, and the mathematical semantics, meeting the theoretical foundation criterion.",yes,"The paper's implementation aspects, such as the operational semantics, serve to support the theoretical contributions, meeting the implementation focus criterion.",yes,"The paper clearly focuses on theoretical contributions, such as the development of a generic metalanguage, formal semantics, and theoretical foundations, rather than practical applications, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical investigation of programming language design, focusing on guarded iteration through a formal mathematical framework involving categorical semantics and operational analysis. The study provides a comprehensive examination of programming paradigms, theoretical foundations, and fundamental computational constructs, demonstrating strong alignment with theoretical research criteria. Its mathematical approach and exploration of computational principles offer significant insights into programming language design and theoretical understanding.",4.9
Conditional rewriting,"N. Dershowitz, D. Plaisted",10.1145/1012497.1012518,https://doi.org/10.1145/1012497.1012518,SOEN,9,1985,yes,The paper analyzes fundamental programming language constructs through the lens of conditional equations and paradigm combination.,maybe,"The mention of ""conditional (directed) equations"" and discussion of syntax and semantics suggests the use of a formal mathematical framework, though the depth is not entirely clear from the abstract.",yes,"The paper explicitly examines the combination of logic programming and functional programming paradigms, strongly meeting this criterion.",yes,"The paper discusses combining programming paradigms and their syntax/semantics, suggesting an investigation of fundamental design principles.",yes,"The paper appears to have a theoretical foundation, discussing programming paradigms and their mathematical representation through conditional equations.",maybe,"The abstract suggests the focus is on theoretical aspects rather than practical implementation, though it mentions potential implementation implications.",yes,"The paper appears to focus on theoretical contributions, specifically the combination of programming paradigms and their implications for verification.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research explores fundamental programming language design principles by examining the theoretical intersection of logic and functional programming paradigms through conditional equations. It demonstrates a strong theoretical foundation with potential implications for verification, focusing on mathematical representations of computational constructs rather than practical implementation. The study appears to contribute substantively to understanding programming language paradigms at a theoretical level.",4.6
Tackling the awkward squad for reactive programming: the actor-reactor model,"Sam Van den Vonder, Joeri De Koster, Florian Myter, W. Meuter",10.1145/3141858.3141863,https://doi.org/10.1145/3141858.3141863,REBLS@SPLASH,18,2017,yes,The paper analyzes fundamental programming language constructs and paradigm foundations at a theoretical level.,maybe,"The abstract does not explicitly mention formal mathematical frameworks, but the reference to Peyton Jones' work on monads and the proposal of a formal Actor-Reactor model suggests theoretical rigor. However, there is some uncertainty about the level of formality.",yes,"The paper directly examines programming paradigm foundations, specifically functional and reactive programming paradigms, and their theoretical integration.",yes,"The paper explicitly focuses on language design principles, specifically how to incorporate features into functional and reactive programming paradigms while maintaining paradigm purity.",maybe,"The paper appears to have a theoretical foundation, building on existing work (Peyton Jones) and proposing a new theoretical model (Actor-Reactor). However, the abstract does not explicitly detail the mathematical framework.",yes,"The abstract suggests the paper balances theoretical contributions with practical considerations, focusing on how to implement features while maintaining paradigm purity.",yes,The paper focuses on theoretical contributions to programming language design and paradigm integration rather than practical patterns or optimization.,yes,"The paper is written in English, meeting this criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Include,"The research explores fundamental programming language design principles by examining how to integrate challenging features into functional and reactive programming paradigms while maintaining theoretical purity. By proposing a novel Actor-Reactor model and building on existing theoretical foundations, the study contributes to understanding programming language constructs at a deep theoretical level. The work demonstrates strong alignment with criteria focused on paradigm theory, language design principles, and theoretical contributions.",4.6
19th international workshop on foundations of object-oriented languages (FOOL'12),"Jeremy G. Siek, Jonathan Aldrich, J. Boyland",10.1145/2384716.2384785,https://doi.org/10.1145/2384716.2384785,"ACM SIGPLAN International Conference on Systems, Programming, Languages and Applications: Software for Humanity",0,2012,yes,"The mention of ""key concepts of object-oriented languages"" and focus on foundations suggests that fundamental analysis is present, meeting the fundamental analysis criterion.",yes,"The abstract mentions ""type theory, semantics, program verification,"" indicating that formal mathematical frameworks are likely discussed, meeting the formal framework criterion.",yes,"The abstract explicitly mentions ""integration with other paradigms"" and discusses object-oriented language foundations, meeting the paradigm theory criterion.",yes,"The abstract explicitly mentions ""sound principles for object-oriented languages"" and discusses foundations, suggesting alignment with the language design principles criterion.",yes,"The focus on ""foundations of object-oriented languages"" and mention of type theory and semantics strongly suggests that theoretical foundations are present, meeting the theoretical foundation criterion.",yes,"The abstract doesn't mention implementation details, focusing instead on theoretical foundations, which is appropriate for the implementation focus criterion.",yes,"The workshop's focus on ""foundations"" and theoretical aspects rather than practical applications suggests strong theoretical contribution, meeting the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but as this appears to be a workshop paper, it is likely accessible through academic channels.",Include,"The abstract demonstrates a strong theoretical focus on object-oriented language foundations, explicitly addressing design principles, paradigm theory, and formal frameworks through references to type theory, semantics, and program verification. Its emphasis on fundamental analysis and theoretical contributions across multiple programming paradigms aligns closely with rigorous academic research criteria.",4.6
Categorical Model of Functional Language with Natural Numbers and Boolean Values,"J. Perh√°ƒç, Z. Bilanov√°",10.1109/CSIT49958.2020.9322039,https://doi.org/10.1109/CSIT49958.2020.9322039,International Conference on Computer Science and Information Technologies,2,2020,yes,"The paper analyzes fundamental programming language constructs through the lens of category theory and logic, examining computational primitives at a theoretical level.",yes,"The paper clearly uses formal mathematical frameworks, specifically category theory and intuitionistic logic, to analyze programming language properties.",yes,The paper explicitly examines the functional programming paradigm and its theoretical foundations through the Curry-Howard-Lambek isomorphism.,yes,"The paper discusses fundamental principles of functional programming through the Curry-Howard-Lambek isomorphism, which relates to language design principles.",yes,"The paper has a strong theoretical foundation, building on established mathematical frameworks (category theory, intuitionistic logic) and their correspondence to programming.",yes,"The abstract mentions a ""simple functional language"" and its modeling, but this appears to serve theoretical purposes rather than being the primary focus.",yes,"The paper appears to focus on theoretical contributions, examining fundamental correspondences between different theoretical frameworks rather than practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The study presents a rigorous theoretical exploration of programming language foundations through the Curry-Howard-Lambek isomorphism, utilizing formal mathematical frameworks like category theory and intuitionistic logic. By examining the correspondence between computational calculi, logic, and category theory, the research provides a deep theoretical analysis of functional programming paradigms and their fundamental computational principles. The work demonstrates strong alignment with theoretical research criteria, focusing on mathematical frameworks and paradigm foundations rather than practical implementation.",4.9
A history of the Oz multiparadigm language,"P. V. Roy, Seif Haridi, C. Schulte, G. Smolka",10.1145/3386333,https://doi.org/10.1145/3386333,Proc. ACM Program. Lang.,5,2020,yes,The paper analyzes fundamental programming language constructs through its kernel language and layered structure approach.,yes,"The abstract mentions a ""kernel language"" that is ""a formal model similar to a foundational calculus,"" indicating a formal mathematical framework.",yes,"The paper explicitly focuses on multiple programming paradigms and their theoretical integration, discussing how different paradigms can be used in different parts of programs.",yes,"The abstract explicitly discusses design principles, mentioning ""clean factored way"" and ""principles underlying the Oz design."" It also discusses orthogonality in terms of supporting multiple paradigms.",yes,"The paper discusses theoretical foundations through its kernel language and layered structure, with clear theoretical underpinnings from logic programming and concurrent constraint models.",yes,The implementation discussion (Mozart system) appears to support the theoretical contributions rather than being the primary focus.,yes,"While the paper includes practical aspects (implementation, education), it clearly focuses on theoretical contributions through its formal model and paradigm integration.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract does not provide information about the full-text accessibility of the paper. However, given that this appears to be a historical/technical paper about a well-known language (Oz), it is likely accessible through academic channels.",Include,"The abstract demonstrates a comprehensive exploration of programming language design principles, theoretical foundations, and paradigm integration through a rigorous examination of the Oz language. It presents a formal mathematical framework, analyzes fundamental computational constructs, and provides a theoretical contribution to understanding programming language design across multiple paradigms. The study's focus on theoretical foundations, kernel language modeling, and layered structure approach strongly aligns with advanced programming language research criteria.",4.9
Unifying Framework for Optimizations in non-boolean Formalisms,Yuliya Lierler,10.48550/arXiv.2206.07862,https://doi.org/10.48550/arXiv.2206.07862,Theory and Practice of Logic Programming,2,2022,yes,"The paper analyzes fundamental programming language constructs (optimization statements) at a theoretical level, examining their properties across different paradigms.",yes,"The paper explicitly mentions studying ""formal properties"" and presents a mathematical framework (""extended weight systems"") for analyzing programming language properties, indicating the use of a formal framework.",yes,"The paper explicitly examines multiple programming paradigms (integer linear programming, MaxSAT, optimization satisfiability modulo theory, answer set programming) and provides comparative theoretical analysis, indicating a focus on paradigm theory.",maybe,"The paper discusses programming languages and their design principles, particularly focusing on optimization statements and their representation. While not explicitly mentioning orthogonality or minimality, it does address fundamental design principles through its ""unifying framework.""",yes,"The paper proposes a formal framework for analyzing optimization statements across different paradigms and studies their formal properties, indicating a clear theoretical foundation.",maybe,The paper appears to use implementation aspects (different programming paradigms) to support broader theoretical contributions rather than focusing on practical implementation details.,yes,"The paper clearly focuses on theoretical contributions rather than practical aspects, as it aims to unify different paradigms through a theoretical framework and study formal properties.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A comprehensive theoretical study exploring programming language paradigms through a unifying mathematical framework, examining optimization statements across multiple computational domains. The research provides a rigorous formal analysis of language design principles, focusing on theoretical contributions that transcend practical implementation details. By investigating fundamental computational constructs and their properties, the study offers a sophisticated approach to understanding programming language foundations.",4.9
Parametrized programming in LILEANNA,W. Tracz,10.1145/162754.162815,https://doi.org/10.1145/162754.162815,ACM Symposium on Applied Computing,29,1993,yes,"The paper analyzes fundamental programming language constructs, particularly around parameterization and component integration, meeting the fundamental analysis criterion.",yes,"The abstract mentions ""formally specifying"" and discusses formal aspects of language design, suggesting the paper presents or utilizes a formal mathematical framework, meeting the formal framework criterion.",yes,"The paper explicitly focuses on programming paradigms, specifically discussing parameterized programming and software architectures, meeting the paradigm theory criterion.",yes,"The paper discusses parameterized programming paradigms and language design principles, particularly in the context of LILEANNA and its relationship to LIL and Ada, meeting the language design principles criterion.",yes,"The paper appears to have a theoretical foundation, discussing formal specification and parameterized programming paradigms, meeting the theoretical foundation criterion.",yes,"While implementation is discussed (LILEANNA), it appears to serve theoretical contributions about parameterized programming paradigms, meeting the implementation focus criterion.",yes,"The focus of the paper appears to be on theoretical contributions to programming paradigms and formal specification, rather than purely practical aspects, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"The abstract demonstrates strong alignment with theoretical programming language research, focusing on formal specification, parameterized programming paradigms, and fundamental language design principles. It presents a rigorous approach to analyzing programming language constructs through a formal framework, with particular emphasis on theoretical contributions to software architecture and language design. The study appears to provide a comprehensive theoretical examination of programming language foundations, meeting multiple screening criteria related to paradigm theory and formal analysis.",4.6
Constraints: A uniform model for data and control,L. Peter Deutsch,10.1145/960128.806893,https://doi.org/10.1145/960128.806893,"Workshop on Data Abstraction, Databases and Conceptual Modelling",3,1981,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically examining the nature of computation, data, and procedures.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, but it describes a theoretical model of computation with clear structural properties.",yes,The paper directly examines programming paradigm foundations by introducing a new paradigm (constraints) and comparing it with traditional procedural programming.,yes,The paper strongly addresses fundamental design principles by introducing a new paradigm that challenges traditional distinctions between data and procedures. It discusses orthogonality in how constraints can serve multiple purposes.,yes,"The paper presents a theoretical foundation for a new computational paradigm, describing how constraints work as a fundamental construct. The theoretical basis is clear, though mathematical formalism is not explicitly mentioned.",yes,"The abstract mentions implementation in Lisp, but this is used to support the theoretical contribution rather than focusing on practical aspects.",yes,The paper clearly contributes to theoretical understanding by introducing a new computational model. It is not focused on practical patterns or optimization.,yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A theoretical exploration of programming paradigms that introduces a novel computational model challenging traditional distinctions between data and procedures. The research presents a fundamental analysis of constraints as a computational construct, offering deep insights into programming language design principles and theoretical foundations. While demonstrating strong alignment with most screening criteria, the abstract leaves some uncertainty regarding explicit mathematical formalism.",4.6
Definitive programming : a paradigm for exploratory programming,S. Yung,-,-,-,8,1992,yes,"The paper analyzes fundamental programming language constructs, particularly around state representation and transitions, at a theoretical level.",maybe,"The abstract mentions ""underlying algebras"" and ""domain specific"" notations, suggesting some formal framework, but the depth of the mathematical treatment is not entirely clear from the abstract.",yes,"The paper explicitly develops and analyzes a new programming paradigm (definitive programming) and compares it with exploratory programming, strongly meeting this criterion.",yes,"The paper introduces a novel programming paradigm (definitive programming) and discusses fundamental design principles around state representation and transitions, meeting this criterion.",maybe,"The paper appears to have a theoretical foundation in its definition-based approach and state transition model, though the depth of mathematical formalism is not entirely clear from the abstract.",maybe,"The paper discusses tools and implementation aspects, but these appear to serve the theoretical contributions rather than being the primary focus.",yes,"The paper makes clear theoretical contributions through its novel programming paradigm and theoretical foundations, though it also has practical applications.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it appears to be a thesis.",Exclude,"A novel programming paradigm exploring definitive programming demonstrates strong theoretical foundations in language design, paradigm theory, and fundamental computational constructs. The research introduces a new approach to state representation and transitions, with clear theoretical contributions that balance conceptual innovation with potential practical applications. While some uncertainties exist regarding the depth of formal mathematical frameworks, the study presents a rigorous examination of programming language principles.",4.3
A Mathematical Model of Dialog,"Mark W. Johnson, P. McBurney, S. Parsons",10.1016/j.entcs.2005.05.015,https://doi.org/10.1016/j.entcs.2005.05.015,FInCo@ETAPS,33,2005,yes,The paper analyzes fundamental constructs of agent interaction languages and their mathematical properties.,yes,"The paper explicitly proposes ""the first mathematical theory"" and uses category-theoretic entities, indicating a rigorous formal framework.",yes,The paper examines a fundamental paradigm shift in computer science from isolated programs to multi-agent societies and provides theoretical analysis of this shift.,maybe,"The paper discusses language design for agent interaction, but does not explicitly address orthogonality or minimality. However, it does focus on fundamental design principles for agent interaction languages.",yes,"The paper presents a mathematical theory incorporating category-theoretic entities and formal semantics of agent interaction, providing a clear theoretical foundation.",yes,The paper appears to focus on theoretical contributions rather than implementation details.,yes,"The paper focuses on developing a mathematical theory rather than practical implementations or patterns, indicating a strong theoretical contribution.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous mathematical theory exploring agent interaction languages through category-theoretic frameworks demonstrates strong alignment with theoretical programming language research criteria. The study provides a fundamental analysis of computational paradigms, presenting a novel mathematical approach to understanding multi-agent system interactions at a theoretical level. Its focus on formal semantics and mathematical foundations comprehensively addresses key screening requirements for theoretical computer science research.",4.9
Reactive imperative programming with dataflow constraints,"C. Demetrescu, Irene Finocchi, Andrea Ribichini",10.1145/2048066.2048100,https://doi.org/10.1145/2048066.2048100,"Conference on Object-Oriented Programming Systems, Languages, and Applications",33,2011,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly how to handle reactive constraints and modify language semantics.",yes,"The abstract explicitly mentions ""formal semantics"" and describes a rigorous approach to analyzing programming language properties.",yes,"The research directly examines programming paradigm foundations, specifically the combination of imperative and dataflow paradigms.",yes,"The paper discusses fundamental design principles in combining imperative and dataflow paradigms, including orthogonality in how reactive objects can be of any legal type.",yes,"The paper presents a formal theoretical foundation for combining imperative and dataflow paradigms, including formal semantics.",yes,"The implementation discussion serves to support the theoretical contributions, showing how the theoretical framework can be practically realized. The implementation is not the sole focus.",yes,"While the paper includes practical implementation, its primary focus appears to be on theoretical contributions to understanding how to combine paradigms. The theoretical framework is central to the work.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature and implementation details of the paper suggest it is likely a formal academic paper that would be accessible, though this cannot be confirmed from the abstract alone.",Include,"The research presents a rigorous theoretical framework for combining imperative and dataflow programming paradigms, with a strong emphasis on formal semantics and fundamental language design principles. By exploring reactive constraints and paradigm integration, the study offers a comprehensive theoretical contribution that bridges computational theory with practical implementation strategies. The work demonstrates a sophisticated approach to analyzing programming language constructs through a formal, mathematically-grounded methodology.",4.6
Introducing a Calculus for Higher-Order Multiset Programming,"D. Cohen, J. M. Filho",10.1007/3-540-61052-9_43,https://doi.org/10.1007/3-540-61052-9_43,International Conference on Coordination Models and Languages,17,1996,yes,"The paper analyzes fundamental programming language constructs through its calculus and examines basic properties of the new formal system, meeting the fundamental analysis criterion.",yes,"The paper presents a formal calculus for reasoning about programs and discusses mathematical properties and translations between different formal systems (Lambda Calculus, Gamma), providing strong evidence of meeting the formal framework criterion.",yes,"The paper explicitly deals with multiple programming paradigms and provides a theoretical framework for reasoning about them through the chemical reaction metaphor, strongly meeting the paradigm theory criterion.",maybe,"The paper discusses a higher-order calculus for reasoning about programs across multiple paradigms, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",yes,"The paper presents a theoretical foundation through its calculus and demonstrates formal relationships with other theoretical frameworks, clearly meeting the theoretical foundation criterion.",yes,"The paper appears to focus on theoretical aspects rather than implementation, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions through its calculus and formal translations, rather than practical applications, clearly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical study presenting a higher-order calculus for reasoning about programming paradigms, demonstrating strong alignment with formal framework, theoretical foundation, and paradigm theory criteria. The research provides a mathematical approach to analyzing computational constructs across different programming paradigms, with a focus on theoretical contributions rather than practical implementations.",4.9
A Coq Library for Verification of Concurrent Programs,"Reynald Affeldt, N. Kobayashi",10.1016/j.entcs.2007.11.010,https://doi.org/10.1016/j.entcs.2007.11.010,LFM@IJCAR,18,2008,yes,The paper analyzes fundamental concurrent programming constructs at a theoretical level through formal verification.,yes,"The paper uses Coq proof assistant and formalizes œÄ-calculus for verification purposes, presenting a clear formal mathematical framework.",maybe,"The paper examines the concurrency paradigm, but it focuses more on verification than theoretical foundations of paradigms.",no,"The paper focuses on verification of concurrent programs rather than language design principles specifically. While it deals with œÄ-calculus, it's more focused on verification than language design principles.",yes,The paper presents a formal theoretical foundation using œÄ-calculus and spatial logics for concurrent program verification.,yes,The implementation aspects (library and verification) serve to support the theoretical contributions rather than being the primary focus.,yes,"The paper makes theoretical contributions through its formal framework and verification approach, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text of the paper is likely accessible through academic channels, even though it cannot be determined from the abstract alone.",Exclude,"The research presents a rigorous formal framework for concurrent program verification using œÄ-calculus and spatial logics, demonstrating strong theoretical contributions in programming language analysis. While primarily focused on verification techniques rather than language design principles, the study offers a sophisticated mathematical approach to understanding computational paradigms through formal proof assistants. The work's theoretical depth and systematic methodology align closely with the screening criteria's emphasis on fundamental programming language research.",4.3
Programming Languages and Operational Semantics,M. Fern√°ndez,10.1007/978-1-4471-6368-8,https://doi.org/10.1007/978-1-4471-6368-8,Undergraduate Topics in Computer Science,11,2014,maybe,"The mention of ""essential concepts"" and operational semantics suggests fundamental analysis, though the abstract is too brief to confirm the depth of this analysis.",yes,"The abstract explicitly mentions ""operational semantics techniques,"" which is a formal mathematical framework for analyzing programming languages, indicating that the study presents or utilizes a formal framework.",yes,"The abstract explicitly mentions ""alternative programming language paradigms,"" indicating that the research examines programming paradigm foundations.",maybe,"The abstract mentions ""essential concepts"" but does not explicitly discuss orthogonality or minimality, so there is insufficient information to determine if the study investigates language design principles.",maybe,"The use of operational semantics suggests a theoretical foundation, though the abstract is too brief to confirm the depth of this foundation.",maybe,The abstract does not provide enough information to determine if the study's discussion of implementation or tools serves to support broader theoretical contributions or focuses solely on practical aspects.,maybe,"The focus on operational semantics and paradigms suggests theoretical contribution rather than practical focus, though the abstract is too brief to be certain.",yes,"The abstract is written in English, which meets the publication language criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"The abstract demonstrates strong potential for theoretical programming language analysis through its focus on operational semantics and alternative paradigms. While the extremely brief text creates uncertainty about comprehensive coverage, the explicit mention of formal techniques suggests a rigorous theoretical approach to programming language foundations. The incomplete nature of the abstract limits definitive assessment of its full theoretical depth.",4.2
"Choreographies, Divided and Conquered","L. Cruz-Filipe, F. Montesi",-,-,arXiv.org,5,2016,yes,"The study analyzes fundamental programming language constructs at a theoretical level, particularly focusing on concurrent programming primitives and communication structures.",yes,"The paper presents strong evidence of formal framework usage, including the mention of ""typing discipline,"" ""decidable type checking,"" and ""type inference,"" indicating rigorous formal analysis. The EndPoint Projection (EPP) synthesis also suggests formal mathematical foundations.",yes,"The paper directly examines programming paradigm foundations, specifically focusing on choreographic programming as a paradigm for concurrent software development. It provides theoretical analysis of this paradigm's capabilities and limitations.",yes,"The paper clearly investigates fundamental design principles in programming languages, specifically focusing on choreographic programming and its extensions. The introduction of reusable choreographic procedures and parameterization represents significant language design work.",yes,"The paper presents clear theoretical foundations, including type systems, formal synthesis of implementations, and theoretical properties like ""implicit parallelism"" and ""transparent projection.""",yes,The implementation aspects (EPP synthesis) serve to support the theoretical contributions rather than being the primary focus. The paper maintains a strong theoretical orientation while providing practical applications.,yes,"The paper makes clear theoretical contributions, introducing new language features and theoretical foundations rather than focusing on practical implementations alone. The emphasis on formal properties and theoretical analysis is strong.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but this is a common limitation in screening.",Include,"This research presents a rigorous theoretical investigation of choreographic programming, introducing novel language design principles and formal frameworks for concurrent software development. The study offers significant contributions to programming language theory, focusing on fundamental constructs, type systems, and paradigm foundations while maintaining a strong theoretical orientation. By exploring reusable choreographic procedures and their theoretical implications, the work advances understanding of concurrent programming paradigms through a mathematically grounded approach.",4.9
A verified integration of parallel programming paradigms in CC++,P. Sivilotti,10.1109/IPPS.1994.288320,https://doi.org/10.1109/IPPS.1994.288320,Proceedings of 8th International Parallel Processing Symposium,8,1994,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly regarding concurrency and parallelism, meeting the fundamental analysis criterion.",yes,"The abstract explicitly mentions ""formally verify"" and discusses equivalence proofs between different programming paradigms, indicating a formal mathematical framework is used, meeting the formal framework criterion.",yes,"The paper explicitly compares and analyzes different programming paradigms (object-oriented, imperative, monitors, asynchronous channels) and their theoretical relationships, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of CC++ including parallel composition, atomic functions, and single-assignment variables, meeting the language design principles criterion.",yes,"The paper appears to have a strong theoretical foundation, showing equivalence between different programming paradigms and providing formal verification, meeting the theoretical foundation criterion.",yes,"While implementation is mentioned (""specify, implement""), it appears to serve the theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper makes clear theoretical contributions by establishing equivalences between paradigms and providing formal verification, rather than focusing on practical aspects, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical analysis of programming language paradigms, focusing on formal verification and equivalence between different computational models. By examining CC++'s object-oriented parallel programming approach and establishing mathematical relationships between traditional imperative communication models, the study demonstrates a strong theoretical foundation in programming language design principles. The work contributes substantive insights into fundamental computational constructs through a formal, paradigm-comparative framework.",4.6
Integrating formal models into the programming languages course,"A. Tucker, R. E. Noonan",10.1145/563340.563474,https://doi.org/10.1145/563340.563474,Technical Symposium on Computer Science Education,2,2002,maybe,"The paper appears to analyze fundamental programming language constructs through formal semantics, though the depth of analysis is not clear.",yes,"The paper explicitly mentions ""formal semantics"" and ""formal models,"" strongly indicating the use of a formal mathematical framework.",yes,"The paper explicitly mentions comparing object-oriented, functional, and logic paradigms, meeting this criterion.",maybe,"The abstract does not explicitly mention orthogonality or minimality, and it is unclear if the paper covers fundamental design principles.",maybe,"The paper appears to have a theoretical foundation through its formal semantics approach, though the depth is not entirely clear from the abstract.",maybe,"The paper discusses implementation across multiple paradigms, but it is unclear if this serves broader theoretical contributions or is primarily pedagogical.",maybe,"The focus appears to be on theoretical aspects through formal semantics, though it is presented in an educational context.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates strong alignment with formal framework and paradigm theory criteria through its discussion of formal semantics across multiple programming paradigms. While showing theoretical potential, the educational context introduces some uncertainty about the depth of theoretical contribution versus pedagogical focus. The paper appears to meet several key screening criteria, particularly around formal analysis and paradigm comparison.",4
"A feature model of actor, agent, functional, object, and procedural programming languages","Howell R. Jordan, Goetz Botterweck, J. Noll, A. Butterfield, Rem W. Collier",10.1016/j.scico.2014.02.009,https://doi.org/10.1016/j.scico.2014.02.009,Science of Computer Programming,13,2015,maybe,"The paper analyzes fundamental programming language constructs through its feature model, though the level of theoretical depth is not entirely clear from the abstract.",no,"The abstract mentions a ""feature model"" but does not indicate whether it is formally mathematical. The approach seems more structured than formal.",yes,"The paper explicitly examines programming paradigms (actor-oriented, agent-oriented, functional, object-oriented, and procedural) and provides comparative theoretical analysis.",no,"The paper discusses programming language features and comparison criteria, but does not explicitly focus on orthogonality or minimality. It is more focused on comparative analysis of paradigms.",no,"While the paper presents a structured approach to language comparison, it does not explicitly mention mathematical foundations. The focus appears more empirical and comparative.",maybe,The paper discusses implementation aspects (feature model) in service of broader theoretical contributions about language comparison and paradigms.,maybe,"The paper aims to contribute to theoretical understanding by providing a structured framework for comparing languages, though it has practical applications. The focus appears balanced between theoretical and practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The academic nature of the paper suggests it is likely accessible, though this cannot be determined from the abstract alone.",Exclude,"The study presents a comparative framework for programming language paradigms, demonstrating strong theoretical orientation in examining actor-oriented, agent-oriented, functional, object-oriented, and procedural language categories. While the research offers a structured approach to language comparison, it lacks a rigorous formal mathematical framework, potentially limiting its depth of theoretical analysis. The work appears to balance practical and theoretical contributions, with a focus on developing a feature model for comparative language assessment.",3.5
The Repeated Demise of Logic Programming and Why It Will Be Reincarnated,C. Hewitt,-,-,AAAI Spring Symposium: What Went Wrong and Why: Lessons from AI Research and Applications,8,2006,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on concurrent computation primitives and their mathematical properties.",yes,"The paper presents a formal mathematical framework for analyzing programming language properties, specifically the Actor model's mathematical semantics and its relationship to denotational semantics.",yes,"The paper explicitly examines programming paradigm foundations, comparing logical and procedural approaches, and provides theoretical analysis of different paradigms (Actor model vs. logic programming).",yes,"The paper discusses fundamental design principles of programming languages, particularly focusing on the Actor model and its relationship to logic programming, and examines orthogonality in terms of how different programming paradigms interact.",yes,"The paper has a strong theoretical foundation, including mathematical semantics, formal definitions of Actor behavior, and theoretical analysis of concurrent computation.",yes,The paper uses implementation examples to support theoretical contributions rather than focusing solely on practical aspects.,yes,"The paper makes clear theoretical contributions, particularly in analyzing the limitations of logic programming for concurrent computation and the theoretical foundations of the Actor model.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given its academic nature and historical context, though this cannot be confirmed from the abstract alone.",Include,"The document presents a rigorous theoretical exploration of programming language paradigms, focusing on the Actor model and its mathematical semantics, with strong emphasis on formal frameworks and fundamental computational principles. It provides a comprehensive analysis of concurrent computation, examining the theoretical limitations of logic programming and offering deep insights into programming language design and paradigm foundations. The work demonstrates significant theoretical contributions through its mathematical approach to understanding computational primitives and paradigm interactions.",4.9
Generic Programming with Concepts,-,-,-,-,9,2008,yes,"The paper provides strong evidence of fundamental analysis, including analysis of type checking, semantic specifications, programming language constructs, and generic programming fundamentals.",yes,"The paper presents multiple formal frameworks, including formal semantics of concepts, mathematical foundations of concepts, an institutional semantics framework, and algebraic specification techniques.",yes,"The paper explicitly examines programming paradigms, including multi-paradigm development, comparison between imperative (C++) and functional (Haskell) paradigms, and datatype-generic paradigm analysis.",yes,"The paper strongly addresses language design principles through its formal analysis of generic programming and concepts in C++. It examines fundamental design principles of programming languages, particularly focusing on type checking and semantic specifications.",yes,"The paper provides strong evidence of theoretical foundations, including formal semantics development, mathematical foundations of concepts, an institutional logic framework, and theoretical analysis of generic programming.",yes,"The paper balances theoretical and practical aspects, with tools and implementation discussed (change impact analysis, component composition) serving to support theoretical contributions rather than being the primary focus.",yes,"The paper makes substantial theoretical contributions, including formal semantics development, mathematical foundations, theoretical analysis of generic programming, and paradigm comparisons.",yes,"The paper is written in English, meeting the language requirement.",maybe,"The paper appears to be a thesis with seven publications, suggesting it is likely accessible through academic channels, though this is not explicitly confirmed in the abstract.",Include,"This comprehensive thesis provides a rigorous theoretical exploration of generic programming, presenting multiple formal frameworks and mathematical foundations across programming paradigms. The research deeply examines language design principles, semantic specifications, and computational constructs through a sophisticated theoretical lens, with strong contributions to understanding programming language fundamentals. By bridging theoretical analysis with practical implementation considerations, the study offers a nuanced investigation of generic programming's conceptual and mathematical underpinnings.",4.9
"Ghosts of programming past, present and yet to come","R. Boyatt, Megan Beynon, M. Beynon",-,-,Annual Workshop of the Psychology of Programming Interest Group,6,2014,yes,The paper analyzes fundamental questions about the nature of programming and its theoretical foundations.,maybe,"While Turing's characterization is mentioned, the paper does not appear to present a new formal mathematical framework. It seems more philosophical in nature.",yes,"The abstract explicitly mentions programming paradigms and discusses different approaches to programming (e.g., SCRATCH and Go).",yes,"The paper discusses programming language semantics and abstract programming constructs, though not as its primary focus.",maybe,"The paper references Turing's characterization and discusses theoretical aspects of programming, but appears to focus more on conceptual analysis than mathematical frameworks.",yes,The paper appears to focus on theoretical aspects rather than practical implementation details.,yes,"The paper makes a theoretical contribution by proposing a new conceptual framework (""making construals"") and analyzing the evolution of programming concepts.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but I notes that being a PPIG paper suggests it is likely accessible.",Exclude,"The abstract presents a theoretical exploration of programming concepts, engaging with fundamental questions about language design, paradigms, and computational thinking. While meeting most screening criteria through its philosophical analysis of programming's theoretical foundations, the paper's conceptual approach creates some uncertainty regarding its alignment with strict formal mathematical frameworks. The study offers a nuanced examination of programming's evolving nature, proposing a new conceptual framework that challenges traditional understandings of computational activity.",4
Formal Definition of an Agent-Object Programming Language,"Francesco Pagliarecci, L. Spalazzi, G. Capuzzi",10.1109/CTS.2006.44,https://doi.org/10.1109/CTS.2006.44,International Conference on Collaboration Technologies and Systems,5,2006,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in the context of paradigm integration, meeting the fundamental analysis criterion.",yes,"The paper explicitly uses Maude (a rewriting logic language) for formal specification and mentions formal modeling and reasoning capabilities, strongly meeting the formal framework criterion.",yes,"The paper directly examines the integration of two programming paradigms (agent-oriented and object-oriented) and their fundamental properties, strongly meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles by examining how to integrate agent-oriented and object-oriented programming paradigms, including core concepts like encapsulation, inheritance, and polymorphism.",yes,"The paper presents a formal definition of the language and discusses operational semantics, with explicit mention of formal modeling and reasoning, clearly meeting the theoretical foundation criterion.",yes,"The paper appears to use implementation (Maude) as a tool to support theoretical contributions, meeting the implementation focus criterion.",yes,"The focus of the paper is on theoretical foundations and formal specification rather than practical implementation details, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of programming language design, focusing on the formal integration of agent-oriented and object-oriented paradigms through a mathematical framework. The study employs Maude's rewriting logic to provide a comprehensive formal specification, enabling deep analysis of computational constructs and paradigm foundations. By presenting a systematic approach to language design principles, the research contributes substantively to theoretical understanding of programming language structures.",4.9
Object-Oriented Modeling of Programming Paradigms,"M. H. Emden, S. C. Somosan",-,-,arXiv.org,0,2006,no,"While the paper discusses programming paradigms, it does not appear to analyze fundamental constructs at a theoretical level. Instead, it focuses on how to implement different paradigms through OOP.",no,The abstract does not indicate any formal mathematical framework or verification approach. The approach seems more conceptual and practical.,yes,"The paper explicitly examines programming paradigms (functional, logic, dataflow, constraint programming) and their relationship to OOP. However, it appears to focus more on practical implementation than theoretical foundations.",no,"The paper discusses programming paradigms and their implementation, but does not explicitly focus on orthogonality or minimality. It is more focused on paradigm implementation through OOP.",no,"While the paper discusses programming paradigms, it does not appear to present a formal theoretical foundation. The focus seems to be on practical implementation through OOP modeling.",no,The paper appears to be primarily focused on practical implementation aspects rather than using implementation to support theoretical contributions.,no,"The paper seems to focus more on practical implementation and productivity rather than theoretical contributions. The emphasis is on ""increasing productivity"" and ""management of software development.""",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The paper primarily addresses programming paradigms from a practical implementation perspective, with limited theoretical depth and no evident formal mathematical framework. While discussing paradigm relationships through object-oriented modeling, the work lacks rigorous theoretical foundations and focuses more on productivity and software development management. Consequently, the study does not strongly align with the screening criteria emphasizing theoretical analysis and formal frameworks.",2.8
Multiparadigm programming: guest editors' introduction.,"D. Wampler, T. Clark",-,-,-,3,2010,yes,The abstract indicates analysis of fundamental programming language constructs (abstractions) at a theoretical level.,no,The abstract does not indicate the use of any formal mathematical frameworks or verification approaches.,yes,"The abstract directly addresses programming paradigms and their theoretical basis, discussing how collections of abstractions constitute paradigms.",maybe,"The abstract mentions ""coherent, often ideologically or theoretically based abstractions"" which suggests some discussion of design principles, but it's not explicitly focused on orthogonality or minimality.",maybe,"While the abstract discusses theoretical aspects of programming paradigms, it does not explicitly mention formal theoretical foundations or mathematical frameworks.",yes,"The abstract discusses implementation features (abstractions) in the context of theoretical paradigms, suggesting appropriate balance.",yes,"The abstract suggests a theoretical focus on understanding programming paradigms and their relationship to programming technologies, rather than practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"The abstract demonstrates a strong theoretical approach to programming paradigms, with clear focus on fundamental language constructs and their conceptual foundations. While showing promising alignment with theoretical screening criteria, the text lacks explicit evidence of formal mathematical frameworks or rigorous verification methods. The discussion suggests a conceptual exploration of programming abstractions and their paradigmatic relationships.",3.9
Reasoning about Iteration and Recursion Uniformly based on Big-step Semantics,"Ximeng Li, Qianying Zhang, Guohui Wang, Zhiping Shi, Yong Guan",10.1007/978-3-030-91265-9_4,https://doi.org/10.1007/978-3-030-91265-9_4,"International Symposium on Software Engineering: Theories, Tools, and Applications",3,2021,yes,"The paper analyzes fundamental programming constructs (iteration and recursion) at a theoretical level, meeting this criterion.",yes,"The paper presents a formal mathematical framework for program verification, including ""big-step operational semantics"" and formal proofs of soundness and relative completeness, strongly meeting this criterion.",maybe,"The paper examines both imperative and functional paradigms, though this appears to be in service of the verification framework rather than a primary focus on paradigm theory, partially meeting this criterion.",no,"The paper focuses on verification techniques rather than language design principles specifically, and does not explicitly address orthogonality or minimality.",yes,"The paper provides a formal theoretical foundation for program verification, with inductive proofs and mechanized results in Coq, clearly meeting this criterion.",yes,"The implementation aspects (Coq mechanization) serve to support the theoretical contributions rather than being the primary focus, meeting this criterion.",yes,"The paper makes clear theoretical contributions to program verification, focusing on formal reasoning rather than practical aspects, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The mention of the Coq proof assistant suggests the full text of the paper is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical framework for program verification across programming paradigms, utilizing formal mathematical techniques and mechanized proofs in Coq. The study provides a comprehensive approach to analyzing fundamental programming constructs like iteration and recursion, with a strong emphasis on theoretical foundations and formal reasoning. By addressing both imperative and functional programming paradigms, the work offers a sophisticated method for sound reasoning about computational semantics.",4.6
"Semantics, Logic, and Verification of ""Exact Real Computation""","F. Brau√üe, P. Collins, Johannes Kanig, SunYoung Kim, M. Koneƒçn√Ω, Gyesik Lee, N. M√ºller, E. Neumann, Sewon Park, N. Preining, M. Ziegler",-,-,-,5,2016,yes,"The paper strongly meets the fundamental analysis criterion through the analysis of fundamental computational primitives, theoretical examination of real number computation, and investigation of basic numerical problems at a theoretical level.",yes,"The paper strongly meets the formal framework criterion by presenting a formal mathematical framework including rigorous semantics for the language, proof of Turing-completeness, first-order theory over two sorts, Hoare Logic extensions, and formal correctness proofs.",yes,"The paper meets the paradigm theory criterion by introducing a new paradigm (ERC), providing theoretical analysis of computational paradigms, and examining fundamental properties of real computation.",yes,"The paper strongly meets the language design principles criterion by presenting a formal language design for exact real computation, including specific design principles for handling continuous structures and rigorous semantics.",yes,"The paper clearly meets the theoretical foundation criterion with a mathematical framework for exact real computation, formal semantics, theoretical foundations in Recursive Analysis, and a first-order theory with decidability and model completeness proofs.",yes,"The paper meets the implementation focus criterion well, as the implementation examples provided (numerical problems) serve to demonstrate and support the theoretical contributions rather than being the primary focus.",yes,"The paper strongly meets the theoretical contribution criterion, with its primary focus being theoretical, including formal language design, mathematical foundations, theoretical proofs, and paradigm development.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical framework for exact real computation, demonstrating strong alignment with programming language design principles, formal mathematical foundations, and paradigm theory. The study offers a comprehensive theoretical contribution through its formal language design, mathematical proofs, and analysis of computational primitives, with implementation examples serving to support its fundamental theoretical insights.",4.9
Formal Foundations for Aspects,R. Jagadeesan,10.1007/978-3-540-71389-0_1,https://doi.org/10.1007/978-3-540-71389-0_1,Foundations of Software Science and Computation Structure,0,2007,yes,The paper analyzes fundamental aspects of programming paradigms and their theoretical foundations.,maybe,"The abstract mentions ""foundational playing field"" and comparison with ""stateful higher order programs,"" suggesting some formal analysis, but does not explicitly state the use of mathematical frameworks.",yes,The paper explicitly examines aspects across multiple programming paradigms and aims to establish theoretical foundations.,maybe,"The paper discusses aspects across multiple programming paradigms, suggesting analysis of fundamental design principles, though it does not explicitly mention orthogonality or minimality.",maybe,"The focus on ""foundational playing field"" and comparison with other paradigms suggests theoretical foundations, though the specific mathematical framework is not detailed.",yes,The abstract suggests a theoretical focus rather than implementation details.,yes,"The paper appears to focus on theoretical contributions, specifically addressing the foundational aspects of aspects compared to other paradigms.",yes,"The paper is written in English, meeting this criterion.",maybe,"The abstract suggests the paper may be available through academic channels, but this cannot be determined from the abstract alone.",Exclude,"The abstract demonstrates a strong theoretical approach to programming paradigms, particularly focusing on aspects across different language models with a comparative theoretical analysis. While the study appears to contribute fundamentally to understanding programming language foundations, the lack of explicit formal mathematical frameworks creates some uncertainty about its methodological rigor. The research seems primarily oriented toward theoretical contributions rather than practical implementation details.",4.3
Towards a Programming Language for Interaction Nets,I. Mackie,10.1016/j.entcs.2005.02.015,https://doi.org/10.1016/j.entcs.2005.02.015,TERMGRAPH,8,2005,maybe,"While interaction nets are fundamental constructs, the abstract suggests the paper focuses more on building a practical programming language rather than analyzing fundamental properties.",maybe,"While interaction nets have formal foundations, the abstract does not explicitly indicate whether the paper presents or utilizes a formal mathematical framework.",yes,"The paper explicitly discusses programming paradigms, comparing interaction nets to functional programming and the Œª-calculus, meeting this criterion.",maybe,"The paper appears to focus on developing a programming language for interaction nets, which involves language design principles, but it does not explicitly mention orthogonality or minimality.",maybe,"The paper builds on interaction nets, which have theoretical foundations, but the abstract suggests a more practical focus on developing a programming language.",maybe,The paper appears to focus on practical language development rather than using implementation to support theoretical contributions.,maybe,"The abstract suggests the paper aims to make a ""first step"" in defining a programming language, which could be theoretical, but the focus appears more practical (adding ""syntactic sugar, language constructs, data-structures"").",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates partial alignment with theoretical programming language research criteria, particularly in paradigm theory and fundamental constructs. While addressing interaction nets and programming language development, the study appears more oriented towards practical language design than rigorous theoretical analysis. The work shows potential theoretical relevance but lacks explicit evidence of comprehensive formal frameworks or deep theoretical contributions.",3.5
"A Proposal to Merge Object Orientation, Logic Programming, and Multiple Tuple Spaces","V. Ambriola, G. A. Cignoni, L. Semini",-,-,ICLP Workshop: Process-Based Parallel Logic Programming,4,1994,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, examining how different paradigms can be integrated, strongly matching this criterion.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, but the discussion of declarative definitions and formal properties suggests some theoretical rigor.",yes,"The paper directly examines programming paradigm foundations, specifically the integration of object orientation, logic programming, and tuple spaces, strongly matching this criterion.",yes,"The paper explicitly discusses orthogonality and fundamental design principles in combining programming paradigms, strongly matching this criterion.",maybe,"The paper discusses theoretical foundations of programming paradigms and their integration, though the depth of the mathematical framework is not clear from the abstract, resulting in a moderate match.",yes,"The abstract suggests the focus is on theoretical integration rather than implementation details, meeting this criterion.",yes,"The paper focuses on theoretical integration of paradigms rather than practical implementation details, strongly matching this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research explores a novel programming paradigm by integrating object orientation, logic programming, and multiple tuple spaces, demonstrating strong theoretical foundations in language design principles. By examining the orthogonal dimensions of programming paradigms and their potential integration, the study offers a rigorous theoretical contribution to understanding computational frameworks and paradigm interactions.",4.6
uu for programming languages,Ulisses Ferreira,10.1145/360271.360273,https://doi.org/10.1145/360271.360273,SIGP,6,2000,yes,"The paper analyzes fundamental programming language constructs through the lens of ""uu"" and its role in handling unknown information.",maybe,"The abstract doesn't explicitly mention formal mathematical frameworks or verification approaches. While it discusses theoretical relationships between paradigms, the level of formality is unclear.",yes,"The paper explicitly discusses programming paradigms and their unification through the ""uu"" concept, including relationships between paradigms.",maybe,"The paper discusses a fundamental language feature (""uu"") and its implications for programming paradigms, suggesting investigation of design principles. However, it's not explicitly clear if it addresses orthogonality or minimality.",maybe,"The paper appears to have some theoretical foundation in discussing ""uu"" as a fundamental value and its relationship to programming paradigms, but the depth of mathematical framework isn't clear from the abstract.",yes,"The abstract mentions implementation is ""briefly discussed,"" suggesting it serves to support theoretical contributions rather than being the primary focus.",yes,"The paper appears to make theoretical contributions by introducing a fundamental concept (""uu"") and exploring its implications for programming paradigms, rather than focusing on practical aspects alone.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores a novel programming language concept (""uu"") that addresses handling unknown information across programming paradigms, demonstrating strong theoretical contributions in language design and paradigm analysis. While the study shows promise in examining fundamental programming constructs, uncertainties remain regarding the depth of formal mathematical frameworks and the comprehensive theoretical treatment of the proposed concept.",4.3
Functional Programming and Metamodeling frameworks for System Design,D. Mathaikutty,-,-,-,5,2005,yes,"The paper analyzes fundamental programming language constructs and computational primitives at a theoretical level, particularly in the context of heterogeneous systems, indicating it analyzes fundamental programming language constructs or computational primitives at a theoretical level.",yes,"The paper explicitly discusses formal semantics, denotational semantics, and formal reasoning capabilities. It mentions formal verification through SMV-based templates, indicating it presents or utilizes a formal mathematical framework or rigorous verification approach.",yes,"The paper analyzes different models of computation (MoCs) and their theoretical foundations, including function-based semantic definitions, indicating it examines programming paradigm foundations or provides comparative theoretical analysis of paradigms.",yes,"The paper discusses language design principles, particularly in the context of SML-Sys and its formal semantic underpinnings. It addresses orthogonality through its treatment of heterogeneous MoCs.",yes,"The paper is built on formal theoretical foundations, including denotational semantics and formal refinement strategies with semantic preservation, indicating it includes a formal theoretical foundation or mathematical framework to support its claims.",yes,"While implementation aspects are discussed (EWD, GME, XML translation), these serve to support the broader theoretical contributions rather than being the primary focus, indicating the study's discussion of implementation or tools serves to support broader theoretical contributions.",yes,"The paper focuses on theoretical contributions including formal semantics, refinement methodologies, and theoretical foundations for heterogeneous systems, indicating it contributes to theoretical understanding rather than focusing exclusively on practical patterns, optimization, or educational aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature and academic context of the paper suggest it is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical framework for heterogeneous system design, focusing on formal semantics, computational models, and semantic preservation across programming paradigms. The study offers a comprehensive approach to system-level design languages, addressing fundamental theoretical challenges through a functional programming framework with strong mathematical foundations. By developing a novel methodology for modeling and analyzing complex distributed systems, the research contributes significant theoretical insights into programming language design and computational modeling.",4.9
"On Semantic Link Between Logic , Object-Oriented , Functional and Constraint Programming ?",A. Morozov,-,-,-,7,2002,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in examining paradigm relationships and constraint properties.",yes,"The paper appears to use formal mathematical frameworks, particularly in discussing model-theoretic semantics and mathematical properties of constraints. The mention of ""mathematical property"" regarding completeness suggests formal analysis.",yes,"The paper explicitly examines multiple programming paradigms (object-oriented, logic, functional, and constraint programming) and their relationships.",yes,"The paper examines fundamental design principles by investigating semantic and operational links between different programming paradigms, including how features are implemented in Actor Prolog.",yes,"The study clearly has a theoretical foundation, examining semantic and operational links between paradigms and discussing model-theoretic semantics. The focus on mathematical properties indicates strong theoretical grounding.",yes,The implementation discussion (Actor Prolog) serves to support broader theoretical contributions about paradigm relationships and constraint properties.,yes,The paper makes theoretical contributions by analyzing paradigm relationships and developing new theoretical understanding of constraint implementation. It's not focused on practical patterns or optimization.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical investigation of programming paradigms, examining semantic and operational links across object-oriented, logic, functional, and constraint programming through a formal mathematical framework. By analyzing fundamental language constructs and developing novel insights into constraint implementation, the study demonstrates a deep theoretical contribution to understanding programming language principles. The work's focus on mathematical properties and paradigm relationships strongly aligns with theoretical research objectives.",4.9
A survey of constraint-based programming paradigms,"M. Buscemi, U. Montanari",10.1016/j.cosrev.2008.10.001,https://doi.org/10.1016/j.cosrev.2008.10.001,Computer Science Review,16,2008,yes,"The paper analyzes fundamental programming language constructs (constraints) at a theoretical level, meeting this criterion.",yes,"The abstract explicitly mentions ""formalisms"" and discusses formal approaches like Constraint Satisfaction Problems and Constraint Logic Programming, strongly meeting this criterion.",yes,"The paper examines programming paradigms through the lens of constraint-based programming, comparing different approaches (CSP, CLP, CCP), meeting this criterion.",maybe,"The paper discusses fundamental programming language concepts (constraints) and their relationship to programming paradigms, partially meeting this criterion.",yes,"The paper appears to focus on theoretical foundations, discussing formal approaches and their properties, meeting this criterion.",yes,"The abstract suggests a theoretical focus rather than implementation details, meeting this criterion.",yes,"The paper appears to focus on theoretical understanding, discussing formal approaches and their properties rather than practical applications, meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility cannot be determined from the abstract alone, but the fact that it is a survey paper suggests wider availability.",Include,"A comprehensive survey exploring constraint-based programming paradigms through formal mathematical frameworks, examining fundamental language constructs and theoretical approaches across multiple programming models. The research demonstrates strong alignment with theoretical screening criteria, focusing on paradigm foundations, formal analysis, and comparative theoretical investigation of computational principles. Rigorous examination of constraint satisfaction problems, logic programming, and concurrent constraint programming provides a deep theoretical exploration of programming language design principles.",4.6
Integration of declarative and constraint programming,"Petra Hofstedt, P. Pepper",10.1017/S1471068406002833,https://doi.org/10.1017/S1471068406002833,Theory and Practice of Logic Programming,15,2005,yes,The paper analyzes fundamental aspects of programming paradigms and their integration at a theoretical level.,maybe,"The abstract mentions studying ""syntactic, semantic and operational impacts,"" suggesting a formal analytical approach, though the specific mathematical framework is not detailed.",yes,"The paper explicitly focuses on integrating different language paradigms and studying their theoretical aspects, strongly meeting this criterion.",maybe,"The paper discusses integrating different language paradigms into a unified framework, which relates to fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,"The paper appears to have a theoretical foundation in studying the integration of programming paradigms, particularly declarative and constraint programming.",maybe,"The abstract suggests the focus is on theoretical integration rather than practical implementation, though it mentions ""existing constraint solvers.""",yes,"The paper appears to focus on theoretical contributions rather than practical aspects, studying the fundamental integration of paradigms.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores the theoretical integration of programming paradigms, focusing on the syntactic, semantic, and operational aspects of combining declarative and constraint programming approaches. By examining fundamental language design principles and paradigm foundations, the study contributes to theoretical understanding of computational frameworks beyond practical implementation considerations. The work demonstrates a rigorous approach to analyzing programming language constructs at a conceptual level.",4.3
Systematic parallel programming (formal program development),"J. Dingel, S. Brookes",-,-,-,5,2000,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on concurrency primitives and their formal properties.",yes,"The paper presents a ""refinement calculus"" with formal mathematical foundations, including ""compositional trace semantics"" and ""context-sensitive notion of trace inclusion.""",yes,The paper explicitly examines and compares different programming paradigms (shared-variable vs. message-passing concurrency) and provides theoretical analysis of their relationships.,yes,"The paper discusses formal design principles for parallel programming, including orthogonality between shared-variable and message-passing concurrency paradigms.",yes,"The paper develops a formal theoretical foundation for parallel programming, including mathematical frameworks for specification and verification.",yes,"While implementations are discussed (e.g., mutual exclusion algorithm), they serve to illustrate and support the theoretical framework rather than being the primary focus.",yes,"The paper's primary focus is on theoretical contributions, developing a formal calculus and theoretical framework rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it appears to be a thesis.",Include,"A comprehensive theoretical exploration of parallel programming paradigms, presenting a rigorous formal calculus that systematically addresses concurrency design principles through mathematical frameworks. The research provides a deep theoretical analysis of shared-variable and message-passing concurrency, offering a sophisticated approach to understanding fundamental programming language constructs. By developing a compositional trace semantics and refinement calculus, the study makes significant contributions to the theoretical foundations of parallel programming.",4.9
Programming Languages: Principles and Paradigms,A. Tucker,-,-,-,31,2001,yes,"The text appears to analyze fundamental programming language constructs through its formal model approach, meeting the fundamental analysis criterion.",yes,"The abstract mentions using ""a formal model"" and a ""hands-on laboratory suite"" to implement this formal model, meeting the formal framework criterion.",yes,"The abstract explicitly covers ""six major programming paradigms"" and their theoretical foundations, meeting the paradigm theory criterion.",yes,"The abstract explicitly mentions ""principles of language design"" and indicates formal coverage of these principles, meeting the language design principles criterion.",yes,"The text indicates a formal theoretical foundation through its formal model approach to language design, meeting the theoretical foundation criterion.",yes,"The implementation aspects (Java interpreter) are used to support theoretical understanding rather than being the primary focus, meeting the implementation focus criterion.",yes,"The focus appears to be on theoretical understanding, with formal models and paradigm analysis, meeting the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The paper appears to be a textbook rather than a research paper, which raises concerns about full-text accessibility. Textbooks are typically not peer-reviewed research papers and may not be suitable for inclusion in a systematic review.",Exclude,"A comprehensive textbook on programming language principles demonstrates strong alignment with theoretical and paradigmatic research criteria, covering formal models, language design principles, and multiple programming paradigms. However, the text's nature as a textbook rather than a research paper raises significant concerns about its suitability for systematic review, potentially disqualifying it from inclusion despite its theoretical depth.",2.7
Enriching the Object-Oriented Paradigm via Shadows in the Context of Mathematics,"M. Conrad, Timothy French, M. Huchard, C. Maple, S. Pott",10.5381/jot.2006.5.6.a4,https://doi.org/10.5381/jot.2006.5.6.a4,Journal of Object Technology,2,2006,yes,The paper analyzes fundamental programming language constructs (object nature and dynamic behavior) at a theoretical level.,maybe,"The abstract mentions presenting a ""framework,"" but it's unclear if it's formal or mathematical, so there is uncertainty about the rigor of the framework.",yes,"The paper examines object-oriented programming paradigm foundations, particularly regarding dynamic object nature, meeting the paradigm theory criterion.",maybe,"The paper discusses object-oriented programming language design principles, particularly regarding the dynamic nature of objects, which partially meets the language design principles criterion, though it's not explicitly focused on orthogonality or minimality.",maybe,"The abstract suggests some theoretical foundation by discussing mathematical context, but it doesn't explicitly mention formal mathematical frameworks.",maybe,"The abstract mentions a ""Java-like implementation,"" but it appears to serve the theoretical framework rather than being the primary focus.",maybe,"The paper appears to make theoretical contributions about programming language design, though it also includes implementation aspects, so it's not purely practical.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research explores object-oriented programming language design principles with a focus on dynamic object behavior, presenting a theoretical framework that bridges mathematical context and computational implementation. While demonstrating strong potential in paradigm theory and fundamental analysis, the study exhibits some uncertainty regarding the depth of its formal mathematical foundations and the balance between theoretical and practical contributions.",4
Network Programming via Computable Products,D. Volpano,-,-,arXiv.org,0,2022,yes,"The paper analyzes fundamental constructs through the lens of finite-state machines and concurrent reactive systems, though it is specifically applied to network programming.",yes,"The paper explicitly mentions ""model checking,"" ""formal verification,"" and uses mathematical concepts like ""extended finite-state machine"" and ""state invariants,"" indicating a strong match with the formal framework criterion.",maybe,"The paper presents a ""new software paradigm"" and discusses theoretical foundations, though it is specifically focused on network programming rather than general programming paradigms.",maybe,"The paper discusses a ""new software paradigm"" and programming languages, but does not explicitly focus on orthogonality or minimality. It is more focused on specific implementation needs.",yes,"The paper presents a theoretical foundation based on model checking and finite-state machine theory, with formal verification of properties, meeting the theoretical foundation criterion.",maybe,"The paper discusses implementation aspects (code generation) but uses these to support theoretical contributions about verification and optimization, partially meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions through formal verification and mathematical modeling, rather than just practical implementation, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a novel software paradigm for network programming, grounded in formal mathematical frameworks of model checking and finite-state machine theory. By focusing on theoretical foundations, formal verification, and computational primitives, the study demonstrates strong alignment with rigorous programming language design principles. The work contributes theoretical insights into programming paradigms while maintaining a specific application context in network services.",4.3
Problem posing interpretation of programming languages,"C. Landauer, K. Bellman",10.1109/HICSS.1999.772821,https://doi.org/10.1109/HICSS.1999.772821,Proceedings of the 32nd Annual Hawaii International Conference on Systems Sciences. 1999. HICSS-32. Abstracts and CD-ROM of Full Papers,21,1999,yes,"The paper appears to analyze fundamental programming language constructs at a theoretical level, particularly in how it approaches problem specification and solution mapping.",maybe,"The abstract does not explicitly mention a formal mathematical framework or verification approach. While it discusses a ""Problem Posing Interpretation,"" it is unclear if this is formalized mathematically.",yes,"The paper directly examines programming paradigms and provides comparative theoretical analysis across ""all major programming paradigms.""",maybe,"The paper discusses a programming paradigm that fundamentally changes how programming is approached, suggesting investigation of design principles. However, it does not explicitly mention orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation in its approach to programming paradigms and Knowledge-Based Polymorphism, but the abstract does not explicitly indicate the mathematical rigor of this foundation.",yes,The abstract suggests the paper focuses on theoretical aspects rather than implementation details.,yes,"The paper appears to make theoretical contributions by proposing a new paradigm and unifying interpretation across programming languages, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"A theoretical exploration of programming paradigms that demonstrates strong potential for meeting screening criteria related to paradigm theory, theoretical contribution, and fundamental analysis. The study proposes a novel approach to programming interpretation, with particular emphasis on unifying programming language understanding through Knowledge-Based Polymorphism. While showing significant theoretical depth, the abstract leaves some uncertainty regarding the mathematical rigor and formal framework of the proposed paradigm.",4.3
"A denotational model for the integration of concurrent, functional and imperative programming","D. Bolignano, M. Debbabi",10.1109/ICCI.1993.315370,https://doi.org/10.1109/ICCI.1993.315370,International Conference on Computing and Information,6,1993,yes,"The paper strongly meets this criterion through its analysis of fundamental language constructs, theoretical treatment of concurrency, functions, and references, and mathematical analysis of programming primitives.",yes,"The paper strongly meets this criterion as it presents a denotational model, static semantics with effect-based analysis, dynamic semantics based on a mathematical model of acceptance trees, and a formal treatment of type systems and effects.",yes,"The paper strongly meets this criterion as it explicitly focuses on the integration of concurrent, functional, and imperative paradigms, the theoretical foundations for paradigm integration, and comparative analysis of different programming paradigms.",yes,"The paper strongly meets this criterion as it focuses on fundamental design principles for integrating multiple programming paradigms (concurrent, functional, and imperative).",yes,"The paper clearly meets this criterion with its mathematical model of acceptance trees, formal static semantics, and theoretical foundations for paradigm integration.",yes,"The paper appropriately uses implementation aspects to support theoretical contributions, particularly in discussing how types and effects enable safe integration of paradigms.",yes,"The paper is primarily theoretical, focusing on denotational semantics, mathematical foundations, and the theoretical integration of paradigms, rather than practical implementation.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language paradigms, focusing on the mathematical integration of concurrent, functional, and imperative approaches through a denotational model and formal semantic analysis. The study provides a comprehensive theoretical framework examining fundamental language design principles, utilizing advanced mathematical techniques to analyze computational primitives and paradigm interactions. By emphasizing theoretical foundations and mathematical modeling, the work contributes significantly to understanding programming language design at a fundamental level.",4.9
An Abstract View on Optimizations in Propositional Frameworks,Yuliya Lierler,10.48550/arXiv.2206.06440,https://doi.org/10.48550/arXiv.2206.06440,Annals of Mathematics and Artificial Intelligence,2,2022,yes,"The paper analyzes fundamental constructs related to optimization statements and weight systems at a theoretical level, meeting the fundamental analysis criterion.",yes,"The paper explicitly mentions ""formal properties"" and presents a ""unifying framework"" for analyzing optimization statements across different paradigms, providing strong evidence for the formal framework criterion.",yes,"The paper explicitly examines different programming paradigms (answer set programming, MaxSAT) and provides comparative theoretical analysis through its unifying framework, meeting the paradigm theory criterion.",maybe,"The paper discusses programming languages and their design, particularly focusing on optimization statements and weight systems. While not explicitly mentioning orthogonality or minimality, it does address fundamental design principles through its unifying framework approach.",yes,The paper has a clear theoretical foundation through its focus on formal properties and mathematical framework for analyzing optimization statements.,yes,"The paper appears to use implementation aspects (translational solvers) to support broader theoretical contributions, meeting the implementation focus criterion.",yes,"The paper clearly focuses on theoretical contributions, particularly in developing a unifying framework and analyzing formal properties, rather than practical implementations, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A theoretical research paper exploring programming language paradigms through a unifying framework of weight systems, demonstrating strong alignment with formal mathematical analysis and theoretical contributions. The study provides a rigorous examination of optimization statements across different programming paradigms, focusing on fundamental design principles and comparative theoretical analysis. Its approach emphasizes mathematical frameworks and theoretical understanding over practical implementation details.",4.6
Session types in concurrent calculi : higher-order processes and objects,D. Mostrous,10.25560/6132,https://doi.org/10.25560/6132,-,14,2009,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on session types, channel management, and concurrent programming primitives.",yes,"The paper explicitly presents formal mathematical frameworks through programming language calculi, including Lambda-calculus, Pi-calculus, and Object-calculus. It provides rigorous formal analysis of session types and their properties.",yes,"The paper examines multiple programming paradigms (functional, process, and object-oriented) and their integration, providing comparative theoretical analysis of how these paradigms can be unified through session types.",yes,"The paper strongly addresses language design principles, particularly focusing on session types and their theoretical foundations for concurrent programming. It discusses fundamental design principles like linearity and duality in channel management.",yes,"The abstract clearly indicates a strong theoretical foundation, presenting formal calculi and theoretical frameworks for session-based concurrent programming. It explicitly mentions providing ""theoretical foundation"" multiple times.",yes,"While implementation aspects are discussed (particularly regarding object calculi), these serve to support the broader theoretical contributions rather than being the primary focus.",yes,"The paper is primarily theoretical, focusing on fundamental contributions to session type theory, recursive sessions, and asynchronous subtyping. It's not focused on practical patterns or optimization.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be a dissertation, which typically has accessible full text through academic channels, though this cannot be confirmed from the abstract alone.",Include,"This dissertation provides a comprehensive theoretical exploration of session types in programming languages, presenting rigorous formal frameworks across multiple paradigms and offering deep insights into concurrent programming design principles. The work systematically examines fundamental language constructs through mathematical calculi, focusing on theoretical contributions that unify functional, process, and object-oriented programming approaches. Its strong emphasis on theoretical foundations, formal analysis, and paradigm integration demonstrates a sophisticated approach to understanding programming language design at a fundamental level.",4.9
The ergo support system: an integrated set of tools for prototyping integrated environments,"Peter Lee, F. Pfenning, Gene Rollins, W. Scherlis",10.1145/64135.65006,https://doi.org/10.1145/64135.65006,Software Development Environments,33,1988,maybe,"The paper touches on fundamental aspects through formal methods, but seems more focused on the engineering framework than deep analysis of programming language constructs.",yes,"The paper explicitly deals with ""formal methods"" and ""proof-theoretic approaches"" in program development, indicating a strong match with this criterion.",maybe,"The paper mentions ""formally-based program and proof development paradigms"" but does not appear to provide deep theoretical analysis of paradigms themselves.",maybe,"The paper discusses abstract interfaces and their design, but does not explicitly focus on orthogonality or minimality. It is more focused on framework design than language design principles.",maybe,"The paper appears to have a theoretical foundation in formal methods, though it is more focused on the engineering framework than pure theory.",yes,"The paper discusses tools and implementation, but these appear to serve the broader theoretical framework of formal methods, meeting this criterion.",maybe,"The paper deals with formal methods, but the focus seems to be on the engineering framework (ESS) rather than pure theoretical contributions.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text accessibility cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract describes an engineering framework for formal methods that partially addresses theoretical programming language principles, with strong elements of formal framework and implementation focus. While the study engages with formal methods and proof-theoretic approaches, it appears more oriented toward practical tool development than deep theoretical analysis of programming language constructs. The work demonstrates potential theoretical relevance but lacks comprehensive exploration of fundamental language design principles.",3.5
Reasoning About a Service-oriented Programming Paradigm,"C. Guidi, F. Montesi",10.4204/EPTCS.2.6,https://doi.org/10.4204/EPTCS.2.6,YR-SOC,9,2009,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on service-oriented computing primitives, meeting the fundamental analysis criterion.",yes,"The paper explicitly develops and uses formal mathematical frameworks (process calculi, specifically SOCK, CCS, and œÄ-calculus) for analyzing programming language properties, strongly meeting the formal framework criterion.",yes,"The paper examines the theoretical foundations of the service-oriented programming paradigm and compares it with other approaches (SCC, COWS), strongly meeting the paradigm theory criterion.",yes,"The paper discusses formal design principles for service-oriented programming, including orthogonality in their process calculus (SOCK), meeting the language design principles criterion.",yes,"The paper is explicitly described as a ""concept paper"" with formal theoretical foundations, building on established process calculi and developing new theoretical frameworks, clearly meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed (WS-BPEL, fault handling), they serve to support the theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions, developing new formal models and analyzing fundamental properties of service-oriented programming, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be an academic publication with citations, suggesting it is likely accessible for full-text review, though this cannot be definitively determined from the abstract alone.",Include,"A rigorous theoretical exploration of service-oriented programming paradigms, the study presents a comprehensive formal framework utilizing process calculi to analyze fundamental computational constructs. The research demonstrates strong theoretical contributions by developing novel mathematical models, comparing programming paradigms, and providing deep insights into service-oriented computing's foundational principles. With a focus on theoretical foundations and formal verification, the work significantly advances understanding of programming language design and computational primitives.",4.9
Functional Programming in Pattern-Match-Oriented Programming Style,"S. Egi, Yuichi Nishiwaki",10.22152/programming-journal.org/2020/4/7,https://doi.org/10.22152/programming-journal.org/2020/4/7,"The Art, Science, and Engineering of Programming",2,2020,yes,"The paper analyzes fundamental programming language constructs, particularly pattern matching and recursion, at a theoretical level.",maybe,"While the paper discusses programming concepts, it's not explicitly clear if it presents a formal mathematical framework. The focus seems more on programming techniques and patterns rather than formal verification.",yes,"The paper directly examines programming paradigms, comparing functional programming with pattern-match-oriented programming, and provides theoretical analysis of these paradigms.",yes,"The paper discusses fundamental design principles in programming languages, specifically introducing a new paradigm (pattern-match-oriented programming) and analyzing how it relates to functional programming.",maybe,"The paper appears to have some theoretical foundation in its analysis of pattern matching and programming paradigms, but it's not explicitly stated whether this is formalized mathematically.",maybe,"The paper discusses implementations, but these appear to serve the broader theoretical contribution of demonstrating the paradigm's effectiveness rather than being the sole focus.",maybe,"The paper makes theoretical contributions by introducing a new programming paradigm and analyzing its relationship to existing paradigms. However, it also focuses on practical applications (SAT solver, computer algebra system, etc.).",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research presents a novel programming paradigm with strong theoretical foundations in pattern-match-oriented programming, demonstrating significant contributions to programming language design principles and paradigm theory. While the study offers robust analysis of fundamental programming constructs and introduces innovative programming techniques, there remains some uncertainty regarding the depth of formal mathematical frameworks and rigorous verification approaches. The work balances theoretical insights with practical implementations across multiple computational domains.",4.3
"Paradigm, Language Model and Method",J. Bosch,-,-,-,3,1994,maybe,"The abstract suggests analysis of fundamental concepts (paradigms) in programming languages, though the depth of analysis is not clear.",no,The abstract does not mention any explicit formal mathematical frameworks or verification approaches.,yes,"The abstract directly states that it investigates ""the role of the paradigm"" and its relationship to programming languages and software engineering methods, strongly meeting this criterion.",maybe,"The abstract mentions investigating ""paradigm"" and its relationship to programming languages, suggesting potential coverage of fundamental design principles, but it's not explicitly clear.",maybe,"The abstract suggests a theoretical approach by discussing paradigms as ""underlying"" concepts, but does not explicitly mention formal theoretical foundations.",maybe,"The abstract does not provide enough information to fully determine the implementation focus, but the focus appears to be theoretical rather than implementation-oriented.",maybe,"The abstract suggests a theoretical focus on paradigms rather than practical aspects, though the full scope is not clear.",yes,"The abstract is written in English, meeting the publication language criterion.",maybe,The full-text accessibility cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates a theoretical approach to programming language paradigms, with clear focus on investigating fundamental relationships between programming languages and software engineering methods. While the limited text prevents comprehensive assessment, it suggests potential alignment with theoretical and paradigm-focused screening criteria, particularly in examining underlying conceptual frameworks.",3.5
First-class isomorphic specialization by staged evaluation,"A. Slesarenko, A. Filippov, Alexey Romanov",10.1145/2633628.2633632,https://doi.org/10.1145/2633628.2633632,Workshop on Generic Programming,6,2014,yes,"The paper provides a clear analysis of fundamental programming language constructs, including abstraction mechanisms, higher-order functions, program staging, and term rewriting.",yes,"The paper presents a formalized framework, formalized description, term rewriting rules, and mathematical concepts like isomorphisms, indicating the use of a formal mathematical framework or rigorous verification approach.",yes,"The paper examines programming paradigm foundations, specifically higher-order functional programming, generic programming, domain-specific abstractions, and a new paradigm for developing software components.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on abstraction mechanisms and their relationship to performance. It explicitly addresses orthogonality in the context of abstraction mechanisms.",yes,"The paper has a clear theoretical foundation, including a formalized framework for specialization, mathematical treatment of isomorphisms, and theoretical analysis of abstraction mechanisms.",yes,"The implementation aspects of the paper, such as the framework implementation and evaluation, serve to support the theoretical contributions rather than being the primary focus.",yes,"The paper makes strong theoretical contributions, including a new method of program staging, a theoretical framework for abstraction elimination, and a formalized algorithm for isomorphic specialization.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, and would need to be verified in a separate step.",Include,"The research presents a rigorous theoretical exploration of programming language design principles, focusing on abstraction mechanisms, formal frameworks, and mathematical foundations of software development. By introducing novel approaches to program staging, isomorphic specialization, and domain-specific software components, the study offers a comprehensive theoretical contribution to understanding programming language constructs and paradigm foundations. The work demonstrates a sophisticated analysis of fundamental computational principles through a formalized framework that bridges theoretical insights with practical implementation strategies.",4.9
Design principles for highly reusable concurrent object-oriented systems,"Emilio Garc√≠a Rosell√≥, Jos√© Ayude Vazquez, Jos√© B. Garc√≠a-Schofield, M. P. Cota",10.5381/jot.2002.1.1.a3,https://doi.org/10.5381/jot.2002.1.1.a3,Journal of Object Technology,4,2002,yes,"The paper analyzes fundamental language constructs, specifically focusing on the integration of concurrency and object-oriented programming at a theoretical level.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, so it is unclear if the paper presents or utilizes a formal framework.",yes,"The paper explicitly examines the integration of concurrency and object-oriented paradigms, including theoretical analysis of their combination, strongly meeting this criterion.",yes,"The paper explicitly focuses on ""orthogonal design principles"" and discusses their application in programming language design, strongly meeting this criterion.",yes,"The paper appears to have a theoretical foundation, discussing design principles and their application to language design, but the level of mathematical rigor is not clear from the abstract.",yes,"The implementation discussion (CoJava) appears to serve theoretical purposes, demonstrating the application of the proposed principles rather than being the primary focus.",yes,"The paper appears to focus on theoretical contributions, proposing design principles and analyzing paradigm integration rather than practical implementation details.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Include,"The research explores fundamental programming language design principles, particularly focusing on the integration of concurrency and object-oriented paradigms through theoretical analysis and design principles. By proposing orthogonal design principles and presenting a model like CoJava, the study contributes to theoretical understanding of programming language constructs and paradigm foundations. The work demonstrates strong alignment with theoretical research criteria, examining fundamental language design at a conceptual level.",4.6
A framework for building language interpreters,"A. Durham, Edson Sussumu, A. F. D. Concei√ß√£o",10.1145/949344.949398,https://doi.org/10.1145/949344.949398,"Conference on Object-Oriented Programming Systems, Languages, and Applications",4,2003,no,"While the paper deals with programming paradigms, it appears to focus on their implementation rather than fundamental theoretical analysis of language constructs.",no,"The abstract does not mention any formal mathematical framework or verification approach. It describes an ""Object-Oriented framework"" but this appears to be more practical than formal.",maybe,"The paper does examine different programming paradigms (Functional, Object-Oriented, Logic), but appears to focus on their implementation rather than theoretical foundations or comparative theoretical analysis.",no,"The abstract does not explicitly discuss orthogonality or minimality, and while it mentions different paradigms, it does not appear to focus on fundamental design principles.",no,The abstract does not mention any explicit formal theoretical foundations or mathematical frameworks. The focus seems to be on implementation and educational aspects.,no,"The paper appears to focus primarily on implementation aspects, with the framework being described as an implementation tool rather than a theoretical contribution.",no,"The abstract suggests the paper focuses more on practical implementation and educational aspects rather than theoretical contributions. The emphasis on ""implementation"" and ""educational context"" suggests a practical rather than theoretical focus.",yes,"The paper is written in English, meeting this criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"The abstract describes a practical implementation framework for programming language interpreters, focusing on educational contexts and paradigm implementation rather than theoretical foundations. While the work touches on multiple programming paradigms, it lacks the formal mathematical frameworks, rigorous verification approaches, and deep theoretical analysis required by the screening criteria. Consequently, the paper appears more oriented toward practical implementation and educational utility than theoretical contribution.",2.7
Logic of computational semi-effects and categorical gluing for equivariant functors,"Yuichi Nishiwaki, Toshiya Asai",-,-,arXiv.org,1,2020,yes,"The paper analyzes fundamental programming language constructs (computational effects) at a deep theoretical level using categorical and logical frameworks, clearly meeting the fundamental analysis criterion.",yes,"The paper presents a formal mathematical framework using actegories, equivariant functors, and categorical gluing, and discusses proof-theoretic reconstruction and logical predicates, strongly meeting the formal framework criterion.",yes,"The paper examines computational effects as a programming paradigm and provides theoretical analysis of how these effects can be modeled and understood, meeting the paradigm theory criterion.",maybe,"The paper discusses computational effects and their theoretical foundations, which relates to fundamental design principles in programming languages, though it does not explicitly address orthogonality or minimality.",yes,"The paper is heavily theoretical, building on Moggi's calculus and developing formal mathematical foundations using type theory and categorical semantics, clearly meeting the theoretical foundation criterion.",yes,"The paper appears to be purely theoretical, with no focus on practical implementation, which strengthens its alignment with the implementation focus criterion.",yes,"The paper focuses entirely on theoretical contributions, developing new mathematical frameworks and logical foundations rather than practical applications, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given its technical nature and likely academic venue, though this cannot be determined from the abstract alone.",Include,"This theoretical paper presents a rigorous mathematical framework for analyzing computational effects, utilizing advanced categorical and logical techniques to explore programming language foundations. The research provides a deep theoretical contribution by developing new mathematical models for understanding computational paradigms, with a strong focus on formal semantic analysis and logical reconstruction. Its comprehensive examination of programming language constructs through a sophisticated theoretical lens demonstrates significant scholarly depth and mathematical precision.",4.9
Teaching Programming with the Kernel Language Approach,"P. V. Roy, Seif Haridi",-,-,-,4,-,yes,The paper analyzes fundamental programming language constructs through the kernel language approach.,yes,"The abstract mentions ""simple formal semantics"" and discusses theoretical foundations, indicating a formal mathematical framework.",yes,"The paper directly examines multiple programming paradigms (imperative, object-oriented, concurrent, logic, and functional) and their relationships.",yes,"The paper discusses fundamental design principles through the ""kernel language approach"" and how different paradigms relate to each other.",yes,"The paper explicitly discusses the ""science"" of programming with ""broad and deep theory with predictive power"" and formal semantics.",yes,"While implementation is discussed, it serves to support the theoretical framework rather than being the primary focus.",yes,"The paper appears to focus on theoretical understanding, presenting a new framework for understanding programming paradigms and their relationships.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract mentions a textbook and research by the Mozart Consortium, suggesting potential accessibility, but this cannot be confirmed from the abstract alone.",Include,"The research presents a comprehensive theoretical framework for understanding programming paradigms through a kernel language approach, demonstrating strong alignment with criteria focused on formal foundations, paradigm theory, and theoretical contributions. By examining multiple programming paradigms and their relationships through a rigorous mathematical lens, the study offers a deep theoretical analysis that transcends practical implementation details. The work's emphasis on scientific foundations and formal semantics provides a robust theoretical contribution to programming language understanding.",4.6
"The Alma Project, or How First-Order Logic Can Help Us in Imperative Programming","K. Apt, Andrea Schaerf",10.1007/3-540-48092-7_5,https://doi.org/10.1007/3-540-48092-7_5,Correct System Design,16,1999,yes,"The paper analyzes fundamental programming language constructs, particularly the interaction between logical and customary variables and constraint processing, meeting the fundamental analysis criterion.",maybe,"While the paper discusses a strongly typed language, it's not explicitly clear if it presents a formal mathematical framework. The focus seems more on design rationale than formal verification.",yes,"The paper clearly examines programming paradigm foundations, specifically the combination of logic and imperative programming paradigms, meeting the paradigm theory criterion.",yes,"The paper discusses the design of a programming language (Alma-0) and its fundamental principles, including type systems and hybrid programming frameworks, meeting the language design principles criterion.",maybe,"The paper appears to have some theoretical foundation in combining logic and imperative programming paradigms, but the abstract doesn't explicitly mention formal theoretical frameworks.",maybe,"The abstract mentions both implementation and theoretical aspects, but seems to give substantial attention to practical implementation details.",maybe,"While the paper contributes to understanding hybrid programming paradigms, it appears to focus significantly on practical implementation aspects (Alma-0 implementation).",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"The research explores a hybrid programming language design that integrates logic and imperative programming paradigms, demonstrating strong theoretical foundations in language design principles and paradigm theory. While the study presents a comprehensive approach to programming language development, it balances theoretical contributions with practical implementation considerations, suggesting a nuanced exploration of computational frameworks.",4
A multilevel programming paradigm,K. M. George,10.1109/PCCC.1990.101640,https://doi.org/10.1109/PCCC.1990.101640,Ninth Annual International Phoenix Conference on Computers and Communications. 1990 Conference Proceedings,0,1990,yes,The paper analyzes fundamental programming language constructs through its multilevel approach and theoretical foundations.,maybe,"The abstract mentions ""algebra of programs"" as mathematical foundation and ""in-situ evaluation semantics,"" indicating some formal framework usage.",yes,"The paper explicitly examines and compares multiple programming paradigms (functional, object-oriented, conventional) and their integration.",maybe,"The paper discusses a multilevel programming paradigm and mentions fundamental design principles through its integration of different programming approaches (FP, OOP, conventional). However, it doesn't explicitly focus on orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation through its use of algebra and formal semantics, though the depth isn't entirely clear from the abstract.",maybe,"The paper discusses implementation aspects (interface classes, data types) but uses these to support broader theoretical contributions about the paradigm.",maybe,"The paper appears to make theoretical contributions through its multilevel paradigm development and mathematical foundations, though it also has practical applications (reuse, interface classes).",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"A multilevel programming paradigm integrating functional, object-oriented, and conventional programming approaches demonstrates strong theoretical foundations through mathematical frameworks and semantic analysis. The research provides a comprehensive examination of programming paradigms, utilizing algebraic and semantic techniques to explore fundamental computational constructs and design principles. While presenting practical implementation strategies, the study maintains a robust theoretical focus on programming language design and paradigm integration.",4.3
Higher-Order Causal Stream Functions in Sig from First Principles,"B. T. Widemann, M. Lepper",-,-,Software Engineering,0,2016,yes,"The paper analyzes fundamental language constructs (sequential composition, parallel composition, delay, apply) at a theoretical level, strongly meeting the fundamental analysis criterion.",yes,"The paper explicitly deals with coalgebraic semantics and mathematical notation for formal analysis of programming language properties, strongly meeting the formal framework criterion.",yes,"The paper explicitly examines programming paradigms (functional, data-flow) and their theoretical foundations, including sequential and parallel composition, strongly meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of the Sig language, including its core design for coalgebraic semantics, meeting the language design principles criterion.",yes,"The paper centers on coalgebraic semantics as a theoretical framework and provides mathematical foundations for the language, clearly meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed, they serve to support the theoretical contributions and semantic analysis, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical understanding through coalgebraic semantics and mathematical notation, rather than practical aspects, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A comprehensive theoretical exploration of the Sig programming language through coalgebraic semantics, demonstrating rigorous mathematical foundations and in-depth analysis of programming paradigms. The study provides a formal framework for understanding fundamental language constructs, with a strong emphasis on theoretical contributions and paradigm theory. Its approach bridges mathematical notation with programming language design principles, offering a sophisticated examination of computational semantics.",4.9
Modular Concurrency - A New Approach to Manageable Software,"P. Grogono, B. Shearing",10.5220/0001870900470054,https://doi.org/10.5220/0001870900470054,International Conference on Software and Data Technologies,6,2008,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on concurrency and message-passing as basic computational primitives.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, so there is no clear indication of formal analysis methods.",yes,"The paper explicitly focuses on programming paradigms, discussing the shift from sequential to concurrent programming and proposing a new paradigm based on message-passing processes, strongly meeting this criterion.",maybe,"The paper discusses fundamental design principles for concurrent programming, including ""scale-free program structure"" and ""extensible modular components,"" which aligns with the criterion of investigating fundamental design principles.",maybe,"The paper appears to have a theoretical foundation in its approach to concurrent programming paradigms, but the abstract does not explicitly mention mathematical frameworks or formal proofs.",yes,"The abstract suggests the paper balances theoretical contributions with practical considerations, discussing both the theoretical framework and its practical implications for software development.",yes,"The paper appears to make theoretical contributions rather than focusing on practical patterns, discussing fundamental changes in programming paradigms and proposing new theoretical approaches.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research explores fundamental programming language design principles, particularly focusing on concurrent programming paradigms and message-passing processes. While demonstrating strong theoretical contributions and paradigm analysis, the study lacks explicit formal mathematical frameworks or rigorous verification approaches. The work appears to balance theoretical insights with practical software development considerations, offering a novel perspective on programming language design.",4
Position paper: practical foundations for lrogramming languages,R. Harper,10.1145/1480828.1480843,https://doi.org/10.1145/1480828.1480843,SIGP,0,2008,yes,"The paper focuses on ""core computational concepts"" and ""what is computable in the broadest sense,"" indicating a strong focus on fundamental analysis.",maybe,"The paper suggests a theoretical approach and discusses the ""scientific theory of the computable"" and ""core computational concepts,"" indicating the use of a formal mathematical framework, though this is not explicitly stated.",yes,"The paper explicitly addresses programming paradigms, mentioning ""paradigms"" and ""orientations"" while arguing for a more fundamental approach beyond mere classification.",maybe,"The paper discusses fundamental principles of programming language design, particularly regarding rigor and computational expressiveness, even if it does not explicitly mention orthogonality or minimality.",yes,"The paper has a strong theoretical foundation, discussing the ""science of computation itself"" and ""scientific theory of the computable,"" indicating a focus on fundamental theoretical aspects.",maybe,"The paper suggests a balanced approach, discussing both theoretical foundations and practical applications, with theory taking precedence.",yes,"The paper clearly focuses on theoretical understanding, explicitly distinguishing itself from practical patterns and taxonomy, and aims to ""analyze and codify core computational concepts.""",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through standard academic channels, though this cannot be determined from the abstract alone.",Include,"This scholarly work deeply explores programming language theory, focusing on fundamental computational principles and the scientific foundations of programming. The text rigorously examines the theoretical underpinnings of programming languages, emphasizing core computational concepts and the intrinsic relationship between language design, computational expressiveness, and theoretical understanding. By positioning programming language study as a scientific discipline, the work provides a comprehensive theoretical framework for analyzing computational principles beyond practical implementation.",4.6
Functional Programming and Parallel Processing,R. Lins,10.1007/3-540-62828-2_134,https://doi.org/10.1007/3-540-62828-2_134,International Conference on High Performance Computing for Computational Science,5,1996,yes,The mention of Œª-Calculus and functional programming theory suggests that the paper analyzes fundamental programming language constructs.,maybe,"The mention of Œª-Calculus as ""a theory of functions under recursion"" indicates that a formal mathematical framework is likely present in the paper.",yes,"The paper appears to focus on the functional programming paradigm and its evolution, indicating that it examines programming paradigm foundations.",maybe,"The abstract mentions functional programming as a paradigm, and the reference to Œª-Calculus suggests some treatment of fundamental design principles, even though it does not explicitly discuss orthogonality or minimality.",yes,"The abstract explicitly mentions Œª-Calculus as providing ""solid theoretic background,"" strongly suggesting that theoretical foundations are present in the paper.",yes,"The abstract does not indicate a focus on implementation details, suggesting that the paper maintains a theoretical focus.",yes,"The abstract suggests a theoretical analysis of the paradigm's evolution, particularly regarding parallelism, rather than practical applications, indicating a theoretical contribution.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A theoretical exploration of functional programming paradigms, grounded in Œª-Calculus, demonstrates strong alignment with formal language design principles and theoretical foundations. The research appears to provide a rigorous examination of programming language constructs, focusing on fundamental theoretical contributions rather than practical implementations.",4.6
The promise of multiparadigm languages as pedagogical tools,J. Placer,10.1145/170791.170807,https://doi.org/10.1145/170791.170807,International Conference on Scientific Computing,10,1993,no,The abstract suggests a focus on practical examples and teaching applications rather than fundamental theoretical analysis of programming language constructs.,no,The abstract does not mention any formal mathematical framework or verification approach. The discussion appears to be more descriptive and example-based.,maybe,"While the paper discusses multiple paradigms, it appears to focus on their pedagogical value rather than providing theoretical analysis of paradigm foundations.",maybe,"The paper discusses multiparadigm languages, but does not explicitly mention orthogonality or minimality. While paradigm support is related to language design, the focus appears to be on pedagogical applications rather than fundamental design principles.",no,There is no explicit mention of formal theoretical foundations. The paper seems to focus on practical examples and pedagogical applications.,maybe,"The paper discusses implementation examples, but these appear to serve pedagogical purposes rather than supporting broader theoretical contributions.",no,The paper seems to focus primarily on practical pedagogical applications rather than theoretical contributions. The emphasis is on teaching programming skills rather than advancing theoretical understanding.,yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract primarily discusses pedagogical applications of multiparadigm programming languages, focusing on practical teaching tools rather than theoretical foundations or formal analysis. While written in English, the paper lacks explicit formal frameworks, theoretical contributions, or rigorous examination of programming language constructs. The research appears more oriented toward educational applications than meeting the specified screening criteria for theoretical depth.",2.7
Implementation and manipulation of formal objects: an object-oriented view,"Mauro Regio, M. Temperini",10.1145/99412.99496,https://doi.org/10.1145/99412.99496,Symposium on Small Systems,1,1990,yes,"The paper analyzes fundamental programming language constructs through the lens of formal specification and object-oriented methodology, meeting this criterion.",yes,"The abstract mentions Algorithmic Logic as a formal specification language and discusses formal objects definition and implementation systems, suggesting the presence of a formal mathematical framework.",yes,"The paper explicitly examines programming paradigms, specifically object-oriented methodology, and discusses its theoretical foundations, meeting this criterion.",yes,"The paper discusses formal language design principles, particularly in the context of object-oriented methodology and formal specification languages, meeting this criterion.",yes,"The paper appears to have a theoretical foundation, discussing formal specification languages and conceptual modeling, with the mention of Algorithmic Logic suggesting mathematical rigor.",yes,"The paper discusses implementation aspects (Loglan and Eiffel) in the context of supporting theoretical contributions about formal systems and object-oriented methodology, meeting this criterion.",yes,"The focus of the paper appears to be on theoretical understanding, discussing formal systems and conceptual modeling rather than practical implementations, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research explores formal programming language design principles through an object-oriented methodology, utilizing Algorithmic Logic and examining innovative programming languages like Loglan and Eiffel. By focusing on theoretical foundations, conceptual modeling, and paradigm analysis, the study demonstrates a rigorous approach to understanding programming language constructs at a fundamental level. The work appears to contribute substantively to theoretical understanding of programming language design and specification.",4.6
Multi-paradigm design with feature modeling,V. Vraniƒá,10.2298/CSIS0501079V,https://doi.org/10.2298/CSIS0501079V,Computer Science and Information Systems,22,2005,maybe,"The paper analyzes fundamental programming language constructs through the lens of paradigms and feature modeling, though it is not clear how deeply it examines computational primitives.",maybe,"The paper presents a formal method using feature modeling and transformational analysis, suggesting some mathematical rigor, though the depth of formality is not entirely clear from the abstract.",yes,"The paper directly examines programming paradigms and their selection, including comparative analysis between application and solution domains.",no,"The paper discusses paradigm selection and modeling, but does not explicitly address orthogonality or minimality. It focuses more on methodology for paradigm selection.",maybe,"The paper appears to have a theoretical foundation in feature modeling and transformational analysis, though it is not explicitly mathematical.",maybe,"The paper discusses implementation aspects (AspectJ, code skeleton generation) but uses these to support its theoretical framework rather than focusing solely on practical aspects.",maybe,"The paper makes theoretical contributions through its paradigm selection methodology, though it also has practical applications in code generation.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a methodological approach to programming paradigm selection using feature modeling and transformational analysis, with a strong theoretical foundation in comparative paradigm theory. While demonstrating rigorous methodological principles and theoretical contributions, the study balances theoretical depth with practical implementation considerations, particularly through its application to AspectJ programming language. The work appears to offer substantive insights into programming language design principles and paradigm selection methodologies.",4.3
"Research on sets, constraints, and preferences",B. Jayaraman,10.1145/340855.340963,https://doi.org/10.1145/340855.340963,SOEN,0,2000,yes,"The paper analyzes fundamental programming language constructs, including set theory foundations, constraint handling, declarative programming principles, and computational primitives.",yes,"The paper presents formal frameworks including set theory foundations, constraint logic programming, formal treatment of preferences and constraints, and mathematical foundations for declarative programming.",yes,"The paper explicitly examines declarative programming paradigms, set-oriented programming, constraint-based programming, object-oriented programming with constraints, and comparative analysis of different paradigms.",yes,"The paper explicitly discusses language design principles, particularly in developing the SURE language with specific design elements (Subset, Relational, and Equational clauses) and exploring fundamental principles of declarative programming.",yes,"The paper clearly presents theoretical foundations, including mathematical treatment of sets and constraints, formal paradigms for constraint and preference handling, and theoretical foundations for declarative programming.",yes,"While implementation is discussed (Warren Abstract Machine), it serves to support theoretical contributions rather than being the primary focus.",yes,"The paper focuses on theoretical contributions, including novel programming language design, new paradigms for constraint and preference handling, and theoretical foundations for declarative programming.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a comprehensive theoretical exploration of declarative programming languages, focusing on fundamental design principles, formal frameworks, and paradigmatic analysis across multiple computational domains. By developing novel language constructs like SURE and examining set-oriented, constraint-based, and object-oriented programming paradigms, the study offers significant theoretical contributions to programming language foundations. The work demonstrates rigorous mathematical treatment of computational primitives, theoretical foundations, and comparative paradigm analysis.",4.9
From Category Theory to Functional Programming: A Formal Representation of Intent,"D. Borsatti, W. Cerroni, S. Clayman",10.1109/NetSoft54395.2022.9844061,https://doi.org/10.1109/NetSoft54395.2022.9844061,IEEE Conference on Network Softwarization,7,2022,yes,The study analyzes fundamental programming language constructs through the lens of category theory and declarative programming principles.,yes,The abstract explicitly mentions using category theory as a formal mathematical framework for analyzing the IBN paradigm.,yes,"The study examines the declarative programming paradigm and its application to network management, providing theoretical analysis of this paradigm.",yes,"The paper discusses declarative programming principles and their application to network management, which relates to fundamental design principles in programming languages.",yes,The paper presents a formal theoretical foundation using category theory concepts to formalize the declarative paradigm.,yes,"The implementation in Haskell appears to serve the theoretical contribution rather than being the primary focus, as it's described as an ""initial implementation of this formalization.""",yes,"The paper focuses on theoretical understanding through formalization rather than practical implementation alone, though it does include implementation aspects.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of declarative programming principles through category theory, focusing on formalizing the Intent-Based Networking paradigm with a strong mathematical framework. By utilizing Haskell for implementation and emphasizing fundamental programming language constructs, the study demonstrates a comprehensive approach to theoretical analysis of programming paradigms. The work's emphasis on formal theoretical foundations and paradigm theory provides a sophisticated examination of computational principles.",4.6
On the problem of computer language classification,"I. Anureev, E. V. Bodin, L. Gorodnyaya, A. Marchuk, F. Murzin, N. Shilov",-,-,-,3,2009,no,"While the paper discusses fundamental programming language constructs, it does so more from a historical and taxonomic perspective rather than deep theoretical analysis.",maybe,"The paper mentions using ""Abstract State Machines"" as a unified formal semantics, indicating some formal framework usage, though it's not clear how deeply this is developed.",yes,"The paper explicitly focuses on programming paradigms, their classification, and theoretical foundations. It discusses various paradigms (imperative, declarative, object-oriented) and their evolution.",no,"The paper discusses programming language paradigms and their classification, but does not specifically focus on orthogonality or minimality. It takes a broader historical and taxonomic approach.",maybe,"The paper appears to have a theoretical foundation in its approach to classification and paradigmization, but it seems more focused on historical and taxonomic analysis than deep mathematical theory.",yes,The paper appears to maintain a theoretical focus rather than implementation details.,maybe,"The paper appears to make theoretical contributions through its ""semantics and pragmatics view"" approach to classification, though it seems more focused on taxonomic organization than fundamental theoretical advances.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be from a formal academic source, suggesting likely accessibility of the full text, though this cannot be determined from the abstract alone.",Exclude,"The paper demonstrates strong alignment with programming paradigm theory and theoretical contributions, particularly in its comprehensive exploration of language classification and evolution. While maintaining a theoretical focus, the study provides a nuanced taxonomic approach to understanding programming language paradigms, utilizing formal semantics and an open ontology to analyze computational language development. The research offers a sophisticated framework for understanding the complex landscape of programming languages across different computational approaches.",4
Proof-oriented programming for high-assurance systems,Aseem Rastogi,10.1145/3578527.3581769,https://doi.org/10.1145/3578527.3581769,International Symposium on Electronic Commerce,0,2023,yes,"The paper analyzes fundamental aspects of programming through the lens of formal proofs and correctness verification, suggesting a match with the fundamental analysis criterion.",yes,"The paper is centrally about formal proofs and correctness verification in programming, with explicit mention of ""mathematical proofs of their correctness and security,"" indicating a strong match with the formal framework criterion.",yes,"The paper explicitly discusses proof-oriented programming as a paradigm and compares it with traditional approaches through the Zeta framework, indicating a strong match with the paradigm theory criterion.",maybe,"The paper discusses F*, a proof-oriented programming language, and the formal proof aspects suggest some attention to fundamental design principles, though it does not explicitly focus on orthogonality or minimality.",yes,"The paper discusses formal proofs and mathematical foundations for programming correctness, particularly in the context of F* and the Zeta framework, suggesting a clear match with the theoretical foundation criterion.",yes,"The paper discusses implementations (Windows Hyper-V, Linux kernel, etc.), but these serve to demonstrate the theoretical framework rather than being the primary focus, indicating a match with the implementation focus criterion.",yes,"The paper appears to make theoretical contributions through its formal proof framework and Zeta methodology, though it also discusses practical implementations, suggesting a match with the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper may be accessible, as it appears to be a talk about Microsoft Research work, suggesting a reasonable chance of accessibility.",Include,"The abstract demonstrates strong alignment with theoretical programming language research, particularly in formal proof frameworks, paradigm theory, and mathematical foundations of programming correctness. It presents a comprehensive exploration of proof-oriented programming through the F* language and Zeta methodology, with significant theoretical contributions that extend beyond practical implementations. The work appears to provide a rigorous examination of programming language design principles and verification approaches.",4.6
A foundation for typed concatenative languages,Robert Kleffner,10.17760/d20467250,https://doi.org/10.17760/d20467250,-,3,-,yes,"The study analyzes fundamental programming language constructs at a theoretical level, particularly focusing on the concatenative paradigm's core properties.",yes,"The abstract explicitly mentions ""reduction semantics"" and ""sound type system,"" indicating a formal mathematical framework.",yes,The study directly examines programming paradigm foundations by focusing on the concatenative/stack-based paradigm and comparing it to functional approaches.,yes,"The paper directly addresses language design principles by investigating the ""design space for concatenative programming languages"" and aims to ""capture the essence of the concatenative paradigm.""",yes,"The paper presents a core programming language with formal semantics and type system, providing a clear theoretical foundation.",yes,"The abstract doesn't mention implementation details, focusing instead on theoretical contributions.",yes,"The paper's focus is clearly theoretical, developing formal foundations and type systems rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be a dissertation, which typically has accessible full text through academic channels, but this cannot be confirmed from the abstract alone.",Include,"A comprehensive theoretical investigation of concatenative programming languages, presenting a rigorous formal framework with reduction semantics, sound type system, and type inference algorithm. The research provides a fundamental analysis of programming paradigm foundations, focusing on theoretical contributions that explore the design space of stack-based programming languages. The study meets multiple screening criteria through its mathematical approach to language design principles and paradigm theory.",4.9
Assembling Paradigms of Programming in Software Engeneering,E. M. Lavrischeva,10.4236/JSEA.2016.96021,https://doi.org/10.4236/JSEA.2016.96021,-,5,2016,maybe,"While the paper discusses programming paradigms, it is unclear whether it analyzes fundamental constructs at a theoretical level.",maybe,"The abstract mentions ""formal means"" and ""formal"" methods, but the description is vague. While it claims to present formal approaches, the level of mathematical rigor is unclear.",yes,"The paper explicitly focuses on programming paradigms and their assembly, though the theoretical depth is unclear from the abstract.",maybe,"The paper discusses programming paradigms and their assembly, but does not explicitly address orthogonality or minimality. It is somewhat related but not clearly focused on fundamental design principles.",maybe,"The paper appears to have some theoretical elements through its discussion of formal methods and paradigms, but the abstract does not clearly demonstrate a strong mathematical framework.",maybe,"The paper mentions ""instrumental-technological complex (ITC)"" and implementation aspects, but it is unclear if these serve theoretical contributions or are the primary focus.",maybe,"The paper seems to focus on a theoretical approach to assembling paradigms, but the abstract's poor clarity makes it difficult to assess the depth of theoretical contribution.",yes,"The paper is written in English, though it contains some grammatical errors and awkward phrasing.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract presents a discussion of programming paradigms with claims of formal methods, but suffers from significant grammatical issues and unclear theoretical depth. While touching on paradigm assembly and interfaces, the text lacks clear demonstration of rigorous mathematical frameworks or fundamental theoretical contributions. The poor writing quality and ambiguous theoretical approach create substantial uncertainty about meeting the screening criteria.",2.9
"On Reconciling Objects, Components, and Eciency in Programming Languages","Peter H. Fr√∂hlich, A. Gal, M. Franz",-,-,-,4,2002,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on message handling and forwarding mechanisms at a theoretical level.",no,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches. While it discusses ""strongly-checked"" languages, it does not clearly indicate formal analysis methods.",yes,"The paper directly examines programming paradigms, specifically the relationship between component-oriented and object-oriented programming, and provides comparative theoretical analysis.",maybe,"The paper discusses language design principles, particularly focusing on component-oriented programming and its relationship to object-oriented programming. It examines fundamental design concepts like ""stand-alone messages and generic message forwarding.""",no,"The paper appears to have some theoretical foundation in analyzing programming paradigms, but the abstract does not explicitly mention mathematical frameworks or formal theoretical foundations.",maybe,"The paper discusses implementation aspects (execution model, dynamic recompilation) but uses these to support broader theoretical contributions about language design and paradigms.",maybe,"The paper appears to make theoretical contributions by analyzing fundamental paradigm relationships and proposing new language design concepts. However, it also discusses practical implementation aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text accessibility cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores fundamental programming language design principles, particularly examining the relationship between component-oriented and object-oriented programming paradigms. While demonstrating strong theoretical contributions in paradigm analysis and language construct examination, the study lacks explicit formal mathematical frameworks or rigorous verification approaches. The work provides a nuanced investigation of programming language design principles with a focus on theoretical understanding and paradigmatic relationships.",4.3
Dagstuhl Seminar 9538 New Trends in the Intergration of Paradigms,Chris Hankin,-,-,-,0,1995,yes,The paper indicates analysis of fundamental programming language constructs and computational primitives at a theoretical level.,yes,"The paper mentions formal approaches including operational semantics, denotational semantics, and inference systems, and specifically references lambda-calculus and formal calculi.",yes,"The paper provides extensive discussion of programming paradigms (object-oriented, concurrent, functional, declarative) and their theoretical foundations.",yes,"The paper discusses fundamental design principles across multiple programming paradigms and their integration, including semantic basis and design methodologies.",yes,"The paper has a strong theoretical foundation through discussion of semantic frameworks, formal calculi, and deductive techniques.",yes,"While implementation is mentioned, it is clearly secondary to theoretical contributions, with implementation discussed as a consequence of theoretical understanding.",yes,"The paper clearly focuses on theoretical understanding, discussing semantic frameworks, formal analysis, and theoretical foundations rather than practical implementations.",yes,"The paper is written in English, meeting the language requirement.",maybe,"The full text of the paper is likely accessible, as it appears to be a preface from a published work.",Include,"This preface demonstrates a comprehensive theoretical exploration of programming language paradigms, presenting rigorous formal frameworks and semantic analyses across multiple computational approaches. The text extensively discusses fundamental design principles, theoretical foundations, and comparative paradigm analysis, with a strong emphasis on mathematical and deductive methodologies. Its focus on theoretical understanding and formal verification techniques makes it a robust candidate for scholarly investigation of programming language foundations.",4.9
A framework for programming denotational semantics in C++,N. Papaspyrou,10.1145/242903.242913,https://doi.org/10.1145/242903.242913,SIGP,3,1996,yes,"The paper analyzes fundamental programming language constructs through denotational semantics, meeting this criterion.",yes,"The paper deals with denotational semantics, which is a formal mathematical framework for analyzing programming languages, strongly meeting this criterion.",yes,"The paper explicitly compares object-oriented (C++) and functional programming paradigms, meeting this criterion.",maybe,"The paper discusses implementing denotational semantics in C++, which relates to fundamental language design principles, though not explicitly addressing orthogonality or minimality.",yes,"Denotational semantics provides a formal theoretical foundation, and the paper appears to work within this framework, meeting this criterion.",yes,"The implementation discussion appears to serve theoretical purposes, specifically to demonstrate how denotational semantics can be implemented in an object-oriented language, meeting this criterion.",maybe,"The paper appears to focus on theoretical aspects of implementing denotational semantics, though it has some practical implementation components. The theoretical contribution seems substantial.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research explores denotational semantics implementation in C++, demonstrating a robust theoretical approach to programming language paradigms with a strong formal mathematical framework. By comparing object-oriented and functional programming perspectives, the study provides a comprehensive analysis of fundamental language constructs while maintaining a theoretical focus on computational primitives and paradigm foundations.",4.6
A Brief Overview of the Pawns Programming Language,Lee Naish,10.48550/arXiv.2409.03152,https://doi.org/10.48550/arXiv.2409.03152,Software,0,2024,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including type systems, sharing analysis, and the integration of different programming paradigms.",yes,"The paper describes a formal sharing analysis framework and type system that provides mathematical guarantees about program behavior. The compiler performs ""extensive sharing analysis"" with formal properties.",yes,"The paper directly examines the theoretical foundations of combining functional and imperative programming paradigms, providing a comparative theoretical analysis of how these paradigms can be integrated.",yes,"The paper explicitly discusses fundamental design principles in combining functional and imperative programming paradigms, including orthogonality in how different programming styles are integrated.",yes,"The paper presents a theoretical foundation for combining functional and imperative programming, including formal type systems and sharing analysis that provides mathematical guarantees about program behavior.",yes,"While implementation aspects are discussed (compiler analysis), they serve to support the broader theoretical contributions about language design and paradigm integration.",yes,"The paper's primary focus is on theoretical contributions to programming language design, including novel type systems and sharing analysis frameworks.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of programming language design, focusing on the integration of functional and imperative paradigms through a novel type system and sharing analysis framework. By providing mathematical guarantees about program behavior and examining fundamental computational constructs, the study offers a substantive theoretical contribution to programming language foundations. The work demonstrates a sophisticated approach to paradigm integration, supported by formal mathematical principles and a comprehensive analysis of language design principles.",4.9
"Join inverse rig categories for reversible functional programming, and beyond","R. Kaarsgaard, Mathys Rennela",10.4204/EPTCS.351.10,https://doi.org/10.4204/EPTCS.351.10,Mathematical Foundations of Programming Semantics,6,2021,yes,"The study analyzes fundamental programming language constructs at a theoretical level, specifically focusing on reversible computation semantics, which meets the fundamental analysis criterion.",yes,"The paper clearly presents a formal mathematical framework, using ""join inverse rig categories"" as a categorical model for reversible computing, which strongly meets the formal framework criterion.",yes,"The paper examines the foundations of reversible computing as a computational paradigm and provides theoretical analysis, which meets the paradigm theory criterion.",yes,"The paper investigates fundamental design principles in programming languages, specifically focusing on reversible computing and its formal semantics, which strongly meets the language design principles criterion.",yes,"The study has a strong theoretical foundation, using category theory to model reversible programming languages, which clearly meets the theoretical foundation criterion.",yes,"The paper appears to focus on theoretical contributions rather than implementation details, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical understanding, developing formal semantics and categorical models rather than practical applications, which strongly meets the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical investigation of reversible computing through formal mathematical frameworks, specifically utilizing join inverse rig categories to model programming language semantics. The study demonstrates strong alignment with theoretical programming language research, focusing on fundamental design principles, paradigm foundations, and categorical modeling of computational constructs. Its comprehensive theoretical approach and mathematical framework provide significant insights into reversible computing's underlying structural principles.",4.9
On Functional Programming,Lidia Gorognaya,10.32603/2071-2340-2021-3-57-75,https://doi.org/10.32603/2071-2340-2021-3-57-75,Computer tools in education,1,2021,yes,"The paper analyzes fundamental programming language constructs and paradigms at a theoretical level, particularly focusing on functional programming.",no,"The abstract mentions an ""informal definition"" of programming paradigms and does not indicate the use of formal mathematical frameworks.",yes,"The paper explicitly focuses on comparing programming paradigms, particularly functional programming, and provides theoretical analysis of paradigm foundations.",maybe,"The paper discusses programming paradigms and their comparison, but does not explicitly focus on orthogonality or minimality. It does discuss fundamental principles of functional programming.",maybe,"While the paper discusses theoretical aspects of programming paradigms, it appears to use informal rather than formal theoretical foundations.",yes,"The paper discusses implementation aspects (parallel computing, program development) but uses these to support theoretical contributions about paradigms.",yes,"The paper appears to make theoretical contributions about programming paradigms and their comparison, though it also discusses practical applications.",yes,"The paper appears to be written in English, though the writing style suggests it might be a translation.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The study provides a comprehensive theoretical exploration of functional programming paradigms, offering deep insights into programming language foundations and comparative analysis. While demonstrating strong theoretical contributions and fundamental analysis of programming constructs, the research lacks explicit formal mathematical frameworks and exhibits some uncertainty regarding full-text accessibility. The work primarily focuses on paradigm theory, theoretical understanding, and fundamental programming language principles.",4
The Multi-Paradigm Synchronous Programming Language,"L. Holenderski, A. Poign√©",-,-,-,4,1998,yes,The paper appears to analyze fundamental language constructs at a theoretical level through the lens of Boolean automata.,yes,"The paper presents Boolean automata as a formal intermediate format, suggesting a formal mathematical framework for analysis.",yes,"The paper explicitly deals with multiple programming paradigms (Lustre, Esterel, Argos) and their combination, strongly meeting this criterion.",maybe,"The paper discusses translation rules between programming languages, which relates to language design principles, though it does not explicitly mention orthogonality or minimality.",maybe,"The use of Boolean automata as a common intermediate format implies a theoretical foundation, though the depth is not clear from the abstract.",yes,"The abstract suggests the implementation aspects (translation rules) serve theoretical goals (combining paradigms), meeting this criterion.",yes,The focus on uniform translation rules and theoretical combination of paradigms suggests a theoretical contribution rather than purely practical work.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The study presents a rigorous theoretical approach to programming language translation, focusing on formal mathematical frameworks and paradigm combination through Boolean automata. By examining uniform translation rules across multiple synchronous programming languages, the research demonstrates a strong theoretical contribution to understanding programming language design principles and computational paradigms. The work appears to provide a fundamental analysis of language constructs with a clear emphasis on theoretical foundations rather than purely practical implementation.",4.6
Layered architecture of multiple programming language system for multiparadigm programming,"S. Sugimoto, T. Sakaguchi, K. Tabata",10.1109/ICCL.1992.185482,https://doi.org/10.1109/ICCL.1992.185482,Proceedings of the 1992 International Conference on Computer Languages,0,1992,yes,"The paper analyzes fundamental programming language constructs (control structures, data types, reference protocols) at a theoretical level through its layered architecture approach.",no,The abstract doesn't explicitly mention formal mathematical frameworks or verification approaches. The description appears more architectural than formal.,yes,The paper explicitly focuses on multiparadigm programming and discusses how different paradigms can be integrated through a layered architecture.,maybe,"The paper discusses a layered architecture for multiparadigm programming, which relates to fundamental design principles. However, it doesn't explicitly address orthogonality or minimality.",no,"While the paper presents a theoretical architecture, it's not clear if it includes formal mathematical foundations. The focus seems more structural than theoretical.",maybe,"The paper discusses implementation aspects (sequential processors, language-specific constructs) but uses these to support broader theoretical contributions about multiparadigm programming.",maybe,"The paper appears to make a theoretical contribution by proposing a unified framework for multiparadigm programming. However, it seems more focused on architectural design than pure theory.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"A theoretical exploration of multiparadigm programming architecture demonstrates strong potential in examining fundamental language constructs and paradigm integration. While the study offers insights into programming language design principles, it lacks explicit formal mathematical frameworks, which may limit its theoretical depth. The research provides a structural approach to understanding programming paradigms through a layered architectural model.",4
Visualization of the Results of the Analysis of Programming Languages for Their Superficial Comparison,L. Gorodnyaya,10.25205/1818-7900-2021-19-2-29-52,https://doi.org/10.25205/1818-7900-2021-19-2-29-52,Vestnik NSU. Series: Information Technologies,0,2021,yes,The paper analyzes fundamental programming language constructs through semantic decomposition and paradigm analysis.,maybe,"The abstract mentions ""formalization"" and ""semantic decomposition,"" suggesting some formal framework, though the depth isn't entirely clear.",yes,"The paper explicitly focuses on ""paradigm analysis"" and ""comparing programming paradigms.""",maybe,"The paper discusses ""expressive power of languages"" and ""decomposition of programs,"" which relates to fundamental design principles.",yes,"The paper appears to have a theoretical foundation, discussing semantic decomposition and formal analysis of programming paradigms.",yes,The paper discusses implementation aspects but primarily in service of theoretical understanding of programming paradigms.,maybe,"The paper appears to focus on theoretical aspects rather than practical implementation, though it does mention practical applications.",yes,"The paper appears to be written in English, though there are some minor grammatical issues suggesting possible translation.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research demonstrates a strong theoretical approach to programming language analysis, focusing on paradigm theory, semantic decomposition, and fundamental design principles. While showing robust engagement with theoretical foundations and comparative analysis of programming paradigms, the study exhibits some uncertainties regarding the depth of its formal framework and full-text accessibility. The work appears to contribute meaningfully to understanding programming language constructs through a rigorous theoretical lens.",4.3
A Formal Basis for the Perception of Programming as a Language Design Activity,"P. Bailes, T. Chorvat, I. Peake",-,-,-,3,1994,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on declarations and language extensions, meeting this criterion.",yes,"The abstract explicitly mentions ""denotational semantics"" and formal justification, indicating a formal mathematical framework is used, strongly meeting this criterion.",yes,"The paper directly examines programming paradigms, specifically discussing how language design relates to functional programming and comparing it with application programming, strongly meeting this criterion.",yes,"The paper directly addresses language design principles, particularly focusing on how language design can be considered a programming paradigm, strongly meeting this criterion.",yes,"The paper appears to have a strong theoretical foundation, using denotational semantics and formal analysis of language design, well meeting this criterion.",yes,"The paper appears to use implementation aspects (denotational semantics) to support theoretical contributions rather than focusing on practical implementation, meeting this criterion.",yes,"The paper focuses on theoretical understanding of language design as a programming paradigm, rather than practical aspects, well meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract demonstrates a rigorous theoretical exploration of programming language design, utilizing denotational semantics and formal mathematical frameworks to analyze language paradigms. It provides a comprehensive examination of fundamental programming constructs, focusing on theoretical contributions that bridge language design principles with functional programming concepts. The research appears to offer a sophisticated, paradigm-theoretical approach to understanding programming language foundations.",4.6
Universal Policies for Software-Defined MDPs,"Daniel Selsam, Jesse Michael Han, L. D. Moura, Patrice Godefroid",-,-,arXiv.org,2,2020,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly through the 'choose' primitive and its relationship to nondeterministic choice, which meets the fundamental analysis criterion.",yes,"The paper uses Markov Decision Processes (MDPs) as a formal mathematical framework for analyzing programming language properties, which clearly meets the formal framework criterion.",yes,"The paper explicitly introduces a new programming paradigm and provides theoretical analysis of its foundations, which strongly meets the paradigm theory criterion.",yes,"The paper introduces a new programming paradigm and language (Dodona) with specific design principles around oracle-guided decision programming and nondeterministic choice, which strongly meets the language design principles criterion.",yes,"The paper presents a theoretical foundation based on MDPs and formalizes the concept of oracle-guided decision programming, which meets the theoretical foundation criterion.",yes,"While the paper includes implementation aspects (interpreter, meta-interpreters), these serve to support and demonstrate the theoretical contributions rather than being the primary focus, which meets the implementation focus criterion.",yes,"The paper makes clear theoretical contributions through its novel programming paradigm and formal framework, rather than focusing on practical aspects alone, which meets the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A novel programming paradigm introducing oracle-guided decision programming demonstrates strong theoretical foundations through Markov Decision Processes and formal mathematical frameworks. The research presents a comprehensive theoretical contribution by analyzing fundamental language constructs, introducing a new programming language (Dodona), and exploring computational primitives at a rigorous theoretical level. The study's focus on paradigm theory, language design principles, and formal analysis provides significant insights into programming language development.",4.6
"Programming languages and systems, ESOP '94 : 5th European Symposium on Programming, Edinburgh, U.K., April 11-13, 1994 : proceedings",D. Sannella,-,-,-,0,1994,yes,"The collection provides strong evidence of fundamental analysis of programming language constructs, including primitive objects, behavioral semantics, abstractor semantics, and functional programming primitives.",yes,"The collection includes strong evidence of formal frameworks, such as œÄ-nets, Œª-calculus, process algebra, denotational semantics, formal type systems, and mathematical frameworks for constraint logic programming.",yes,"Several titles in the collection indicate paradigm-level analysis, including suffix trees in the functional programming paradigm, first-class polymorphism for ML, and a functional formulation of grammar analysis.",yes,"Several titles in the collection suggest investigation of fundamental language design principles, including type classes, shapely types, and foundational issues in constraint logic programming.",yes,"The collection clearly presents theoretical foundations, with multiple papers focusing on formal semantics, type theory, and mathematical frameworks.",maybe,"While some implementation aspects are mentioned, they appear to serve theoretical purposes, such as compilation of head and strong reduction in support of theoretical analysis.",yes,"The collection strongly emphasizes theoretical contributions rather than practical applications, with a focus on formal semantics, type theory, and mathematical foundations.",yes,"The paper appears to be written in English, as the abstract is in English.",maybe,"The full text of the paper may be accessible through academic channels, given that it appears to be a collection of academic papers.",Include,"This collection of theoretical computer science papers demonstrates strong alignment with programming language theory, formal semantics, and type systems across multiple screening criteria. The titles reveal deep theoretical investigations into fundamental programming language constructs, paradigm foundations, and mathematical frameworks, with a clear emphasis on rigorous theoretical contributions rather than practical applications. Multiple papers explore formal frameworks, language design principles, and computational primitives at a sophisticated theoretical level.",4.6
Linguistic paradigms for programming complex distributed systems,G. Agha,10.1145/234528.234730,https://doi.org/10.1145/234528.234730,CSUR,3,1996,yes,"The paper analyzes fundamental programming language constructs (actors, concurrency, message passing) at a theoretical level, meeting the fundamental analysis criterion.",maybe,"While the paper mentions extending lambda calculus with actor constructs, it does not explicitly present a formal mathematical framework in the abstract. However, the theoretical nature of the discussion suggests formal analysis may be present in the full text.",yes,"The paper examines programming paradigm foundations, specifically the actor model as a fundamental paradigm for concurrent computation, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of the actor model, including orthogonality in how actors can be extended from sequential languages, meeting the language design principles criterion.",yes,"The paper appears to have a strong theoretical foundation, discussing fundamental concepts of actor models, concurrency, and interaction patterns, meeting the theoretical foundation criterion.",yes,"While implementation aspects are mentioned (runtime systems, memory management), they serve to support the theoretical discussion rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical understanding of actor models and interaction patterns rather than practical implementations, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The presence of citations suggests the paper is likely an academic publication that would be accessible, but the full-text accessibility cannot be determined from the abstract alone.",Include,"The abstract demonstrates a strong theoretical approach to programming language design, focusing on actor models and concurrent computation with clear examination of fundamental paradigm principles. It meets multiple screening criteria through its rigorous exploration of language constructs, interaction patterns, and theoretical foundations, with particular emphasis on understanding computational primitives at a conceptual level. The research appears to contribute substantively to theoretical understanding of programming paradigms while maintaining a sophisticated analytical perspective.",4.6
Applicative bidirectional programming,"Kazutaka Matsuda, Meng Wang",10.1017/S0956796818000096,https://doi.org/10.1017/S0956796818000096,Journal of functional programming,3,2018,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically focusing on bidirectional transformations and their relationship to functional programming.",maybe,"The abstract suggests a formal framework (""framework for applicative-style and higher-order bidirectional programming"") and mentions bridging different approaches, indicating some formal analysis.",yes,"The paper explicitly examines programming paradigms, specifically bidirectional programming, and compares different approaches (lens framework vs. semantic bidirectionalization).",maybe,"The paper discusses bidirectional programming as a paradigm and presents a framework for it, which relates to fundamental design principles. However, it doesn't explicitly address orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation, discussing semantic bidirectionalization and lens frameworks, suggesting mathematical rigor.",maybe,"The abstract suggests the implementation discussion serves theoretical purposes, particularly in how it enables bidirectional transformations in standard functional languages.",yes,"The paper appears to make theoretical contributions by developing a new framework and bridging different approaches, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of bidirectional programming paradigms, offering a novel framework that bridges different computational approaches with strong mathematical foundations. By examining fundamental programming language constructs and developing a new theoretical perspective on bidirectional transformations, the study demonstrates significant potential for advancing understanding of programming language design principles. The work appears to make substantive theoretical contributions while maintaining a focus on computational semantics and paradigmatic analysis.",4.6
Theoretical Foundations of an Environment-Based Multiparadigm Language,"Mario Blazevic, Z. Budimac, M. Ivanoviƒá",10.3233/INF-2000-11101,https://doi.org/10.3233/INF-2000-11101,Informatica,0,2000,yes,"The paper analyzes fundamental programming language constructs across multiple paradigms at a theoretical level, meeting the fundamental analysis criterion.",yes,"The paper presents E-calculus as a formal mathematical framework extending Œª-calculus, strongly meeting the formal framework criterion.",yes,"The paper strongly meets the paradigm theory criterion by examining multiple programming paradigms (functional, logical, procedural, and object-oriented) and their theoretical foundations in GENS.",maybe,"The paper discusses a multiparadigm language (GENS) and its theoretical foundation (E-calculus), suggesting investigation of fundamental design principles, though orthogonality and minimality are not explicitly mentioned.",yes,"The abstract explicitly states that the paper defines and introduces E-calculus as the theoretical foundation of GENS, clearly meeting the theoretical foundation criterion.",yes,"While implementation is mentioned, it appears to serve theoretical purposes (defining semantics and implementing different paradigms), meeting the implementation focus criterion.",yes,"The focus of the paper appears to be primarily theoretical, presenting a new calculus and its application to programming paradigms, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A theoretical programming language study presenting a novel multiparadigm language (GENS) with a rigorous mathematical framework (E-calculus) that systematically explores fundamental programming paradigms across functional, logical, procedural, and object-oriented domains. The research demonstrates a strong theoretical contribution by defining a comprehensive calculus for analyzing and implementing diverse programming language constructs at a fundamental level.",4.6
Multiparadigm Programming with Object-Oriented Languages,"K. Davis, Y. Smaragdakis, J. Striegnitz",10.1007/3-540-36208-8_13,https://doi.org/10.1007/3-540-36208-8_13,ECOOP Workshops,5,2002,maybe,"The paper examines fundamental programming language constructs in relation to paradigms, though the depth of theoretical analysis is unclear from the abstract.",maybe,"The abstract mentions ""theoretical treatments"" but does not explicitly indicate whether these involve formal mathematical frameworks. This is uncertain from the abstract.",yes,"The paper explicitly examines programming paradigms and their relationship to OO languages, including comparative analysis of different paradigms, strongly aligning with this criterion.",maybe,"The paper discusses programming language facilities and their relationship to paradigms, but does not explicitly focus on orthogonality or minimality. It is somewhat relevant but not strongly aligned with this criterion.",maybe,"While the paper appears to have some theoretical elements (""theoretical treatments""), it seems to focus more on practical implementations and applications rather than a formal theoretical foundation.",yes,"The paper discusses implementations but uses them to support broader theoretical questions about paradigm support in OO languages, meeting this criterion.",maybe,"The paper appears to balance theoretical and practical aspects, discussing both theoretical treatments and practical implementations. It is not exclusively practical but does not seem purely theoretical either.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract demonstrates strong engagement with programming paradigm theory, particularly examining the relationship between object-oriented languages and alternative programming paradigms. While showing theoretical potential through discussions of paradigm support and theoretical treatments, the work appears to balance theoretical and practical perspectives without presenting a deeply formal mathematical framework. The research seems more oriented toward comparative analysis and implementation exploration rather than pure theoretical contribution.",3.5
Semantics-preserving inlining for metaprogramming,"Nicolas Stucki, Aggelos Biboudis, S. Doeraene, Martin Odersky",10.1145/3426426.3428486,https://doi.org/10.1145/3426426.3428486,SCALA@SPLASH,5,2020,maybe,"The paper analyzes inlining as a fundamental construct, but appears to do so more from a practical design perspective than a theoretical one.",no,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, and while it discusses metaprogramming architecture, it does not clearly indicate a formal analysis.",maybe,"The paper touches on multi-paradigm aspects of Scala and metaprogramming, but does not appear to provide deep theoretical analysis of paradigms.",maybe,"The paper discusses inlining as a language feature and its integration into Scala's design, touching on orthogonality and minimality principles, but it is not explicitly focused on fundamental design principles.",no,The paper appears to focus more on practical design and implementation rather than presenting a formal theoretical foundation.,no,The paper appears to focus significantly on implementation aspects (Scala-3's inlining capability) rather than using implementation to support theoretical contributions.,no,"While the paper makes contributions to understanding inlining in programming languages, it seems to focus more on practical design and implementation rather than pure theoretical contributions.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given that it appears to be about Scala-3.",Exclude,"The abstract discusses inlining in programming languages with a focus on Scala-3's design, but lacks strong evidence of formal theoretical frameworks or rigorous mathematical analysis. While touching on language design principles and metaprogramming, the paper appears more oriented towards practical implementation than deep theoretical contributions, potentially limiting its alignment with the screening criteria.",3.2
Reusable Specification of Agent-Based Models,David Fisher,10.1109/WETICE.2010.30,https://doi.org/10.1109/WETICE.2010.30,2010 19th IEEE International Workshops on Enabling Technologies: Infrastructures for Collaborative Enterprises,1,2010,yes,"The paper analyzes fundamental programming language constructs, particularly in how they relate to modeling and simulation.",maybe,"The abstract mentions ""property-based types"" and ""independent validation,"" suggesting some formal framework, though the depth of mathematical rigor isn't entirely clear from the abstract.",yes,"The paper directly examines programming paradigm foundations, specifically comparing object-oriented approaches with property-based approaches, strongly meeting this criterion.",yes,"The paper discusses fundamental design principles in programming languages, specifically addressing limitations in object-oriented paradigms and proposing property-based types as an alternative, strongly meeting this criterion.",maybe,"The paper appears to have a theoretical foundation in its approach to modeling and simulation, particularly in how it addresses fundamental limitations in existing paradigms. However, the mathematical framework isn't explicitly detailed in the abstract.",yes,The abstract suggests the implementation aspects (automated construction of simulations) serve to support the theoretical contributions about modeling and paradigm limitations.,yes,"The paper makes theoretical contributions by addressing fundamental modeling limitations and proposing new approaches, and it's not focused solely on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a theoretically grounded investigation of programming language design principles, focusing on paradigm limitations and proposing innovative property-based approaches to modeling and simulation. By addressing fundamental computational constructs and offering a comparative analysis of programming paradigms, the study demonstrates strong alignment with theoretical research criteria. The work appears to contribute substantively to understanding programming language foundations through a rigorous examination of modeling and type-based approaches.",4.6
Certifying Choreography Compilation,"L. Cruz-Filipe, F. Montesi, Marco Peressotti",10.1007/978-3-030-85315-0_8,https://doi.org/10.1007/978-3-030-85315-0_8,International Colloquium on Theoretical Aspects of Computing,18,2021,yes,"The study analyzes fundamental programming language constructs at a theoretical level, particularly focusing on concurrent and distributed programming primitives.",yes,"The paper presents a formal mathematical framework, specifically mentioning the use of ""process calculus"" and discussing formal proof of compilation correctness, indicating a rigorous mathematical treatment.",yes,"The paper explicitly examines programming paradigms, specifically the relationship between global interactions and local actions in concurrent/distributed systems.",maybe,"The paper discusses choreographic programming as a paradigm, which relates to fundamental design principles, though it does not explicitly address orthogonality or minimality.",yes,"The paper has a clear theoretical foundation, focusing on formal compilation and proof of correctness between different programming paradigms.",yes,The implementation aspects (compilation) serve to support theoretical contributions about paradigm relationships and formal correctness.,yes,"The paper clearly focuses on theoretical contributions, particularly in proving compilation correctness and relating different programming paradigms.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature of the paper suggests it is likely an academic paper with accessible full text, though this cannot be determined from the abstract alone.",Include,"A rigorous theoretical study exploring choreographic programming paradigms with a strong formal mathematical framework, focusing on compilation correctness and fundamental programming language constructs. The research provides a comprehensive analysis of concurrent and distributed system programming, demonstrating deep theoretical contributions across multiple programming language design principles.",4.9
Semantics of Alan,Francesco Pagliarecci,-,-,Starting AI Researchers' Symposium,1,2006,yes,The paper meets this criterion as it analyzes fundamental language constructs through formal operational semantics.,yes,The paper strongly meets this criterion as it uses Maude (rewriting logic language) for formal specification and mentions model checking and formal reasoning capabilities.,yes,The paper strongly meets this criterion as it explicitly examines the integration of two programming paradigms (agent-oriented and object-oriented) and their theoretical foundations.,maybe,"The paper discusses the integration of agent-oriented and object-oriented programming paradigms, which relates to fundamental design principles, but it does not explicitly mention orthogonality or minimality.",yes,The paper clearly meets this criterion as it presents a formal definition of the language and its operational semantics using a rigorous mathematical framework (Maude).,yes,The paper meets this criterion as the implementation aspects discussed serve to support the theoretical contributions through formal modeling and reasoning.,yes,The paper meets this criterion as the focus is on formal definition and theoretical analysis rather than practical implementation or optimization.,yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A formal programming language study presenting a rigorous mathematical framework for integrating agent-oriented and object-oriented paradigms through Maude's rewriting logic. The research provides a theoretical foundation for language design, focusing on operational semantics and formal reasoning capabilities across programming paradigms. Its strong emphasis on theoretical analysis and mathematical specification aligns closely with fundamental programming language research criteria.",4.6
Supporting the Design of Adaptable Operating Systems Using Aspect-Oriented Frameworks,"P. Netinant, Constantinos A. Constantinides, T. Elrad, M. Fayad, A. Bader",-,-,International Conference on Parallel and Distributed Processing Techniques and Applications,13,2000,maybe,"While the paper analyzes fundamental design principles, it's more focused on operating systems than core programming language constructs.",maybe,"While the paper mentions a ""language-neutral aspect-oriented design framework,"" it's not clear if this involves formal mathematical frameworks or rigorous verification approaches.",yes,"The paper examines programming paradigms, specifically discussing aspect-oriented programming and comparing it with other approaches like OOP.",yes,"The paper discusses fundamental design principles, particularly focusing on separation of concerns and aspect-oriented programming principles. However, it's more focused on operating systems than programming languages specifically.",maybe,"The paper appears to have some theoretical foundation in aspect-oriented programming, but the abstract doesn't explicitly mention formal mathematical frameworks.",yes,The discussion of implementation seems to serve theoretical contributions about design frameworks and separation of concerns.,yes,"The paper appears to focus on theoretical contributions regarding design frameworks and separation of concerns, rather than purely practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text accessibility of the paper cannot be determined from the abstract alone, though the institutional affiliation suggests it might be accessible through academic channels.",Exclude,"The research explores aspect-oriented programming principles with a focus on operating system design, demonstrating theoretical contributions in programming paradigms and design frameworks. While the study addresses several key screening criteria related to theoretical foundations and paradigm analysis, its primary emphasis on operating systems rather than core programming language constructs introduces some uncertainty about perfect alignment with the review's specific focus.",3.5
Integrating Information Flow Analysis in Unifying Theories of Programming,"C. Mu, Guoqiang Li",10.1109/PRDC53464.2021.00018,https://doi.org/10.1109/PRDC53464.2021.00018,Pacific Rim International Symposium on Dependable Computing,1,2021,yes,"The paper analyzes fundamental aspects of programming systems through the lens of information flow control at a theoretical level, meeting this criterion.",yes,"The paper explicitly uses UTP (Unifying Theories of Programming) as a formal mathematical framework and discusses formal approaches to modeling and reasoning, strongly meeting this criterion.",yes,"The paper explicitly mentions ""different paradigms"" and discusses applying the approach across ""various families of specification languages and programming paradigms,"" meeting this criterion well.",maybe,"The paper discusses information flow control in programming systems, which relates to fundamental design principles, though it does not explicitly address orthogonality or minimality.",yes,"The paper presents a formal theoretical foundation using UTP and discusses formal approaches to information flow control, clearly meeting this criterion.",yes,"While implementation aspects are mentioned, they serve to support the broader theoretical contributions about information flow control, meeting this criterion.",yes,"The paper focuses on theoretical contributions through formal modeling and reasoning rather than practical implementation, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical study exploring information flow control through formal mathematical frameworks, specifically utilizing Unifying Theories of Programming to analyze programming paradigms and language design principles. The research provides a comprehensive theoretical approach to understanding computational systems, with strong emphasis on formal modeling, paradigm theory, and fundamental analysis of programming language constructs.",4.7
Method of Paradigmatic Analysis of Programming Languages and Systems,L. Gorodnyaya,10.20948/abrau-2019-03,https://doi.org/10.20948/abrau-2019-03,Conference on Scientific Services & Internet,4,2019,yes,The paper analyzes fundamental aspects of programming languages through the lens of paradigms and their semantic characteristics.,maybe,"While the paper mentions ""objective criteria"" and ""classification,"" it doesn't explicitly indicate use of formal mathematical frameworks or rigorous verification approaches.",yes,"The paper explicitly focuses on programming paradigms, their classification, and comparative analysis.",maybe,"The paper discusses ""expressive power of languages"" and ""complexity of programming systems,"" which relates to fundamental design principles, though not explicitly mentioning orthogonality or minimality.",maybe,"The paper appears to present a theoretical framework for comparing programming languages, but the abstract doesn't clearly indicate the mathematical rigor of this foundation.",maybe,The paper discusses implementation aspects but seems to use these to support broader theoretical contributions about paradigms and language comparison.,maybe,"The paper appears to make theoretical contributions through its comparison method and paradigm classification, though it also mentions practical aspects like ""quality of programs.""",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract mentions a conference website, suggesting some form of accessibility, but this isn't definitively clear from the abstract alone.",Exclude,"The study presents a theoretical approach to comparing programming languages, with a strong focus on paradigm classification and semantic characteristics. While demonstrating potential theoretical contributions in programming language analysis, the abstract lacks clear evidence of rigorous mathematical frameworks or formal verification methods. The research appears to balance theoretical exploration with practical considerations of programming paradigms and language complexity.",3.5
An Approach to Class Reasoning in Symbolic Computation,"G. Cioni, A. Colagrossi, M. Temperini",10.1007/3-540-61697-7_25,https://doi.org/10.1007/3-540-61697-7_25,Design and Implementation of Symbolic Computation Systems,2,1996,yes,"The paper analyzes fundamental programming language constructs (classes, inheritance) at a theoretical level in relation to mathematical structures.",yes,"The paper presents a formal approach through axiomatization and mathematical structure modeling, indicating a rigorous mathematical framework.",yes,The paper explicitly examines the object-oriented paradigm and its application to mathematical structure representation.,maybe,"The paper discusses programming language design through the lens of object-oriented programming and class constructs, including inheritance. While not explicitly discussing orthogonality or minimality, it does address fundamental design principles through its focus on mathematical structure representation.",yes,The paper has a strong theoretical foundation through its focus on mathematical structure axiomatization and formal class reasoning.,yes,"The paper discusses programming language implementation aspects (class construct, inheritance) in service of theoretical contributions about mathematical structure representation.",yes,"The paper appears to focus on theoretical contributions through its mathematical structure modeling and class reasoning approach, rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of programming language design through object-oriented paradigm, focusing on mathematical structure axiomatization and class reasoning. The study demonstrates strong theoretical foundations by examining fundamental programming constructs, paradigm theory, and mathematical modeling principles. Its approach emphasizes formal analysis of language design principles and computational primitives at a theoretical level.",4.6
Towards a Programming Paradigm for Control Systems with High Levels of Existential Autonomy,"Eric Nivel, K. Th√≥risson",10.1007/978-3-642-39521-5_9,https://doi.org/10.1007/978-3-642-39521-5_9,Artificial General Intelligence,9,2013,yes,"The paper appears to analyze fundamental programming language constructs, particularly focusing on self-programming capabilities and autonomous operation.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, so it is unclear if the paper presents or utilizes a formal mathematical framework or rigorous verification approach.",yes,"The paper strongly meets the paradigm theory criterion, as it explicitly focuses on programming paradigm foundations, comparing existing approaches and proposing a new paradigm (Replicode).",yes,"The paper strongly meets the language design principles criterion, as it explicitly discusses the need for a new programming paradigm and language design principles, particularly focusing on self-programming capabilities and fundamental design requirements.",maybe,"The paper appears to have a theoretical foundation, discussing fundamental principles of self-programming and autonomous systems, but the level of mathematical rigor is not clear from the abstract.",yes,"The abstract suggests the paper balances theoretical contributions with implementation considerations, as it discusses both the theoretical foundations and the actual implementation of Replicode.",yes,"The paper clearly contributes to theoretical understanding, focusing on fundamental principles of self-programming and autonomous systems rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research presents a novel programming paradigm focused on self-programming and autonomous systems, with strong theoretical foundations exploring fundamental design principles and computational constructs. While demonstrating robust theoretical contributions across multiple screening criteria, the study exhibits some uncertainty regarding formal mathematical frameworks and rigorous verification approaches. The work appears to offer significant insights into programming language design principles and paradigm theory.",4.3
MicroKanren in J: an Embedding of the Relational Paradigm in an Array Language with Rank-Polymorphic Unification,R. Schorer,-,-,-,0,2020,maybe,"The paper analyzes fundamental language constructs through its examination of unification algorithms and paradigm translation, though the depth of theoretical analysis isn't entirely clear.",maybe,"The mention of ""rank-polymorphic unification algorithm"" suggests some formal mathematical framework, though the depth of formal analysis isn't clear from the abstract.",yes,"The paper explicitly examines the implementation of a language across different paradigms (relational to array programming) and discusses paradigm-specific particularities, meeting this criterion.",maybe,"The paper discusses a ""minimal relational language"" and its implementation in a different paradigm, suggesting some attention to language design principles, though it's not explicitly focused on orthogonality or minimality as primary research questions.",maybe,"The paper appears to have some theoretical elements through its discussion of unification algorithms and paradigm implementation, but the abstract doesn't strongly emphasize theoretical foundations.",maybe,"The paper discusses implementation, but it appears to serve theoretical purposes (understanding paradigm translation and unification) rather than being purely practical.",maybe,"The paper appears to make theoretical contributions through its analysis of paradigm translation and unification algorithms, though implementation details are also discussed.",yes,"The paper is written in English, meeting this criterion.",maybe,"The presence of CCS Concepts suggests this is likely a formal academic publication, but the full text accessibility cannot be determined from the abstract alone.",Exclude,"The study explores programming language paradigm translation through a reimplementation of MicroKanren, demonstrating theoretical engagement with language design principles and computational constructs. While presenting a rank-polymorphic unification algorithm and discussing paradigm-specific implementation, the research balances theoretical analysis with practical implementation considerations. The work appears to contribute to understanding programming language foundations through a comparative paradigm approach.",4
Semantic predicate types and approximation for class-based object oriented programming,"S. V. Bakel, R. Rowe",10.1145/1557898.1557901,https://doi.org/10.1145/1557898.1557901,FTfJP@ECOOP,5,2009,yes,"The paper provides strong evidence of fundamental analysis, examining basic constructs of object-oriented programming through type theory and predicate systems.",yes,"The paper presents strong evidence of using a formal mathematical framework, including a predicate system, soundness proofs, and mathematical concepts like approximants. The reference to Featherweight Java and formal calculus suggests a rigorous mathematical treatment.",yes,"The paper has a strong focus on paradigm theory, specifically examining object-oriented programming paradigm foundations and providing theoretical analysis through type systems and predicate logic.",maybe,"The paper discusses type discipline and class-based object-oriented programming principles, which relates to fundamental design principles, though it does not explicitly address orthogonality or minimality.",yes,"The paper has a clear theoretical foundation, including predicate systems, type theory, and formal semantics. It builds on established theoretical work (Abadi and Cardelli's œÇ-object calculus).",yes,"The paper appears to focus on theoretical aspects rather than implementation, with implementation details (pFJ) serving to support theoretical contributions.",yes,"The paper clearly contributes to theoretical understanding, focusing on formal type systems and semantic foundations rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature and reference to established works suggests the full text of the paper is likely accessible through academic channels, even though this cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical investigation of object-oriented programming paradigms through formal type systems and predicate logic, demonstrating strong mathematical foundations and semantic analysis. The study contributes fundamentally to programming language theory by examining class-based constructs, type discipline, and computational primitives through a sophisticated mathematical framework. Its focus on theoretical understanding and paradigm foundations provides deep insights into the underlying principles of programming language design.",4.9
Codata in Action,"P. Downen, Zachary J. Sullivan, Z. Ariola, S. Jones",10.1007/978-3-030-17184-1_5,https://doi.org/10.1007/978-3-030-17184-1_5,European Symposium on Programming,12,2019,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically examining codata as a fundamental programming abstraction.",yes,"The abstract mentions category theory, universal algebra, and logic, suggesting a formal mathematical framework. The reference to Curry-Howard isomorphism further supports the use of a formal framework.",yes,"The paper explicitly examines programming paradigms, discussing both functional and object-oriented approaches and their relationship through codata, which strongly meets the paradigm theory criterion.",yes,"The paper discusses fundamental design principles by examining codata as a programming abstraction and its relationship to different programming paradigms, which strongly meets the language design principles criterion.",yes,"The paper appears to have a strong theoretical foundation, drawing from category theory and universal algebra. The focus on codata as a fundamental concept suggests theoretical rigor.",yes,The paper discusses implementation aspects (inter-compilation techniques) but uses these to support broader theoretical contributions about codata as a programming abstraction.,yes,"The paper focuses on theoretical understanding of codata as a programming abstraction, rather than practical implementation details. While it mentions implementation techniques, these appear to support theoretical contributions.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract demonstrates a rigorous theoretical exploration of codata as a programming abstraction, drawing from category theory, universal algebra, and logic to examine fundamental programming language constructs across functional and object-oriented paradigms. By presenting a formal mathematical framework and analyzing programming language principles at a theoretical level, the study offers a comprehensive investigation of computational foundations that transcends specific implementation details. The research appears to make significant theoretical contributions to understanding programming language design principles and paradigm relationships.",4.9
Paradigms of modular system development,M. Goedicke,10.1049/PBCM017E_CH1,https://doi.org/10.1049/PBCM017E_CH1,-,10,1990,yes,The paper analyzes fundamental programming language constructs through its discussion of abstraction concepts and software system structure.,maybe,"While the paper mentions developing a specification language, it's not clear if it presents a formal mathematical framework. The approach seems more conceptual than formally rigorous.",yes,"The paper explicitly focuses on analyzing and proposing new software development paradigms, including comparative analysis of current paradigms, showing strong alignment with this criterion.",yes,"The paper discusses fundamental design principles through ""information hiding abstraction"" and ""information neglection abstraction,"" showing clear alignment with this criterion.",maybe,"The paper appears to have a theoretical foundation based on ""Divide and Conquer"" and ""Separation of Concerns"" principles, but it's not explicitly clear if this is supported by formal mathematical frameworks.",yes,"The paper balances theoretical contributions with implementation considerations, particularly in discussing the specification language and development process models.",yes,"The paper makes theoretical contributions by proposing new paradigmatic approaches and abstraction concepts, though it also discusses practical implementation aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text of the paper may be accessible through academic channels, as it is a book chapter, but this cannot be determined from the abstract alone.",Exclude,"The study presents a comprehensive theoretical exploration of software development paradigms, focusing on fundamental design principles and proposing new abstraction concepts for programming language structure. By examining paradigm deficiencies and developing a novel approach based on principles like Divide and Conquer, the research offers significant theoretical contributions to understanding software development methodologies. The work demonstrates strong alignment with theoretical analysis criteria, though with some uncertainty regarding formal mathematical frameworks.",4.3
"Speciication, Transformation, and Programming of Concurrent Systems in Rewriting Logic","P. Lincoln, N. Mart I-Oliet, P. Lincoln, N. Mart I-Oliet, And J Meseguer",-,-,-,4,1994,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on parallel computation and rewriting logic.",yes,"The paper presents rewriting logic as a formal mathematical framework for analyzing programming language properties, including ""algebraically axiomatized data structures"" and formal rewrite rules.",yes,"The paper explicitly examines programming paradigm foundations, proposing a new declarative paradigm and analyzing its theoretical properties.",yes,"The paper clearly investigates fundamental design principles in programming languages, specifically proposing a declarative paradigm with implicit parallelism and machine-independence.",yes,"The paper has a strong theoretical foundation, evident through the use of rewriting logic, formal axiomatization, and mathematical structures for representing system states and changes.",yes,"While implementation aspects are discussed (Simple Maude, compilation techniques), these serve to support the theoretical contributions rather than being the primary focus.",yes,"The paper's primary focus is theoretical, contributing to understanding of parallel programming paradigms and their formal foundations, rather than just practical implementation.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A comprehensive theoretical exploration of programming language design principles, presenting a novel declarative paradigm with rigorous mathematical foundations in rewriting logic. The research provides a formal framework for analyzing parallel computation, demonstrating strong theoretical contributions across multiple dimensions of programming language theory. The study's focus on fundamental constructs, paradigm foundations, and mathematical structures aligns closely with advanced theoretical research in computer science.",4.9
Babelsberg: Specifying and Solving Constraints on Object Behavior,"Tim Felgentre, A. Borning, R. Hirschfeld",-,-,-,9,2014,yes,"The paper analyzes fundamental programming language constructs, particularly how encapsulation and abstraction work across different paradigms.",maybe,"While the paper presents a language (Babelsberg) and discusses formal properties, it's not explicitly clear if it uses formal mathematical frameworks for verification. The focus seems more practical.",yes,"The paper directly examines programming paradigm foundations, specifically the integration of constraint programming with imperative programming paradigms.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on the integration of constraint programming with imperative programming paradigms and the unification of encapsulation constructs.",maybe,"The paper appears to have some theoretical underpinnings in its approach to unifying paradigms, but the abstract emphasizes practical implementation and performance metrics rather than theoretical foundations.",maybe,"The abstract suggests a strong focus on implementation (Ruby extension, performance metrics, example applications), though this does support the theoretical contribution of paradigm integration.",maybe,"While the paper makes theoretical contributions regarding paradigm integration, it appears to focus significantly on practical implementation and performance aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Exclude,"The research explores programming language design principles by integrating constraint and imperative programming paradigms, with a focus on unifying encapsulation constructs across different computational approaches. While demonstrating strong theoretical foundations in paradigm analysis, the study balances theoretical contributions with practical implementation, particularly through a Ruby-based language extension that enables incremental constraint integration. The work provides insights into fundamental programming language constructs while maintaining a pragmatic approach to computational paradigm integration.",3.5
Object-oriented software specification in programming language design and implementation,"Barrett R. Bryant, V. Vaidyanathan",10.1109/CMPSAC.1998.716685,https://doi.org/10.1109/CMPSAC.1998.716685,Annual International Computer Software and Applications Conference,3,1998,yes,"The paper analyzes fundamental language constructs through formal specification and semantics, meeting the fundamental analysis criterion.",yes,"The paper explicitly uses a ""denotational semantics methodology"" and focuses on formal specification and analysis of programming language properties, indicating a strong match with the formal framework criterion.",maybe,"The abstract mentions ""language paradigms"" and discusses analysis across paradigms, indicating some coverage of paradigm theory.",maybe,"The paper discusses formal specification of programming languages and their properties, which relates to fundamental design principles, but it does not explicitly mention orthogonality or minimality.",yes,"The paper presents a formal theoretical foundation through its object-oriented formal specification approach and denotational semantics, meeting the theoretical foundation criterion.",yes,"The paper mentions prototype implementations, but these serve to support the theoretical framework rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical aspects of language specification and analysis rather than practical implementation details, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A formal specification workbench for programming languages demonstrates strong theoretical foundations through denotational semantics and object-oriented methodology. The research provides a rigorous framework for analyzing language properties across paradigms, with a focus on theoretical contributions and fundamental computational constructs. While some specific design principles remain uncertain, the study offers a comprehensive approach to programming language specification and analysis.",4.6
Adaptation of a Refactoring DSL for the Object-Oriented Paradigm,"D. J. N√©meth, D√°niel Horp√°csi, M. Tejfel",10.14232/ACTACYB.284280,https://doi.org/10.14232/ACTACYB.284280,Acta Cybernetica,0,2021,yes,"The paper analyzes fundamental programming language constructs through the lens of refactoring and behavioral equivalence, meeting the fundamental analysis criterion.",yes,"The paper explicitly mentions ""formalize automatically verifiable refactorings"" and uses ""conditional term rewrite rules"" and ""formally define"" approaches, indicating a strong match with the formal framework criterion.",yes,"The paper explicitly examines the transition from functional to object-oriented paradigms, comparing Erlang and Java approaches, meeting the paradigm theory criterion.",maybe,"The paper discusses formalization of refactorings and transformation schemes, which relates to language design principles, though it does not explicitly focus on orthogonality or minimality.",yes,"The paper presents a ""multilayered definition of equivalence"" and formal definitions for refactoring rules, indicating a strong theoretical foundation.",yes,"The implementation aspects (Java, Erlang) serve to support theoretical contributions about refactoring and equivalence, meeting the implementation focus criterion.",yes,"The paper appears to focus on theoretical contributions, particularly in formalizing refactoring rules and equivalence definitions, rather than practical patterns, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of programming language refactoring, focusing on formal mathematical frameworks and paradigm transitions between functional and object-oriented approaches. By employing conditional term rewrite rules and multilayered equivalence definitions, the study provides a sophisticated theoretical analysis of programming language properties and transformation principles. The work demonstrates strong alignment with theoretical foundations, paradigm theory, and fundamental computational analysis.",4.6
TopHat,-,10.1145/3354166.3354182,https://doi.org/10.1145/3354166.3354182,Proceedings of the 21st International Symposium on Principles and Practice of Programming Languages 2019,4,2019,yes,"The paper appears to analyze fundamental programming language constructs at a theoretical level, particularly regarding workflow specifications and communication through typed values, meeting the fundamental analysis criterion.",maybe,"The abstract explicitly mentions that TOP ""has not been given a formalisation which is suitable for formal reasoning,"" suggesting this is a gap in the current state of TOP. However, this appears to be a motivation for the paper's work, implying the paper may address this gap.",yes,"The paper clearly focuses on programming paradigm foundations, specifically Task-oriented Programming (TOP), meeting the paradigm theory criterion.",maybe,"The paper discusses a programming paradigm (TOP) and its design principles, including declarative programming style and higher-order workflows, partially meeting the language design principles criterion.",maybe,"The abstract suggests the paper aims to provide formal foundations for TOP, which would meet the theoretical foundation criterion, though it's not explicitly stated what theoretical framework is used.",yes,"The abstract mentions implementation aspects (iTasks and mTasks) but frames them as existing work, with the paper focusing on theoretical foundations, meeting the implementation focus criterion.",yes,"The abstract suggests the paper aims to provide theoretical foundations for TOP, rather than focusing on practical aspects, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract presents a programming paradigm study focused on theoretical foundations, paradigm analysis, and formal reasoning, with strong alignment to language design principles and theoretical contributions. It addresses fundamental programming language constructs through a novel approach to task-oriented programming, demonstrating potential for rigorous theoretical investigation. The research appears to bridge practical implementation with theoretical framework development, particularly in addressing the current lack of formalization in task-oriented programming.",4.6
Logic programming and constraint logic programming,Jacques Cohen,10.1145/234313.234416,https://doi.org/10.1145/234313.234416,CSUR,9,1996,yes,"The abstract provides strong evidence of fundamental analysis through examination of basic constructs like resolution, unification, and Horn clauses.",yes,"The abstract presents strong evidence of a formal mathematical framework through discussion of predicate calculus, resolution theorem proving, and formal treatment of unification. The abstract presents mathematical concepts and formal definitions.",yes,"The abstract shows a strong focus on programming paradigm foundations, specifically logic programming, and provides theoretical analysis of the paradigm's fundamental components.",maybe,"The abstract discusses fundamental principles of logic programming, including resolution and unification, which are core design principles. However, it does not explicitly address orthogonality or minimality.",yes,"The paper appears to have a clear theoretical foundation based on predicate calculus and formal logic, and the abstract suggests the paper is deeply rooted in mathematical theory.",maybe,"While Prolog is mentioned, the discussion appears to support theoretical understanding rather than focusing on implementation details.",yes,The abstract suggests a theoretical focus on understanding the foundations of logic programming rather than practical applications.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract demonstrates a robust theoretical foundation in logic programming, presenting a formal mathematical framework rooted in predicate calculus and resolution theorem proving. It provides a comprehensive examination of programming paradigm foundations, focusing on fundamental constructs like resolution and unification, with strong evidence of theoretical contribution and paradigm analysis. The work appears to offer a rigorous theoretical exploration of logic programming principles, meeting most screening criteria with high confidence.",4.6
A New Paradigm for Component-based Development,J. Granstr√∂m,10.4304/JSW.7.5.1136-1148,https://doi.org/10.4304/JSW.7.5.1136-1148,Journal of Software,4,2012,yes,"The paper analyzes fundamental programming language constructs (IO monad, worlds, world maps) at a theoretical level, strongly meeting this criterion.",yes,"The paper clearly uses formal mathematical frameworks, specifically mentioning type theory and category theory. The construction is ""carried out entirely in type theory,"" strongly meeting this criterion.",yes,"The paper explicitly examines programming paradigms, introducing a new paradigm for component-based development and providing theoretical analysis, strongly meeting this criterion.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on the decomposition of Haskell's IO monad and the theoretical foundations of component-based development, strongly meeting this criterion.",yes,"The paper has a strong theoretical foundation, building on Martin-Lof's type theory and category theory. The mathematical framework is explicit and central to the work.",maybe,"The paper mentions that the construction is ""directly implementable,"" but this appears to support the theoretical contributions rather than being the primary focus.",yes,"The paper's primary focus is theoretical, contributing to understanding of programming language foundations and component-based development. While it mentions applications, these appear to support the theoretical contributions rather than being the main focus.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but this is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language design principles, utilizing formal mathematical frameworks like type theory and category theory to analyze fundamental computational constructs. The study introduces a novel paradigm for component-based development, demonstrating strong theoretical contributions through its examination of programming language foundations and computational primitives. By focusing on theoretical understanding and mathematical frameworks, the work provides a sophisticated analysis of programming language design principles.",4.9
"Separating Concerns in Programming: Data, Control and Actions","J. Koll√°r, J. Porub√§n, Peter V√°clav√≠k",-,-,Computers and artificial intelligence,7,2012,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on control structures and action computation at a theoretical level.",maybe,"The abstract mentions ""structured application"" and ""explicitly defined synchronization,"" suggesting some formal framework, but it's not explicitly clear how rigorous the mathematical treatment is.",yes,"The paper explicitly focuses on multi-paradigm programming and discusses the theoretical foundations of different programming methodologies, strongly meeting this criterion.",yes,"The paper discusses language design principles, particularly focusing on the separation of concerns (data, control, and actions) in a multi-paradigm language, which appears to align with fundamental design principles.",maybe,"The paper appears to have a theoretical foundation in its approach to separating programming concerns and defining control structures, but the abstract doesn't explicitly detail the mathematical framework.",yes,"The paper discusses PFL implementation, but this appears to serve the theoretical contribution rather than being the primary focus.",yes,"The paper appears to make theoretical contributions by presenting a new way of separating programming concerns and defining control structures, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a theoretical exploration of multi-paradigm programming language design, focusing on separating fundamental programming concerns through a structured approach to control structures and action computation. By examining programming paradigms and proposing a novel framework for understanding computational primitives, the study demonstrates strong potential for theoretical contributions to language design principles. The work appears to offer a rigorous theoretical analysis of programming language foundations, with particular emphasis on paradigm theory and fundamental construct analysis.",4.3
THE ESSENCE OF STRATEGIC PROGRAMMING An inquiry into trans-paradigmatic genericity,"R. L√§mmel, E. Visser, Joost Visser",-,-,-,10,2002,yes,"The paper analyzes fundamental programming concepts, such as strategies as first-class citizens and data processing actions, at a theoretical level.",maybe,"The abstract mentions a ""general definition"" of strategic programming, but it is unclear whether this is a formal or mathematical framework.",yes,"The paper explicitly discusses multiple programming paradigms and how strategic programming can be realized within them, which aligns with the paradigm theory criterion.",maybe,"The paper discusses strategic programming as a generic programming idiom, which relates to language design principles, but it does not explicitly address orthogonality or minimality.",maybe,"The paper appears to provide a theoretical foundation for strategic programming, but the level of formality is not clear from the abstract.",yes,"The paper seems to balance theoretical and practical aspects, discussing both the theoretical framework and its implementation across paradigms.",yes,"The paper appears to make theoretical contributions by defining strategic programming and analyzing its realization across paradigms, rather than focusing on practical aspects.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"Strategic programming research demonstrates strong theoretical foundations across multiple programming paradigms, with a focus on fundamental language constructs and first-class data processing actions. The study provides a comprehensive exploration of generic programming principles, balancing theoretical analysis with paradigm-specific implementation insights. While showing promise in theoretical contribution, the abstract leaves some uncertainty regarding the depth of formal mathematical frameworks.",4.3
Type Theory as a Unifying Paradigm for Modern Databases,"Christoph Dorn, Haikal Pribadi",10.1145/3583780.3615999,https://doi.org/10.1145/3583780.3615999,International Conference on Information and Knowledge Management,2,2023,yes,The paper analyzes fundamental constructs through type theory and reasoning techniques at a theoretical level.,yes,"The paper clearly presents a formal mathematical framework through type theory and mentions a ""rigorous high-level approach,"" strongly meeting this criterion.",yes,"The paper examines programming paradigms, particularly in the context of database languages and knowledge management systems, comparing different approaches and proposing a new paradigm.",maybe,"The paper discusses type theoretical principles and language design, particularly focusing on TypeQL as a database language. While not explicitly discussing orthogonality or minimality, it does address fundamental design principles through type theory.",yes,"The abstract explicitly mentions ""type theoretical principles"" and ""type theoretical modeling and reasoning paradigm,"" indicating a strong theoretical foundation.",maybe,"While implementation aspects are mentioned (e.g., TypeQL), they appear to serve theoretical contributions rather than being the primary focus.",yes,"The paper appears to make theoretical contributions through its type theoretical framework and reasoning paradigm, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous type theoretical approach to programming language design emerges, presenting a novel paradigm that integrates high-level reasoning techniques with formal mathematical frameworks. The study demonstrates strong theoretical foundations by examining fundamental programming language constructs through type theory, with a focus on developing a multi-purpose database language that balances semantic modeling and practical implementation.",4.6
"Session-Based Concurrency, Reactively","Mauricio Cano, Jaime Arias, Jorge A. P√©rez",10.1007/978-3-319-60225-7_6,https://doi.org/10.1007/978-3-319-60225-7_6,Formal Techniques for (Networked and) Distributed Systems,5,2017,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on communication-centric behaviors and concurrency models.",yes,"The paper explicitly mentions using œÄ-calculus as specification languages and presents formal encodings of session-based calculi into ReactiveML, providing strong evidence of the use of a formal mathematical framework.",yes,"The paper directly examines programming paradigms, specifically focusing on session-based concurrency and synchronous reactive programming as theoretical foundations.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on session-based concurrency and reactive programming paradigms. It explicitly addresses language design through the lens of session types and œÄ-calculus.",yes,"The paper has a clear theoretical foundation, with formal models and mathematical frameworks (œÄ-calculus, session types) being central to the work.",yes,"While implementation aspects are discussed (ReactiveML), they serve to support theoretical contributions rather than being the primary focus.",yes,"The paper appears strongly theoretical, focusing on formal models, encodings, and paradigm foundations rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language paradigms, focusing on formal models of session-based concurrency and reactive programming through mathematical frameworks like œÄ-calculus. The study provides a comprehensive theoretical analysis of language design principles, examining fundamental computational constructs and paradigm foundations with a strong emphasis on formal verification and theoretical contributions.",4.9
The Multiparadigm Programming Language CCFL,Petra Hofstedt,-,-,GI Jahrestagung,0,2010,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on how constraints and functional programming interact at a theoretical level.",maybe,"The abstract mentions formal aspects like polymorphic type systems and residuation principle, suggesting some formal framework, though the depth of mathematical rigor isn't fully clear from the abstract.",yes,"The paper explicitly focuses on multiparadigm programming, combining functional and constraint-based paradigms, and provides comparative theoretical analysis.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on the integration of functional and constraint-based paradigms. It explicitly addresses language design through the CCFL language.",maybe,"The paper appears to have a theoretical foundation, discussing formal concepts like residuation principle and type systems. However, the abstract doesn't explicitly detail the mathematical framework.",maybe,"The abstract suggests a balanced approach between theoretical foundations and implementation, with implementation details serving to illustrate theoretical concepts.",yes,"The paper appears to make theoretical contributions by analyzing fundamental language constructs and their integration, rather than focusing solely on practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be an academic publication, suggesting likely accessibility of the full text, though this cannot be determined from the abstract alone.",Exclude,"The research presents a comprehensive exploration of multiparadigm programming language design, integrating functional and constraint-based paradigms with a strong theoretical foundation. By examining fundamental language constructs and providing a rigorous analysis of programming paradigms, the study offers significant insights into language design principles and theoretical contributions. The work demonstrates a nuanced approach to understanding computational primitives through a formal and comparative theoretical lens.",4.3
A Model of Interaction in Concurrent and Distributed Systems,"N. Pryce, S. Crane",10.1007/3-540-68383-6_10,https://doi.org/10.1007/3-540-68383-6_10,ESPRIT ARES Workshop,9,1998,yes,"The paper analyzes fundamental programming language constructs, specifically intercomponent interaction, at what appears to be a theoretical level.",maybe,"The abstract mentions ""a clear model of interaction,"" suggesting some formal framework, but it's not explicitly stated whether it's mathematical or rigorous.",maybe,"The paper examines different interaction paradigms and their relationship to programming environments, suggesting some paradigm theory analysis. However, it's not clear how deeply theoretical this analysis is.",yes,"The paper appears to address language design principles, specifically focusing on orthogonality in intercomponent interaction. The abstract mentions ""separating the specification of intercomponent interaction from the programming interface,"" which suggests attention to fundamental design principles.",maybe,"The paper appears to have a theoretical foundation in its model of interaction, but the abstract doesn't explicitly detail the mathematical or formal nature of this foundation.",yes,"The abstract suggests the paper balances theoretical contributions (new language approach) with practical considerations (programming environments), meeting this criterion.",yes,"The paper appears to make theoretical contributions by proposing a new language approach and analyzing interaction styles, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"The research explores programming language design principles by proposing a novel approach to intercomponent interaction, demonstrating strong theoretical contributions in language paradigm analysis. While the abstract suggests a rigorous examination of fundamental programming constructs, some uncertainty remains about the depth of formal mathematical frameworks underlying the study. The work appears to balance theoretical insights with practical programming environment considerations.",4.3
Systematic Parallel Programming,Juergen Dingel,-,-,-,9,2000,yes,"The paper analyzes fundamental programming language constructs related to parallelism and concurrency at a theoretical level, meeting the fundamental analysis criterion.",yes,"The paper presents a formal refinement calculus with compositional trace semantics and formal verification approaches for parallel programming, meeting the formal framework criterion.",yes,"The paper explicitly addresses both shared-variable and message-passing concurrency paradigms and provides a theoretical framework that ""straddles both concurrency paradigms,"" meeting the paradigm theory criterion.",yes,"The paper discusses formal design principles for parallel programming, including orthogonality in handling different concurrency paradigms, and presents a refinement calculus for structured program development.",yes,"The paper is built on a formal theoretical foundation, including trace semantics, refinement relations, and assumption-commitment reasoning, meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed, they are clearly secondary to the theoretical framework and serve to support the theoretical contributions, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions through its formal calculus and semantics, rather than practical implementations, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper may be accessible through academic channels, as it is a thesis, but this cannot be determined from the abstract alone.",Include,"A comprehensive theoretical exploration of parallel programming that presents a rigorous formal framework for understanding concurrency paradigms through a refinement calculus. The research provides a deep mathematical analysis of programming language design principles, addressing fundamental constructs of shared-variable and message-passing concurrency with a strong emphasis on theoretical foundations and formal verification. The study offers a sophisticated approach to structuring parallel program development, focusing on theoretical contributions that transcend practical implementation details.",4.9
Reasoning about Names In Higher-Order Abstract Syntax,Ivan Scagnetto,-,-,-,11,2002,yes,"The paper analyzes fundamental aspects of programming languages and formal systems at a theoretical level, meeting this criterion.",yes,"The paper explicitly discusses formal methods, logical frameworks, and constructive type theory as formal mathematical frameworks for analyzing programming language properties, strongly meeting this criterion.",maybe,"While the paper discusses formal systems and reasoning about programming languages, it does not explicitly focus on paradigm foundations or comparative analysis, partially meeting this criterion.",maybe,"The paper discusses formal reasoning about programming languages and systems, which addresses fundamental design principles, even though it does not explicitly focus on orthogonality or minimality.",yes,"The paper presents an ""axiomatic theory"" and discusses formal theoretical foundations through logical frameworks and constructive type theory, clearly meeting this criterion.",yes,"The paper mentions implementation of tools, but these serve to support theoretical contributions rather than being the primary focus, meeting this criterion.",yes,"The paper focuses on theoretical contributions through formal reasoning and axiomatic theory, rather than practical aspects, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but the fact that it is a thesis suggests it may be available through academic channels.",Include,"This thesis presents a rigorous theoretical exploration of formal reasoning in computer science, utilizing logical frameworks and constructive type theory to develop an axiomatic approach to analyzing programming language properties. The work demonstrates strong alignment with theoretical foundations, formal frameworks, and fundamental analysis of computational systems, while contributing novel insights into computer-aided formal reasoning methodologies. Its comprehensive theoretical approach and focus on mathematical frameworks make it a significant contribution to understanding programming language design and verification.",4.6
Bringing Coq into the World of GCM Distributed Applications,"Nuno Gaspar, L. Henrio, E. Madelaine",10.1007/s10766-013-0264-7,https://doi.org/10.1007/s10766-013-0264-7,International journal of parallel programming,13,2013,maybe,"While the paper analyzes fundamental aspects of component-based systems, it is more focused on structural reconfiguration than basic computational primitives, partially meeting this criterion.",yes,"The paper explicitly mentions ""formal specification mechanized in the Coq Proof Assistant"" and focuses on formal reasoning about software architectures, strongly meeting this criterion.",maybe,"While the paper examines component-based engineering as a paradigm, it focuses more on the specific GCM implementation rather than broader paradigm comparison, partially meeting this criterion.",maybe,"The paper discusses component-based engineering and structural reconfiguration, but does not explicitly focus on orthogonality or minimality, partially meeting this criterion.",yes,"The paper presents a formal theoretical framework for reasoning about GCM applications and their reconfiguration, clearly meeting this criterion.",yes,"The implementation aspects (configuration and reconfiguration language) serve to support the theoretical framework rather than being the primary focus, meeting this criterion.",yes,"The paper's primary focus is on theoretical reasoning and formal specification rather than practical implementation, strongly meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,"The mention of the Coq Proof Assistant suggests this is likely an academic paper with accessible full text, though this cannot be determined from the abstract alone.",Exclude,"A formal theoretical framework for component-based engineering is presented, utilizing the Coq Proof Assistant to reason about software architectures with a strong emphasis on theoretical contributions. The research demonstrates rigorous mathematical approaches to analyzing distributed system reconfiguration, focusing on fundamental design principles and formal specification rather than purely practical implementation.",4.3
Towards a unified AI formalism,"Deepak N. Kumar, S. Haller, Syed S. Ali",10.1109/HICSS.1994.323362,https://doi.org/10.1109/HICSS.1994.323362,1994 Proceedings of the Twenty-Seventh Hawaii International Conference on System Sciences,4,1994,maybe,"While the paper analyzes fundamental constructs, they are more focused on AI architecture and knowledge representation rather than programming language constructs specifically.",maybe,"The paper mentions ""semantic, ontological, and architectural commitments"" and a ""unified knowledge representational formalism,"" suggesting some formal framework, but it is not clearly focused on programming language properties.",maybe,"While the paper mentions object-oriented programming paradigm, it is not primarily focused on analyzing programming paradigms or their theoretical foundations.",maybe,"While the paper discusses architectural principles and object-oriented principles, it does not specifically focus on orthogonality or minimality in programming languages. The focus is more on AI architecture than programming language design.",maybe,"The paper presents theoretical foundations, but they are focused on AI architecture rather than programming language theory specifically.",no,"The paper appears to focus significantly on practical implementation aspects (""amenable to implementation in a concurrent object-oriented programming paradigm"") rather than using implementation to support theoretical contributions.",maybe,"The paper makes theoretical contributions, but they are primarily in AI architecture rather than programming language theory.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract primarily discusses AI architecture and knowledge representation, with limited direct engagement with programming language theory and design principles. While the paper touches on object-oriented paradigms and formal frameworks, its core focus diverges from the specific screening criteria related to programming language fundamentals. Consequently, the paper only marginally meets the established screening requirements.",2.8
Proceedings of the 5th ACM SIGPLAN international conference on Principles and practice of declaritive programming,"Konstantinos Sagonas, D. Miller",-,-,-,9,2003,yes,"The abstract indicates analysis of fundamental programming language constructs through ""logical formalisms"" and ""programming-as-proof-search framework,"" meeting the fundamental analysis criterion.",yes,"The abstract strongly indicates the use of formal mathematical frameworks, mentioning ""logical formalisms,"" ""logic based principles,"" and ""formal analysis,"" meeting the formal framework criterion.",yes,"The abstract explicitly mentions multiple programming paradigms (logic programming, functional logic programming, constraint programming) and their comparative analysis, strongly meeting the paradigm theory criterion.",maybe,"The abstract mentions ""design of tools"" and ""programming paradigms"" but does not explicitly discuss orthogonality or minimality, partially meeting the language design principles criterion.",yes,"The focus on ""logical formalisms"" and ""logic based principles"" suggests strong theoretical foundations, meeting the theoretical foundation criterion.",yes,"While implementation is mentioned, it is clearly secondary to theoretical contributions, with emphasis on ""principles"" and ""formal analysis,"" meeting the implementation focus criterion.",yes,"The conference focuses on ""principles"" and ""formal analysis"" rather than purely practical aspects, meeting the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The paper appears to be a conference proceedings paper from ACM-SIGPLAN, which typically has accessible full texts through academic libraries or ACM's digital library, likely meeting the full-text accessibility criterion.",Exclude,"The conference proceedings demonstrate strong alignment with theoretical programming language research, emphasizing formal mathematical frameworks, paradigm analysis, and logical principles across multiple programming approaches. While the abstract suggests rigorous theoretical contributions, the document represents a conference overview rather than a specific research paper, creating some uncertainty about individual paper details. The content indicates a comprehensive exploration of programming language foundations through logical and formal methodological perspectives.",4.3
Multiparty Languages: The Choreographic and 1 Multitier Cases 2,"Saverio Giallorenzo, F. Montesi, Marco Peressotti, David Richter, G. Salvaneschi, P. Weisenburger, Guida Salvaneschi",-,-,-,11,-,yes,"The paper analyzes fundamental language constructs and primitives at a theoretical level, particularly in how they relate to multiparty communication and distributed computation, meeting the fundamental analysis criterion.",yes,"The paper uses formal mathematical frameworks, specifically process calculi and lambda calculus, to analyze and translate between language paradigms, meeting the formal framework criterion.",yes,"The paper explicitly examines and compares two programming paradigms (choreographic and multitier languages) and their theoretical foundations, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of choreographic and multitier languages, including their core abstractions and translation between paradigms, strongly meeting the language design principles criterion.",yes,"The paper has a strong theoretical foundation, rooted in process calculi and lambda calculus, meeting the theoretical foundation criterion.",yes,"The paper's focus is on theoretical translation and comparison rather than implementation details, meeting the implementation focus criterion.",yes,"The paper appears to make a theoretical contribution by establishing a connection between two previously separate paradigms, rather than focusing on practical aspects, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"This research explores fundamental programming language paradigms through a rigorous theoretical lens, utilizing formal mathematical frameworks like process calculi and lambda calculus to analyze choreographic and multitier languages. The study provides a deep theoretical contribution by establishing connections between previously separate computational paradigms, focusing on core abstractions and translation mechanisms at a fundamental level.",4.9
Polymorphic Types in ACL2,"Benjamin Selfridge, E. Smith",10.4204/EPTCS.152.4,https://doi.org/10.4204/EPTCS.152.4,International Workshop on the ACL2 Theorem Prover and Its Applications,2,2014,yes,"The paper analyzes fundamental programming language constructs, specifically type systems and polymorphic types, at a theoretical level.",maybe,"The paper involves ACL2, which is a formal verification system, and discusses type checking and theorem proving, suggesting a formal framework is present.",yes,"The paper explicitly examines programming paradigms, specifically the Hindley-Milner paradigm and its relationship to functional programming.",maybe,"The paper discusses type systems and polymorphic types, which are fundamental design principles in programming languages, though it does not explicitly address orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation in type theory and formal verification, though the abstract does not explicitly detail the mathematical framework.",yes,The implementation discussion (tool suite) appears to serve theoretical contributions about type systems and paradigm integration.,maybe,"While the paper describes a tool suite, it appears to make theoretical contributions in terms of type systems and paradigm integration, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text of the paper is likely accessible, as ACL2 is a well-known system.",Exclude,"The research explores programming language design principles through a theoretical lens, examining type systems, polymorphic types, and paradigm integration using formal verification techniques. By investigating the Hindley-Milner paradigm and its application to ACL2, the study contributes to fundamental understanding of programming language constructs and theoretical foundations. The work demonstrates a rigorous approach to analyzing computational primitives and programming paradigms at a theoretical level.",4.3
Aspect-Oriented Set@l Language for Architecture-Independent Programming of High-Performance Computer Systems,"I. Levin, A. Dordopulo, I. Pisarenko, A. Melnikov",10.1007/978-3-030-36592-9_42,https://doi.org/10.1007/978-3-030-36592-9_42,Russian Supercomputing Days,1,2019,maybe,"While the paper deals with programming language constructs, it appears to focus more on practical applications (LU decomposition) than fundamental theoretical analysis.",maybe,"The paper mentions Vopenka's classification of collections, suggesting some formal framework, but it's not clear how rigorously mathematical the analysis is.",maybe,"The paper discusses the aspect-oriented programming paradigm and its application, but does not appear to provide deep theoretical analysis of paradigms.",maybe,"The paper discusses language design principles, particularly orthogonality in the context of architecture-independence, but does not explicitly focus on minimality or fundamental design principles.",maybe,"While the paper has some theoretical elements (set theory, Vopenka's classification), it appears to focus more on practical implementation aspects rather than a formal theoretical foundation.",maybe,"The paper heavily focuses on implementation aspects (porting between architectures, parallelization) rather than using implementation to support theoretical contributions.",maybe,"The paper seems to focus more on practical implementation and portability rather than theoretical contributions, with an emphasis on solving a practical problem of code porting.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a programming language focused on architecture-independent code portability, with limited theoretical depth and a strong emphasis on practical implementation. While incorporating some theoretical elements like set theory and Vopenka's classification, the study primarily addresses a practical problem of cross-architecture code adaptation rather than providing a rigorous theoretical framework. The work demonstrates more engineering-oriented solutions than fundamental theoretical contributions to programming language design.",2.9
A Visual Model of Computation,I. Mackie,10.1007/978-3-642-13562-0_32,https://doi.org/10.1007/978-3-642-13562-0_32,Theory and Applications of Models of Computation,5,2010,yes,"The paper appears to analyze fundamental programming language constructs through the lens of computational models, meeting this criterion.",maybe,"The mention of a ""fine-grained model of computation"" suggests some formal framework, but the abstract does not explicitly confirm the level of mathematical rigor.",yes,"The abstract explicitly discusses programming paradigms and models of computation, mentioning that ""rarely do we find a model that becomes a programming paradigm,"" strongly meeting this criterion.",maybe,"The abstract discusses models of computation and their relationship to programming languages, suggesting some focus on fundamental design principles, though it does not explicitly mention orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation in computational models, but the depth of the mathematical framework is not clearly specified in the abstract.",yes,"The abstract suggests a balanced approach between theoretical models and practical implementation, with the model being ""used directly as a programming language.""",yes,"The paper appears to make theoretical contributions by exploring how computational models can be used as programming languages, rather than focusing on practical aspects.",yes,"The abstract is written in English, meeting the publication language criterion. However, the full paper's language cannot be determined from the abstract alone.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates strong theoretical foundations in programming language design, particularly in exploring computational models and programming paradigms. It shows potential for rigorous analysis of fundamental programming constructs, with a focus on theoretical contributions rather than purely practical implementations. While some aspects of formal framework and theoretical depth remain uncertain, the paper appears to align closely with key screening criteria for theoretical programming language research.",4.3
Unification Modulo an Equality Theory for Equational Logic Programming,Jia-Huai You,10.1016/0022-0000(91)90039-8,https://doi.org/10.1016/0022-0000(91)90039-8,Journal of computer and system sciences (Print),13,1991,yes,"The paper provides clear evidence of fundamental analysis of programming language constructs, specifically focusing on equation solving and unification in equational theories.",yes,"The paper deals with ""equality theory,"" ""narrowing derivations,"" and presents formal analysis of solutions, indicating the use of a rigorous mathematical framework.",yes,"The paper explicitly examines programming paradigms, specifically equational logic programming as an extension of equational programming.",maybe,"The paper discusses equational logic programming as an extension of equational programming, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",yes,"The paper develops an ""equality theory"" and provides semantic and operational proofs, showing a strong theoretical foundation.",yes,The paper appears to focus on theoretical aspects rather than implementation details.,yes,"The paper contributes to theoretical understanding through formal analysis of equation solving and unification, rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical investigation of equational logic programming, demonstrating strong mathematical foundations through formal analysis of equation solving and unification. The study provides a comprehensive examination of programming paradigm theory, focusing on fundamental computational constructs and theoretical contributions rather than practical implementations. Its approach emphasizes semantic and operational proofs, offering a sophisticated exploration of programming language design principles.",4.9
Classical (Co)Recursion: Programming,"P. Downen, Z. Ariola",-,-,arXiv.org,1,2021,yes,"The paper analyzes fundamental programming language constructs (corecursion) at a theoretical level, particularly in its examination of how corecursion interacts with computational effects.",maybe,"The paper uses Agda, a total, pure functional language with formal foundations, suggesting some formal framework usage, but the abstract does not explicitly mention formal verification approaches.",yes,"The paper explicitly examines programming paradigms, comparing functional, object-oriented, and classical approaches to corecursion.",maybe,"The paper discusses structural corecursion across different programming paradigms, which relates to fundamental design principles, but it does not explicitly focus on orthogonality or minimality.",maybe,"The paper appears to have theoretical foundations, particularly in its treatment of corecursion and computational effects, and the use of Agda suggests formal theoretical underpinnings.",yes,"The paper balances implementation examples (in Scheme, Python, Java) with theoretical contributions about corecursion and effects.",yes,"The paper makes theoretical contributions by analyzing corecursion across paradigms and its interaction with computational effects, and it is not purely practical.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text accessibility cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores structural corecursion across multiple programming paradigms, demonstrating strong theoretical foundations in analyzing fundamental language constructs and computational effects. By examining corecursion in functional, object-oriented, and classical programming contexts, the study provides a comprehensive theoretical contribution that bridges implementation examples with rigorous paradigm analysis. The work's focus on theoretical understanding and cross-paradigm examination suggests significant potential for advancing programming language theory.",4.3
Non-Cartesian Guarded Recursion with Daggers,Louis Lemonnier,10.48550/arXiv.2409.14591,https://doi.org/10.48550/arXiv.2409.14591,arXiv.org,0,2024,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on guarded recursion and its application to different paradigms.",yes,"The paper presents a strong formal mathematical framework, including the use of cartesian closed categories, dagger categories, and formal fixed point theorems.",yes,"The paper explicitly examines programming paradigms, particularly focusing on reversible programming and comparing it with classical programming paradigms.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on guarded recursion and its application to different programming paradigms.",yes,"The paper has a strong theoretical foundation, building on category theory and formal semantics, as evident from the mathematical frameworks mentioned and the theoretical construction of categories for guarded recursion.",yes,"The paper appears to focus on theoretical contributions rather than implementation details, with the mention of ""symmetric pattern-matching"" being in the context of theoretical modeling rather than practical implementation.",yes,"The paper makes clear theoretical contributions, focusing on extending guarded recursion to dagger categories and providing formal foundations for reversible programming, rather than focusing on practical implementation.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language design, focusing on guarded recursion and its application to reversible programming through advanced mathematical frameworks like dagger categories. The study offers a comprehensive theoretical analysis of programming paradigms, demonstrating strong formal foundations and contributions to understanding computational semantics. By examining fundamental language constructs through a mathematical lens, the work provides significant insights into programming language theory and design principles.",4.9
A Formal Theory of Choreographic Programming,"L. Cruz-Filipe, F. Montesi, Marco Peressotti",10.1007/s10817-023-09665-3,https://doi.org/10.1007/s10817-023-09665-3,Journal of automated reasoning,9,2022,yes,"The paper analyzes fundamental properties of choreographic programming at a theoretical level, including Turing completeness and operational characterization, meeting the fundamental analysis criterion.",yes,"The paper explicitly formalizes the theory in Coq, a formal proof assistant, and includes formal proofs of properties and compilation procedures, strongly meeting the formal framework criterion.",yes,"The paper examines choreographic programming as a paradigm and provides theoretical analysis of its foundations and properties, meeting the paradigm theory criterion.",maybe,"The paper discusses choreographic programming as a paradigm for distributed systems, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",yes,"The paper presents a formal theoretical foundation for choreographic programming, including proofs of properties and operational characterizations, clearly meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed (compilation procedure), they serve to support theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical foundations, formal proofs, and mathematical properties rather than practical applications, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, even though this cannot be determined from the abstract alone.",Include,"A rigorous theoretical study of choreographic programming that employs formal mathematical frameworks and proof techniques, demonstrating deep engagement with programming language paradigms and fundamental computational principles. The research provides a comprehensive theoretical foundation through Coq formalization, addressing core aspects of programming language design, verification, and theoretical analysis. Its focus on mathematical proofs, operational characterization, and paradigmatic investigation strongly aligns with advanced theoretical research in computer science.",4.9
Formal software development using generic development steps,A. Dold,-,-,-,10,2000,maybe,"The paper analyzes fundamental software development constructs, but is more focused on transformational development than basic programming language constructs, partially meeting this criterion.",yes,"The paper uses PVS (a formal specification and verification system) and presents a formal mathematical framework for analyzing software development transformations, strongly meeting this criterion.",maybe,"The paper discusses algorithmic paradigms (global-search, divide-and-conquer) and different programming approaches, but is not primarily focused on paradigm foundations, partially meeting this criterion.",no,"The paper discusses formal treatment of software development and transformational approaches, but does not explicitly focus on orthogonality or minimality of programming languages. It is more focused on development methodology.",yes,"The paper presents a formal theoretical foundation using PVS theories, parameterized specifications, and formal verification of transformations, clearly meeting this criterion.",yes,"While implementations are discussed (e.g., Prolog interpreter, compiler), they serve to support and demonstrate the theoretical framework rather than being the primary focus, meeting this criterion.",yes,"The paper focuses on theoretical contributions to software development methodology and formal verification, rather than practical patterns or optimization, strongly meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,"The technical nature and references in the paper suggest it is likely an academic paper with accessible full text, though this cannot be determined from the abstract alone.",Exclude,"A rigorous formal framework utilizing PVS for software development methodology demonstrates strong theoretical contributions with comprehensive mathematical foundations. The study integrates multiple transformational approaches, presenting a unified theoretical perspective on programming language development that emphasizes formal verification and semantic analysis. While not exclusively focused on programming language theory, the research provides significant insights into fundamental computational paradigms and development methodologies.",4.3
Metamodelling with formal semantics with application to access control specification,"Jamal Abd-Ali, K. E. Guemhioui, L. Logrippo",10.5220/0005272903540362,https://doi.org/10.5220/0005272903540362,International Conference on Model-Driven Engineering and Software Development,1,2015,yes,"The paper analyzes fundamental aspects of language specification and semantics at a theoretical level, though focused specifically on access control systems.",yes,"The paper explicitly mentions mapping to first-order logic programs and formal specifications, indicating a formal mathematical framework.",maybe,"The paper examines a metamodelling paradigm and its theoretical foundations, though it is more focused on access control specification than general programming paradigms.",no,"The paper discusses metamodelling languages and their design, but does not explicitly address orthogonality or minimality. It focuses more on visual aspects and semantics.",yes,The paper presents a formal theoretical foundation through its metamodelling paradigm and mapping to first-order logic.,maybe,"The paper balances theoretical contributions with practical applications, particularly in decision systems, but the theoretical aspects appear primary.",yes,"The paper appears to make theoretical contributions through its formal approach to metamodelling and semantics specification, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"A rigorous theoretical approach to metamodelling languages emerges, with strong foundations in formal mathematical frameworks and first-order logic programming. The research demonstrates significant theoretical contributions by examining language specification semantics, particularly in access control systems, while maintaining a balanced approach between theoretical depth and practical application.",4.3
Pattern systems and methodologies for multiparadigm analysis and design,C. Knutson,-,-,-,4,1998,yes,The paper analyzes fundamental programming language constructs across paradigms at a theoretical level.,maybe,"While the paper presents a systematic approach to analyzing paradigms, it's not clear if it uses formal mathematical frameworks. The focus seems more on pattern-based analysis.",yes,"The paper strongly meets this criterion, examining four programming paradigms (imperative, object-oriented, functional, and logical) and their relationships.",yes,"The paper examines fundamental design principles across multiple programming paradigms, including their relationships and mappings, meeting the language design principles criterion.",maybe,"The paper develops a theoretical framework through pattern systems, but it's not explicitly mathematical or formal in nature.",yes,"The implementation discussion (e.g., Leda language analysis) serves to support broader theoretical contributions about multiparadigm programming.",yes,The paper makes theoretical contributions by developing new pattern-based methodologies and analyzing paradigm relationships.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract appears to be from a thesis or dissertation, but the full-text accessibility cannot be determined from the abstract alone.",Exclude,"The research explores programming paradigms through a comprehensive pattern-based methodology, examining fundamental design principles across imperative, object-oriented, functional, and logical programming approaches. While demonstrating strong theoretical contributions and paradigm analysis, the study exhibits some uncertainty regarding formal mathematical frameworks and rigorous verification techniques. The work provides insights into multiparadigm programming by developing a systematic approach to understanding programming and design patterns.",4.3
A new task paradigm for reusability,"J. Leathrum, Joyce L. Tokar",-,-,-,0,1988,yes,"The study analyzes fundamental concurrent programming constructs at a theoretical level, focusing on process models and their coordination, which meets the fundamental analysis criterion.",maybe,"The abstract mentions developing an ""abstract process model"" and using an Interface Description Language (IDL) representation, suggesting a formal framework, but it's not explicitly clear if this involves rigorous mathematical verification.",yes,"The study examines concurrent programming paradigms and their unification, providing comparative theoretical analysis across different concurrent programming languages, which meets the paradigm theory criterion.",yes,"The paper appears to investigate fundamental design principles in concurrent programming languages, specifically focusing on the unification of process models, which meets the language design principles criterion.",maybe,"The paper presents a theoretical foundation through its unified process model and abstract framework, though the mathematical rigor isn't explicitly detailed in the abstract.",yes,"The implementation aspects (IDL representation) appear to serve the theoretical contribution rather than being the primary focus, which meets the implementation focus criterion.",yes,"The paper clearly focuses on theoretical contributions, specifically the unification of process models and enabling specification reuse, rather than primarily on practical patterns or optimization, which meets the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a theoretically grounded investigation of concurrent programming language process models, focusing on unification and specification reuse through an abstract framework. By examining fundamental programming paradigms and developing a unified theoretical approach, the study demonstrates strong alignment with theoretical research criteria, particularly in analyzing computational primitives and paradigm foundations. The work appears to contribute substantively to understanding programming language design principles at a conceptual level.",4.6
Language-agnostic multi-paradigm code quality assurance framework,Marnick Q. T. P. van der Arend,-,-,BElgian-NEtherlands software eVOLution symposium,1,2022,no,"While the paper deals with programming language constructs, it appears to focus on practical metrics rather than fundamental theoretical analysis.",no,"The abstract mentions a ""generic model"" for transformation and analysis, but does not explicitly indicate whether this is a formal mathematical framework. The approach seems more practical than formal.",maybe,"The paper does examine multiple programming paradigms (OOP and FP) and their integration, but seems to focus more on practical metrics than theoretical foundations of paradigms.",no,"The paper discusses multi-paradigm programming languages and their constructs, but does not explicitly focus on orthogonality or minimality. It is more focused on code quality metrics.",no,"While the paper presents a framework, it appears to be more focused on practical implementation than theoretical foundations. There is no explicit mention of mathematical frameworks.",no,"The paper is heavily focused on practical implementation aspects (code quality metrics, transformations) rather than using implementation to support theoretical contributions.",no,The paper appears to focus more on practical code quality assurance than theoretical contributions. The emphasis is on implementation and metrics rather than theoretical understanding.,yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research explores multi-paradigm programming languages with a focus on code quality metrics, primarily addressing practical implementation aspects rather than deep theoretical foundations. While the study touches on programming paradigms and presents a framework for code analysis, it lacks rigorous formal mathematical frameworks and comprehensive theoretical contributions. The work appears more oriented towards practical code quality assurance than fundamental theoretical investigation.",2.8
Toward Verified Library-Level Choreographic Programming with Algebraic Effects,"Gan Shen, L. Kuper",10.48550/arXiv.2407.06509,https://doi.org/10.48550/arXiv.2407.06509,arXiv.org,2,2024,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly how choreographies and endpoint projection can be modeled using algebraic effects.",yes,"The paper explicitly mentions using algebraic effects as a formal mathematical framework and discusses formal reasoning about correctness properties, indicating the use of a formal framework.",yes,"The paper has a clear focus on programming paradigm foundations, specifically choreographic programming, and examines how to model and implement this paradigm theoretically.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on choreographic programming as a paradigm and how to model and implement this paradigm using algebraic effects.",yes,"The paper directly addresses theoretical foundations, stating it proposes ""modeling library-level CP using algebraic effects"" and aims to provide a ""solid theoretical foundation.""",yes,"The implementation discussion (Agda prototype) serves to support theoretical contributions, specifically for proving correctness properties.",yes,"The paper aims to provide theoretical foundations and formal reasoning rather than just practical implementation, indicating a strong theoretical contribution focus.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible, as the mention of an Agda implementation suggests it is an academic paper with accessible full text.",Include,"This research presents a rigorous theoretical investigation of choreographic programming using algebraic effects, demonstrating strong foundations in programming language design principles and formal mathematical frameworks. The study provides a comprehensive theoretical analysis of programming paradigms, focusing on fundamental constructs and correctness properties while utilizing formal verification techniques. By proposing a novel approach to modeling distributed programming, the work contributes significantly to theoretical understanding of computational paradigms.",4.9
Paradigm Lost: Discovering the Intersection of Assertion-Guided Program Construction and Constraint-Driven Reevaluation,"S. Yau, Jacob V. Gore",10.1093/comjnl/36.2.137,https://doi.org/10.1093/comjnl/36.2.137,Computer/law journal,0,1993,maybe,"The paper appears to analyze fundamental programming paradigms, but the level of theoretical analysis is not clearly indicated.",maybe,The abstract does not indicate whether a formal mathematical framework is used.,yes,"The paper explicitly discusses two programming paradigms (Assertion-Guided Programming Construction and Constraint-Driven Reevaluation) and their intersection, strongly meeting this criterion.",maybe,"The paper appears to discuss programming language design through the lens of Eiffel enhancement, but does not explicitly mention orthogonality or minimality.",maybe,"While the paper discusses programming paradigms, there is no clear indication of a formal theoretical foundation.",maybe,"The paper discusses a language enhancement, but it is unclear whether this serves broader theoretical contributions or is primarily practical.",maybe,"The paper appears to make a theoretical contribution by analyzing paradigm overlap, though the depth of theoretical analysis is unclear from the abstract.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates a strong focus on programming paradigm theory, explicitly discussing the intersection of two programming paradigms and presenting a language enhancement. While the study appears to contribute to theoretical understanding of programming language design, the brevity of the abstract leaves many screening criteria only partially addressed or uncertain. The research seems to bridge theoretical analysis with practical implementation, suggesting potential depth in its examination of computational paradigms.",3.5
Multi-paradigm Programming in Maude,Santiago Escobar,10.1007/978-3-319-99840-4_2,https://doi.org/10.1007/978-3-319-99840-4_2,WRLA@ETAPS,1,2018,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in how different paradigms can be integrated and how equational properties can be applied.",maybe,"The paper appears to use formal mathematical frameworks, particularly in discussing equational logic, variant equations, and equational unification, and the mention of Maude 2.7.1 implementation suggests a formal approach.",yes,"The paper explicitly examines multiple programming paradigms (functional, logic, concurrent, constraint programming) and their theoretical integration.",maybe,"The paper discusses multi-paradigm programming language design and how Maude combines different programming paradigms, addressing fundamental design principles in combining programming paradigms, even if not explicitly discussing orthogonality or minimality.",yes,"The paper has a strong theoretical foundation, discussing equational logic, functional logic languages, and formal properties like associativity and commutativity.",maybe,"The paper balances theoretical contributions with implementation aspects, with the implementation results serving to support the theoretical framework rather than being the sole focus.",yes,The paper appears to make theoretical contributions by analyzing how different programming paradigms can be integrated and how Maude extends beyond standard practices in functional logic programming.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be an academic publication, suggesting likely accessibility of the full text, though this cannot be determined from the abstract alone.",Include,"The research presents a comprehensive theoretical exploration of multi-paradigm programming languages, focusing on the integration of functional, logic, concurrent, and constraint programming paradigms through a formal mathematical framework. By examining fundamental language constructs and utilizing equational logic, the study provides a rigorous analysis of programming language design principles with strong theoretical contributions. The work demonstrates a sophisticated approach to understanding programming language foundations through a systematic investigation of paradigm interactions and theoretical properties.",4.6
Object-oriented programming as the end of history in programming languages,M. H. Emden,10.1109/PACRIM.1997.620424,https://doi.org/10.1109/PACRIM.1997.620424,-,3,1997,maybe,"The paper analyzes fundamental aspects of programming languages through the lens of paradigms, though the depth of this analysis is not clear from the abstract.",no,The abstract does not explicitly mention any formal mathematical framework or verification approach. The analysis appears to be more conceptual than formal.,yes,"The paper directly examines programming paradigms (dataflow, logic, functional, object-oriented) and their relationship to language design, strongly meeting this criterion.",maybe,"The paper discusses programming paradigms and their relationship to language design, particularly focusing on how C++ can support dataflow programming, suggesting some investigation of fundamental design principles, though not explicitly mentioned.",no,"While the paper makes theoretical claims about programming paradigms, it is unclear if these are supported by a formal theoretical foundation. The abstract suggests a more argumentative approach.",maybe,"The paper discusses C++ as an implementation example, but this appears to serve theoretical arguments rather than being the primary focus.",yes,"The paper appears to make theoretical contributions about the relationship between programming paradigms and language design, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates strong theoretical engagement with programming paradigms, particularly examining how different programming approaches relate to language design. While the study appears to offer conceptual insights into programming language foundations, it lacks explicit evidence of a rigorous formal mathematical framework. The research seems oriented toward theoretical contributions about programming paradigms rather than practical implementation details.",3.9
Workshop on Integration of Declarative Paradigms,J. Moreno-Navarro,10.1017/S0269888900008158,https://doi.org/10.1017/S0269888900008158,Knowledge engineering review (Print),0,1995,maybe,"The paper appears to analyze fundamental programming language constructs through the lens of paradigm integration, though the depth of analysis is not clear from the abstract.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, and while it discusses ""new models,"" it does not specify if these are formal.",yes,"The paper explicitly focuses on the ""integration of declarative programming languages"" and discusses multiple paradigms (functional, logic, object-oriented, constraints, concurrency), strongly meeting the paradigm theory criterion.",maybe,"The abstract discusses the integration of programming paradigms and languages, which suggests some attention to fundamental design principles, even though it does not explicitly mention orthogonality or minimality.",maybe,"The abstract suggests theoretical work in paradigm integration, but does not explicitly mention formal theoretical foundations.",maybe,"The abstract mentions implementation but in the context of supporting theoretical work on paradigm integration, suggesting an appropriate balance.",maybe,"The abstract indicates theoretical work in paradigm integration, though it also mentions ""efficient implementation."" The focus appears to be on theoretical contributions rather than purely practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but the fact that it is a workshop paper from a major conference suggests it might be available.",Exclude,"The workshop paper demonstrates strong engagement with programming paradigm theory, exploring the integration of declarative programming languages across functional, logic, and object-oriented domains. While showing theoretical depth in language design principles, the abstract leaves some uncertainty regarding formal mathematical frameworks and comprehensive theoretical foundations. The research appears to balance theoretical contributions with implementation considerations, suggesting a nuanced approach to programming language analysis.",4
Reactive Programming without Functions,"Bjarno Oeyen, Joeri De Koster, W. Meuter",10.22152/programming-journal.org/2024/8/11,https://doi.org/10.22152/programming-journal.org/2024/8/11,"The Art, Science, and Engineering of Programming",1,2024,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on reactive programming primitives, strongly meeting this criterion.",yes,"The paper appears to present a formal framework, discussing syntax and semantics of the language features. The incremental extension of the model suggests a systematic theoretical approach, meeting this criterion.",yes,"The paper explicitly examines programming paradigm foundations, comparing reactive and non-reactive paradigms and analyzing their interactions, strongly meeting this criterion.",yes,"The paper explicitly focuses on fundamental design principles of reactive programming languages, including orthogonality (reactive-only design) and minimality (starting with a simple first-order model), strongly meeting this criterion.",yes,"The paper presents a theoretical foundation for reactive programming, starting with a ""simple (first-order) model"" and extending it systematically, clearly meeting this criterion.",yes,"The paper discusses implementation aspects (language features, syntax, semantics) in service of theoretical contributions, meeting this criterion.",yes,"The paper makes clear theoretical contributions rather than focusing on practical aspects, aiming to ""increase how reactive programming is comprehended"" through theoretical analysis, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A comprehensive theoretical exploration of reactive programming language design, presenting a rigorous formal framework that systematically examines paradigm foundations and fundamental computational constructs. The study offers deep insights into programming language principles by developing a reactive-only model, incrementally extending it with sophisticated features while maintaining a strong theoretical focus. Its approach demonstrates a nuanced analysis of programming paradigms, emphasizing theoretical contributions over practical implementation details.",4.9
A Mechanized Theory of Program Refinement,"Boubacar Demba Sall, F. Peschanski, E. Chailloux",10.1007/978-3-030-32409-4_19,https://doi.org/10.1007/978-3-030-32409-4_19,IEEE International Conference on Formal Engineering Methods,2,2019,yes,"The paper analyzes fundamental programming language constructs through its formal framework and calculus, meeting the fundamental analysis criterion.",yes,"The paper presents a mechanized theory using Coq proof assistant and formalizes a design language with a calculus for correctness-by-construction, strongly meeting the formal framework criterion.",yes,"The paper explicitly discusses the predicative programming paradigm and its theoretical foundations, meeting the paradigm theory criterion.",maybe,"The paper discusses program refinement and design principles, though not explicitly orthogonality or minimality. It does address fundamental design principles through its formal framework.",yes,"The paper presents a formal theoretical foundation based on the predicative programming paradigm and dependent type theory, clearly meeting the theoretical foundation criterion.",yes,"While the paper discusses implementation through Coq, this serves to support the theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The focus of the paper is clearly theoretical, presenting a formal framework for program refinement rather than practical patterns or optimization, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the fact that the paper is a formal Coq-based study suggests it is likely published in an accessible venue.",Include,"A rigorous theoretical study presenting a mechanized program refinement theory within the Coq proof assistant, demonstrating strong alignment with formal language design principles and paradigm theory. The research provides a comprehensive theoretical framework for analyzing programming language constructs through a predicative programming approach, with clear contributions to fundamental computational understanding.",4.9
Work in progress-promoting critical thinking while learning programming language concepts and paradigms,Rosita Wachenchauzer,10.1109/FIE.2004.1408650,https://doi.org/10.1109/FIE.2004.1408650,"34th Annual Frontiers in Education, 2004. FIE 2004.",5,2004,no,"While programming language concepts are discussed, the focus is on teaching these concepts rather than analyzing them at a theoretical level.",no,"The abstract does not mention any formal mathematical framework or verification approach, as the focus is on pedagogical methods.",maybe,"While programming paradigms are mentioned, the paper does not appear to examine their theoretical foundations, and instead focuses on how to teach about paradigms.",no,The paper focuses on teaching approaches rather than investigating fundamental design principles like orthogonality or minimality.,no,"There is no indication of formal theoretical foundations, as the paper appears to be focused on educational methodology.",no,"The paper discusses implementation in terms of teaching implementation, but not in a way that supports theoretical contributions.",no,The paper appears to be primarily focused on educational aspects and teaching methods rather than theoretical contributions to programming language understanding.,yes,"The paper is written in English, so it meets the publication language criterion.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"The abstract describes an educational approach to teaching programming languages, focusing on pedagogical methods rather than theoretical or formal analysis. Despite discussing programming language concepts, the paper lacks the rigorous theoretical framework, mathematical foundations, and fundamental design principle investigations required by the screening criteria. Consequently, the paper does not meet the majority of the specified theoretical and formal research requirements.",1.4
Controlled evolution of adaptive programs,"A. Abdelmeged, Therapon Skotiniotis, K. Lieberherr",10.1145/1595808.1595826,https://doi.org/10.1145/1595808.1595826,IWPSE-Evol '09,3,2009,yes,"The paper analyzes fundamental programming language constructs related to structure-shyness and program evolution at a theoretical level, meeting the fundamental analysis criterion.",maybe,"The abstract suggests a formal approach to analyzing program evolution and compatibility, though it doesn't explicitly mention mathematical frameworks. There is moderate evidence that this criterion is met.",yes,"The paper directly examines programming paradigm foundations (adaptive programming) and provides theoretical analysis of its properties and evolution, strongly meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of adaptive programming, particularly regarding structure-shyness and constraints on runtime behavior, meeting the language design principles criterion.",yes,"The paper appears to have a theoretical foundation in analyzing program evolution and compatibility, particularly in the context of adaptive programming, meeting the theoretical foundation criterion.",yes,"The abstract suggests the focus is on theoretical aspects rather than implementation details, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions regarding program evolution and compatibility, rather than practical implementations, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of adaptive programming, focusing on fundamental design principles, paradigm foundations, and theoretical contributions to understanding program evolution and compatibility. By investigating structure-shyness and proposing novel approaches to controlling unsafe program transformations, the study demonstrates a deep engagement with programming language theory and computational principles. The work appears to meet multiple screening criteria through its comprehensive theoretical analysis of programming paradigms.",4.6
Multiparadigm data structures in Leda,T. Budd,10.1109/ICCL.1992.185479,https://doi.org/10.1109/ICCL.1992.185479,Proceedings of the 1992 International Conference on Computer Languages,8,1992,no,"While the paper discusses programming paradigms, it appears to focus on practical implementation rather than fundamental theoretical analysis of language constructs.",no,The abstract does not indicate the use of formal mathematical frameworks or rigorous verification approaches. The paper appears to be more focused on practical implementation examples.,yes,"This is the paper's strongest match, as it explicitly examines multiple programming paradigms (imperative, object-oriented, functional, and logic programming) and their integration.",maybe,"The paper discusses multiparadigm programming and language integration, which relates to language design principles, but it does not explicitly focus on orthogonality or minimality.",no,"While the paper discusses programming paradigms, it does not explicitly mention a formal theoretical foundation. The focus seems more practical, using examples of data structures.",no,"The paper heavily focuses on implementation aspects (data structures, practical examples) rather than using implementation to support theoretical contributions.",no,The paper appears to focus more on practical implementation and demonstration rather than theoretical contributions. It uses examples of data structures to illustrate paradigm integration.,yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract demonstrates strong engagement with programming paradigm theory, particularly in exploring multiparadigm programming integration across different language styles. However, the work appears more practically oriented, lacking explicit formal frameworks, theoretical foundations, or rigorous mathematical analysis of programming language properties. While the paper offers insights into paradigm integration, it does not deeply satisfy the screening criteria's emphasis on theoretical and formal contributions.",2.9
On Systematization of Programming Paradigms by Decision-Making Priorities,L. Gorodnyaya,10.26907/1562-5419-2020-23-4-666-696,https://doi.org/10.26907/1562-5419-2020-23-4-666-696,Russian Digital Libraries Journal,2,2020,maybe,"The paper appears to analyze fundamental aspects of programming languages through its comparative method and paradigm analysis, though the depth of this analysis is not entirely clear.",maybe,"The abstract suggests a methodological approach to comparing languages but does not explicitly mention formal mathematical frameworks or verification approaches, creating uncertainty about this criterion.",yes,"This criterion is strongly met, as the abstract explicitly mentions analysis of ""programming paradigms"" and their classification based on semantic characteristics.",maybe,"The abstract mentions analysis of programming languages and their expressive power, but does not explicitly discuss orthogonality or minimality. The paper is somewhat aligned with this criterion but not clearly focused on these principles.",maybe,"The paper appears to have some theoretical foundation in its comparative analysis method, but the level of formality is not clearly specified in the abstract.",maybe,The abstract mentions implementation considerations but frames them as supporting the theoretical analysis of paradigms and program quality criteria.,maybe,"The paper appears to make theoretical contributions through its comparative analysis method and paradigm classification, though it also mentions practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, creating some uncertainty.",Exclude,"The abstract demonstrates strong theoretical engagement with programming paradigms, offering a comparative methodological approach to analyzing language characteristics and semantic properties. While the study appears to contribute to theoretical understanding of programming languages, there are uncertainties regarding the depth of formal mathematical frameworks and the precise nature of its theoretical contributions. The research seems oriented toward fundamental analysis of programming language constructs with a focus on paradigm classification and comparative methodology.",4
Liberating the programmer with prorogued programming,"M. Afshari, Earl T. Barr, Z. Su",10.1145/2384592.2384595,https://doi.org/10.1145/2384592.2384595,"SIGPLAN symposium on New ideas, new paradigms, and reflections on programming and software",10,2012,yes,"The paper analyzes fundamental programming language constructs through the lens of its new paradigm, particularly regarding how programmers think and work with code.",no,"The abstract does not explicitly mention a formal mathematical framework or rigorous verification approach, and while it describes a new paradigm, it does not indicate formal analysis methods.",yes,"The paper explicitly examines programming paradigms, proposing a new paradigm (prorogued programming) and comparing it with existing paradigms (procedural, object-oriented, aspect-oriented).",maybe,"The paper discusses fundamental design principles through the lens of ""prorogued programming"" and its three basic principles, even though it does not explicitly discuss orthogonality or minimality.",no,"The paper appears to be more focused on practical implementation (Prorogued C#) than theoretical foundations, and while it presents a new paradigm, there is no clear indication of formal theoretical underpinnings.",maybe,"The paper discusses implementation (Prorogued C#), but this appears to be in service of demonstrating the theoretical paradigm rather than being the primary focus.",maybe,"The paper appears to balance theoretical and practical aspects, as it makes theoretical contributions through the new paradigm, but seems heavily focused on practical implementation and use cases.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a novel programming paradigm with strong theoretical contributions in language design and paradigm theory, demonstrating fundamental analysis of computational constructs. While the study offers innovative insights into programming language principles, it lacks explicit formal mathematical frameworks and rigorous verification approaches. The work balances theoretical exploration with practical implementation, proposing a new approach to programming language design.",4
Imperative Compositional Programming: Type Sound Distributive Intersection Subtyping with References via Bidirectional Typing,"Wenjia Ye, Yaozhu Sun, Bruno C. d. S. Oliveira",10.1145/3689782,https://doi.org/10.1145/3689782,Proc. ACM Program. Lang.,0,2024,yes,"The paper provides strong fundamental analysis, analyzing core programming language constructs, examining fundamental type system properties, and studying basic computational primitives (references).",yes,"The paper uses a formal mathematical framework, including System F with intersection types, formal calculi, and formalization of proofs in the Coq proof assistant. It also includes rigorous type soundness analysis.",yes,"The paper has a strong focus on paradigm theory, examining the compositional programming paradigm, studying the interaction between functional and imperative paradigms, and providing theoretical analysis of paradigm integration.",yes,"The paper directly addresses fundamental design principles in programming languages, specifically focusing on compositional programming and the integration of mutable references. It discusses orthogonality in terms of combining functional and imperative programming paradigms.",yes,"The paper has a clear theoretical foundation, based on System F, including formal type systems, a mathematical framework for compositional programming, and addressing theoretical challenges in type systems.",yes,"The implementation of the paper serves theoretical goals, with the implementation of CP with references supporting the theoretical contributions and the live-variable analysis implementation demonstrating the theoretical applicability.",yes,"The primary focus of the paper is theoretical, addressing fundamental type system challenges, presenting new theoretical solutions, and focusing on theoretical foundations rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While not explicitly stated, the formalization in Coq and the academic nature of the paper suggests it is likely accessible through academic channels, though this cannot be confirmed from the abstract alone.",Include,"This research presents a rigorous theoretical investigation of programming language design, focusing on compositional programming paradigms and type systems through a formal mathematical framework. The study provides a comprehensive analysis of fundamental programming language constructs, examining the integration of functional and imperative programming approaches with a strong emphasis on theoretical foundations and formal verification. By addressing core challenges in type systems and presenting a novel approach to mutable references, the work contributes significantly to theoretical understanding of programming language principles.",4.9
A formal framework for modelling and analysing mobile systems,Graeme Smith,10.1145/980000/979946/P193-SMITH.PDF,https://doi.org/10.1145/980000/979946/P193-SMITH.PDF,-,9,2004,maybe,"While the paper analyzes fundamental constructs, these are specific to mobile systems rather than general programming language constructs, which partially meets the fundamental analysis criterion.",yes,"The paper explicitly presents a formal framework using Object-Z, a formal specification language, for analyzing mobile systems, which strongly meets the formal framework criterion.",maybe,"While the paper examines design paradigms, it is specifically focused on mobile systems rather than general programming paradigms, which partially meets the paradigm theory criterion.",maybe,"The paper discusses design paradigms and their modeling, but does not explicitly focus on orthogonality or minimality. It is somewhat relevant but not directly aligned with the language design principles criterion.",yes,"The paper uses Object-Z, a formal mathematical framework, and focuses on theoretical modeling rather than practical implementation, which meets the theoretical foundation criterion well.",yes,"The implementation discussion (regarding Object-Z) serves to support the theoretical framework rather than being the primary focus, which meets the implementation focus criterion.",yes,"The paper focuses on theoretical modeling and analysis rather than practical implementation or optimization, which strongly meets the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"A formal framework for modeling mobile systems using Object-Z demonstrates strong theoretical foundations and rigorous mathematical approaches to programming language analysis. The study provides a comprehensive theoretical contribution by examining design paradigms through a formal specification language, with particular emphasis on object-oriented modeling techniques. While focused specifically on mobile systems, the research offers significant insights into fundamental programming language constructs and theoretical modeling principles.",4.3
"Programming Paradigms, Turing Completeness and Computational Thinking",G. Michaelson,10.22152/programming-journal.org/2020/4/4,https://doi.org/10.22152/programming-journal.org/2020/4/4,"The Art, Science, and Engineering of Programming",3,2020,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly through the lens of Turing completeness and computational thinking.",maybe,"The abstract does not explicitly mention a formal mathematical framework, though it discusses theoretical concepts of paradigms and Turing completeness.",yes,"The paper directly examines programming paradigm foundations and provides comparative theoretical analysis, questioning the traditional view of paradigms and proposing a unified perspective.",maybe,"The paper discusses programming paradigms at a conceptual level, but does not explicitly address orthogonality or minimality. However, it does examine fundamental design principles through the lens of paradigm classification.",yes,"The paper appears to have a strong theoretical foundation, examining paradigms through Kuhn's conceptual framework and discussing Turing completeness as a fundamental concept.",no,"The paper appears to be purely theoretical, with no significant implementation focus mentioned in the abstract.",yes,"The paper clearly focuses on theoretical understanding, challenging existing paradigm classifications and proposing a new theoretical framework. It is not focused on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract presents a theoretically rigorous examination of programming paradigms, challenging traditional conceptualizations through a sophisticated analysis of computational thinking and Turing completeness. Its strong focus on fundamental theoretical principles, paradigm foundations, and critical reevaluation of existing conceptual frameworks demonstrates significant alignment with the screening criteria. The research appears to offer a substantive theoretical contribution to understanding programming language paradigms at a conceptual level.",4.6
Extending Functional Programming Towards Relations,Remi Legrand,10.1007/3-540-19027-9_14,https://doi.org/10.1007/3-540-19027-9_14,European Symposium on Programming,3,1988,yes,"The paper analyzes fundamental programming language constructs (relations vs. functions) at a theoretical level, meeting the fundamental analysis criterion.",maybe,"While the abstract mentions ""points-to-set processes"" and ""points-to-point processes,"" it doesn't explicitly indicate whether a formal mathematical framework is used. However, the theoretical nature of the discussion suggests some formal analysis.",yes,"The paper explicitly focuses on the relational programming paradigm and its theoretical foundations, comparing it with functional programming, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of the relational programming paradigm, including how relations differ from functions and their implications for programming, meeting the language design principles criterion.",maybe,"The paper appears to have a theoretical foundation in its discussion of relations versus functions and their computational implications, though the depth of mathematical framework isn't clear from the abstract.",yes,"The abstract indicates that implementation is discussed, but it's presented as supporting the theoretical framework rather than being the primary focus.",yes,"The paper appears to make theoretical contributions about the nature of relations in programming, though it also includes implementation aspects. The theoretical focus seems primary.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract demonstrates a strong theoretical focus on programming paradigms, specifically exploring the relational programming paradigm through fundamental language constructs and computational principles. It presents a theoretical analysis of relations versus functions, with potential implications for parallel, non-deterministic, and multi-valued algorithms, while maintaining a balance between theoretical foundations and implementation considerations. The research appears to contribute to understanding programming language design principles at a conceptual level.",4.3
Reactive Imperative Programming with Dataflow Constraints,"C. Demetrescu, Irene Finocchi, Andrea Ribichini",10.1145/2623200,https://doi.org/10.1145/2623200,ACM Transactions on Programming Languages and Systems,1,2014,yes,"The paper analyzes fundamental programming language constructs (reactive objects, constraint systems) at a theoretical level.",yes,"The abstract explicitly mentions ""formal semantics"" and describes a mathematical framework for analyzing the constraint-solving mechanism, strongly meeting this criterion.",yes,"The paper examines the integration of dataflow and imperative paradigms, providing theoretical analysis of how these paradigms can be combined.",maybe,"The paper discusses integrating dataflow constraints into imperative languages, which relates to fundamental design principles, though it does not explicitly focus on orthogonality or minimality.",yes,"The paper presents a formal theoretical foundation for constraint-based reactive programming, including formal semantics and theoretical analysis of the approach.",yes,"The implementation discussion serves to support the theoretical contributions, showing how the theoretical framework can be practically realized.",yes,"While the paper includes practical implementation, it clearly contributes to theoretical understanding of reactive programming and constraint systems.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature and implementation details of the paper suggest it is likely a formal academic paper that would be accessible, though this cannot be determined from the abstract alone.",Include,"The research presents a rigorous theoretical framework for integrating dataflow constraints into imperative programming languages, with a strong emphasis on formal semantics and paradigm theory. By providing a comprehensive analysis of reactive programming constructs and offering a mathematical approach to constraint systems, the study makes significant contributions to theoretical understanding of programming language design. The work demonstrates a sophisticated approach to fundamental programming language principles, balancing theoretical depth with practical implementation considerations.",4.6
An ontology-based domain model to enhance the software development process,"M. Alias, D. D. H. Miriam, C. Robin",10.1504/IJMSO.2014.063132,https://doi.org/10.1504/IJMSO.2014.063132,Int. J. Metadata Semant. Ontologies,1,2014,maybe,"While the paper deals with programming paradigms, it appears to focus more on practical integration than fundamental theoretical analysis of language constructs.",maybe,"The paper mentions ""description logics"" as a formal framework for representing knowledge, partially meeting this criterion, but it is not clear how deeply this formalism is used.",yes,"The paper explicitly focuses on multi-paradigm programming and the integration of different paradigms (ontological, functional, object-oriented, and concurrent), strongly meeting this criterion.",maybe,"The paper discusses multi-paradigm language design and integration, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",maybe,"The paper claims a theoretical basis in description logics, but the abstract suggests a more practical implementation focus rather than deep theoretical development.",maybe,"The paper seems primarily focused on implementation aspects (library development, metaprogramming), with theoretical elements serving the implementation rather than the other way around.",maybe,"The paper appears to focus more on practical implementation (library development) than theoretical contributions, though it does have some theoretical elements through description logics.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores multi-paradigm programming language design, integrating ontological, functional, object-oriented, and concurrent paradigms through a Clojure-based library with description logics as a theoretical foundation. While demonstrating theoretical potential in paradigm integration, the study appears more implementation-oriented, with limited depth in formal theoretical analysis of programming language constructs. The work partially meets screening criteria related to paradigm theory and formal frameworks, but leans more toward practical system development than rigorous theoretical exploration.",3.5
On Certain Basic Properties of Component-Oriented Programming Languages,"Peter H. Fr√∂hlich, M. Franz",-,-,-,8,2001,yes,The paper analyzes fundamental programming language constructs related to extensibility and component-oriented programming at a theoretical level.,maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, and while it discusses ""basic properties,"" there is no clear indication of formal analysis.",yes,"The paper clearly examines programming paradigm foundations, comparing component-oriented programming to previous paradigms and discussing fundamental properties, which strongly meets this criterion.",yes,"The paper discusses fundamental design principles for component-oriented programming languages, particularly regarding extensibility, which appears to meet this criterion.",maybe,"The paper appears to present theoretical foundations for component-oriented programming, but the abstract does not explicitly mention mathematical frameworks.",yes,"The paper mentions Lagoona, an experimental language, but uses it to support theoretical discussion rather than focusing solely on implementation.",yes,"The paper appears to focus on theoretical understanding of component-oriented programming principles rather than practical aspects, meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text accessibility cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores fundamental design principles of component-oriented programming, examining paradigm foundations and theoretical contributions to language design. While demonstrating strong theoretical analysis across multiple screening criteria, the abstract lacks explicit confirmation of formal mathematical frameworks or rigorous verification approaches. The study appears to provide a substantive theoretical investigation of programming language constructs and extensibility principles.",4.3
Integrating destructive assignment and lazy evaluation in the multiparadigm language G-2,J. Placer,10.1145/130973.130978,https://doi.org/10.1145/130973.130978,SIGP,6,1992,yes,"The paper analyzes fundamental language constructs, particularly how to integrate destructive assignment and lazy evaluation, meeting this criterion.",maybe,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, but the discussion of integrating time-dependent and time-independent features suggests some theoretical rigor.",yes,"The paper directly examines programming paradigm foundations and their integration, focusing on ""broadly multiparadigm language"" design, strongly meeting this criterion.",yes,"The paper explicitly focuses on language design principles, particularly orthogonality in combining different paradigms and their ""seemingly incompatible paradigmatic attributes,"" strongly meeting this criterion.",maybe,"While the paper discusses theoretical aspects of paradigm integration, it is not clear if it presents a formal theoretical foundation, partially meeting this criterion.",yes,"The discussion of the G-2 language and its ""block"" feature appears to serve theoretical purposes rather than being purely implementation-focused, meeting this criterion.",yes,"The paper appears to focus on theoretical contributions regarding paradigm integration rather than practical implementation details, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research explores fundamental programming language design principles, focusing on integrating diverse paradigms through theoretical analysis of computational constructs. By examining the G-2 language's approach to reconciling seemingly incompatible programming features, the study provides a rigorous investigation of multiparadigm language foundations with strong theoretical contributions. The work demonstrates significant potential for advancing understanding of programming language design at a conceptual level.",4.6
"On Functional Programming , Language Design , andPersistence",Claus Reinke,-,-,-,0,1998,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including abstraction mechanisms, variable binding, and basic data types.",yes,"The paper uses formal mathematical frameworks, specifically mentioning lambda calculus and formal semantic analysis, and discusses formal properties like referential transparency and Church-Rosser property.",yes,"The paper examines programming paradigm foundations, specifically focusing on functional programming languages and their theoretical properties, and discusses how the principles apply to different programming paradigms.",yes,"The paper explicitly discusses fundamental design principles including abstraction, correspondence, and data type completeness, and analyzes these principles in the context of programming language design.",yes,"The paper is deeply theoretical, discussing fundamental principles of programming language design and their mathematical foundations, using lambda calculus as a theoretical framework and discussing formal properties.",yes,"While implementation aspects are discussed (e.g., the simple functional core language), these serve to support and demonstrate the theoretical contributions rather than being the primary focus.",yes,"The paper's primary focus is theoretical, contributing to the understanding of fundamental language design principles rather than practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The academic nature and references in the paper suggest that the full text is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"This scholarly work provides a rigorous theoretical examination of programming language design principles, utilizing formal mathematical frameworks like lambda calculus to analyze fundamental constructs and paradigm foundations. The research deeply explores language design principles, theoretical contributions, and computational primitives through a sophisticated lens of abstraction, correspondence, and semantic uniformity. Its comprehensive approach to understanding programming language structures demonstrates a strong commitment to theoretical analysis and mathematical foundations.",4.9
Logic + control revisited: an abstract interpreter for GO¬®DEL programs,E. B√∂rger,-,-,-,7,1995,yes,"The paper provides clear evidence of fundamental analysis through examination of ""abstract search spaces"" and ""procedural understanding"" at a theoretical level.",yes,"The paper uses ""Gurevich's notion of evolving algebras"" and provides a ""mathematical| machine and proof system independent|description and analysis,"" indicating the use of a formal mathematical framework.",yes,"The paper examines the logic programming paradigm and provides theoretical analysis, including ""general logic programming paradigm"" and ""procedural understanding.""",maybe,"The paper discusses the design of a logic programming language (GGodel) and its interpreter, including a ""clean interface between logical and control components,"" suggesting attention to fundamental design principles, though not explicitly orthogonality or minimality.",yes,"The paper includes a formal theoretical foundation through the use of formal mathematical frameworks and abstract search spaces, and explicitly mentions ""mathematical description and analysis.""",yes,"The implementation discussion (interpreter) serves to support theoretical contributions, specifically for ""mathematical description and analysis of design decisions.""",yes,"The paper has a strong theoretical focus, with emphasis on formal analysis and mathematical description rather than practical implementation details, and aims to provide ""provably correct stepwise refinements.""",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of logic programming language design, utilizing formal mathematical frameworks and evolving algebras to analyze computational paradigms. The study provides a machine-independent, proof-system approach to understanding programming language constructs, with a strong emphasis on theoretical foundations and mathematical description. Its focus on fundamental analysis and paradigm theory demonstrates significant scholarly contribution to computational language research.",4.9
Libraries For Parallel Paradigm Integration,"Ian T Foster, Ming Q. Xu",-,-,-,5,1994,no,"While the paper discusses programming paradigms, it appears to focus on practical implementation rather than fundamental theoretical analysis of programming language constructs.",no,The abstract does not indicate any formal mathematical framework or rigorous verification approach. The focus appears to be on practical implementation and library development.,yes,"The paper explicitly examines programming paradigms (task and data parallelism) and their combination, but it appears to focus more on practical implementation than theoretical analysis.",maybe,"The paper discusses language extensions to Fortran (Fortran M) and focuses on combining different programming paradigms, but it appears more focused on practical implementation than fundamental design principles like orthogonality or minimality.",no,"While the paper discusses programming paradigms, it doesn't appear to present a formal theoretical foundation. The emphasis is on practical implementation and library development.",no,"The paper is heavily focused on implementation aspects (Fortran M extensions, library development) rather than using implementation to support theoretical contributions.",no,The paper seems to focus more on practical implementation and tool development rather than theoretical contributions. The emphasis is on building libraries and frameworks rather than advancing theoretical understanding.,yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research primarily addresses programming paradigms through a practical lens, focusing on Fortran M extensions and library development rather than theoretical foundations. While the study touches on programming paradigms, it lacks the rigorous formal frameworks, theoretical contributions, and fundamental analysis typically sought in theoretical programming language research. The work appears more oriented toward implementation and practical tool development than deep theoretical exploration.",2.9
"Choreographies , Computationally Luƒ±ÃÅs","O. Kouchnarenko, K., Ramtin",-,-,-,0,2016,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, focusing on essential primitives and their relationship to computation, meeting the fundamental analysis criterion.",yes,"The paper presents a formal framework for analyzing choreographic programming, including mathematical concepts like Turing completeness and formal synthesis to process calculus, meeting the formal framework criterion.",yes,"The paper explicitly examines the foundations of Choreographic Programming as a paradigm and provides theoretical analysis of its properties, meeting the paradigm theory criterion.",yes,"The paper explicitly focuses on minimalism in language design, introducing ""Minimal Choreographies (MC)"" and discussing essential primitives. The study specifically examines minimality in relation to Turing completeness, meeting the language design principles criterion.",yes,"The paper is grounded in theoretical foundations, discussing computation theory, Turing completeness, and formal synthesis. The focus is clearly theoretical rather than practical, meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed (synthesis to process calculus), these serve to support theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper's primary focus is on theoretical contributions, including the development of minimal choreographies and their theoretical properties, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical investigation of Choreographic Programming, focusing on minimal language design principles, formal mathematical frameworks, and fundamental computational constructs. The study provides a comprehensive theoretical analysis of programming paradigms, examining essential primitives, Turing completeness, and formal synthesis while maintaining a strong emphasis on theoretical contributions rather than practical implementations.",4.9
Read/write factorizable programs,"Siddharth Bhaskar, J. Simonsen",10.1017/S0956796823000023,https://doi.org/10.1017/S0956796823000023,Journal of functional programming,0,2023,yes,"The paper analyzes fundamental programming language constructs (constructors/destructors) at a theoretical level, relating them to computational complexity classes, meeting this criterion.",yes,"The paper clearly meets this criterion as it presents formal complexity class relationships (P, FP, FL) and discusses type systems for enforcing program properties, indicating a rigorous mathematical framework.",yes,"The paper directly examines programming paradigms, introducing and analyzing a new paradigm (cons-free) and its extensions, with theoretical comparisons to existing paradigms, meeting this criterion.",yes,The paper strongly meets this criterion as it investigates fundamental design principles by introducing a novel programming paradigm (cons-free) and extending it to RW-factorizable programs. The focus on constructors/destructors and type systems indicates deep engagement with language design principles.,yes,"The paper strongly meets this criterion as it provides mathematical foundations through complexity theory and type systems, with formal results about capturing specific complexity classes.",yes,"The paper appears to maintain theoretical focus while discussing implementation aspects (type systems, program properties), using these to support theoretical contributions rather than being the primary focus, meeting this criterion.",yes,"The paper focuses on theoretical contributions, including new paradigm development, complexity class relationships, and formal properties, rather than practical applications, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language design, focusing on fundamental paradigm principles through a novel cons-free approach with formal complexity class relationships. The study introduces a sophisticated mathematical framework examining programming language constructs, type systems, and computational complexity, demonstrating deep theoretical contributions to programming language foundations. By analyzing constructors, destructors, and computational primitives through a formal lens, the work provides significant insights into programming paradigm theory and computational complexity.",4.9
A Formal Foundation for Aspect Oriented Software Development,J. Fox,-,-,-,4,2005,yes,"The paper analyzes fundamental programming language constructs (aspects) at a theoretical level, particularly focusing on their definition and formal properties, meeting this criterion.",maybe,"The abstract mentions providing ""a syntax and semantics"" for aspects, suggesting some formal framework, though the depth of formality isn't entirely clear, partially meeting this criterion.",yes,"The paper explicitly discusses the relationship between aspect-oriented programming and the Object Oriented Paradigm, meeting this criterion.",maybe,"The paper discusses aspect-oriented programming languages and their design principles, particularly focusing on syntax and semantics, which partially meets this criterion, though it's not explicitly about orthogonality or minimality.",yes,"The paper aims to provide ""a basic still precise definition of aspect"" and outlines an approach for syntax and semantics, indicating theoretical foundation work, meeting this criterion.",yes,"The paper discusses tools and implementation aspects (AspectJ, Compose*) but uses them to support theoretical contributions, meeting this criterion.",yes,"The focus appears to be on theoretical foundations (definition, syntax, semantics) rather than practical implementation, meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research demonstrates strong theoretical foundations in programming language design, focusing on aspect-oriented programming paradigms with explicit attention to syntax, semantics, and fundamental language constructs. By proposing a precise definition of aspects and exploring their relationship to object-oriented programming, the study contributes substantively to theoretical understanding of programming language principles. The work appears to meet multiple screening criteria through its rigorous approach to language design and paradigm analysis.",4.3
Competency structure model for programming for the transition from school to university,Mike Barkmin,10.1145/3421590.3421591,https://doi.org/10.1145/3421590.3421591,Workshop in Primary and Secondary Computing Education,1,2020,no,"While the paper analyzes programming language constructs, it does so from an educational competency perspective rather than a fundamental theoretical level.",no,"While the paper mentions ""theoretical considerations,"" it does not appear to present a formal mathematical framework. The focus seems to be on competency structure modeling rather than formal verification.",yes,The paper explicitly examines programming paradigms and their relationships across different languages and contexts.,no,"The paper discusses programming paradigms and language structures, but does not explicitly focus on orthogonality or minimality. It takes a more educational/competency-based approach.",no,"The paper develops a ""competency structure model"" from theoretical considerations, but it appears to be more pedagogical than mathematical in nature.",no,"The paper discusses implementation aspects (syntax, semantics, build/compile processes) but primarily in service of educational goals rather than theoretical contributions.",no,The paper appears to focus more on educational and practical aspects (competency structure for learning) rather than pure theoretical contributions to programming language theory.,yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract primarily addresses educational aspects of programming language learning, with limited engagement in theoretical programming language foundations. While the study explores programming paradigms and language structures, it lacks the rigorous mathematical frameworks and formal verification approaches typically sought in theoretical programming language research. The paper's focus on competency modeling and educational contexts diverges from the deeper theoretical investigations implied by the screening criteria.",2.7
New directions in logic programming,K. Bowen,10.1145/324634.325181,https://doi.org/10.1145/324634.325181,International Conference on Scientific Computing,3,1986,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on concurrency and metalevel reasoning in logic programming.",yes,"The paper explicitly mentions ""formal logical systems"" and discusses theorem-provers as the basis for the language, indicating a formal mathematical framework.",yes,"The paper directly examines programming paradigm foundations, specifically the logic programming paradigm and its extensions.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on extensions to Prolog and the logic programming paradigm.",yes,"The abstract clearly indicates a theoretical foundation, discussing logical systems and their adaptation for computer control.",yes,"While implementation aspects are discussed (e.g., Concurrent Prolog), these serve to support broader theoretical contributions about the paradigm.",yes,"The focus appears to be on theoretical contributions, discussing fundamental extensions to the logic programming paradigm rather than practical implementations.",yes,"The paper is clearly written in English, which meets the publication language criterion.",maybe,"The abstract appears to be from an ACM publication (1986), which suggests it should be accessible through academic libraries or ACM archives, but this isn't explicitly confirmed in the abstract.",Include,"This research explores fundamental design principles of the logic programming paradigm, presenting a rigorous theoretical analysis of Prolog's extensions through formal logical systems and theorem-proving approaches. The study demonstrates strong theoretical contributions by examining programming language constructs, concurrency mechanisms, and metalevel reasoning techniques within a formal mathematical framework. Its comprehensive examination of paradigm foundations and theoretical extensions aligns closely with advanced programming language research criteria.",4.9
Temporal Constraint Functional Programming: A Declarative Framework for Concurrency and Interaction,T. C. Nicholas Graham,10.1007/978-1-4471-3794-8_6,https://doi.org/10.1007/978-1-4471-3794-8_6,Declarative Programming,0,1991,maybe,The paper appears to analyze fundamental programming language constructs through its focus on concurrent programming and semantics.,maybe,"The abstract indicates a ""method for specifying the semantics"" and mentions a ""transformation methodology,"" suggesting some formal framework, though the rigor is not clear from the abstract.",yes,"The paper explicitly focuses on introducing a new declarative paradigm for concurrent programming, strongly meeting this criterion.",maybe,"The abstract mentions introducing a new programming paradigm (TCFP) and discussing language semantics, suggesting investigation of fundamental design principles, though specific principles like orthogonality or minimality are not explicitly mentioned.",maybe,"The mention of semantics specification and transformation methodology suggests theoretical foundations, but the depth is not clear from the abstract.",no,"The abstract does not mention implementation details, focusing instead on theoretical aspects.",yes,The focus on introducing a new paradigm and its semantics suggests theoretical contribution rather than purely practical aspects.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"A novel programming paradigm for concurrent programming is introduced, demonstrating strong theoretical foundations through its focus on language semantics and transformation methodology. The research appears to contribute substantively to programming language theory by exploring a declarative approach to concurrent programming, with potential implications for understanding fundamental computational constructs.",4.3
Design of a Programming Paradigms Course Using One Single Programming Language,"Francisco Ortin, Jos√© Manuel Redondo L√≥pez, Jos√© Quiroga",10.1007/978-3-319-31307-8_18,https://doi.org/10.1007/978-3-319-31307-8_18,WorldCIST,5,2016,no,The paper suggests a focus on teaching programming concepts rather than analyzing fundamental programming language constructs at a theoretical level.,no,"The paper does not mention any formal mathematical frameworks or verification approaches, and instead focuses on educational implementation.",maybe,"While the paper discusses programming paradigms, it appears to focus on teaching these paradigms rather than providing theoretical analysis of them.",no,The paper focuses on teaching programming paradigms rather than investigating fundamental design principles of programming languages.,no,"The paper does not indicate any formal theoretical foundation, and instead describes a practical teaching approach.",no,The implementation discussion in the paper appears to be focused on practical teaching rather than supporting theoretical contributions.,no,The paper appears to be primarily focused on educational aspects and practical teaching approaches rather than theoretical contributions.,yes,"The paper is written in English, which meets the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract describes an educational approach to teaching programming paradigms, primarily focusing on practical pedagogical strategies rather than theoretical language analysis. Despite discussing programming paradigms, the paper lacks formal mathematical frameworks, theoretical foundations, and rigorous verification approaches required by the screening criteria. Consequently, the study does not meet the theoretical and formal requirements for inclusion in a review of programming language research.",1.4
Efficient Integration of Declarative Paradigms into Symbolic Computation Systems,G. Grivas,-,-,ICLP Workshop: Integration of Declarative Paradigms,2,1994,maybe,"While the paper discusses fundamental programming paradigms, its focus appears to be more on their practical integration rather than theoretical analysis of fundamental constructs.",maybe,"The paper mentions a term-rewriting mechanism and an abstract machine (WAM), suggesting the use of a formal framework, but it is not clear how rigorous or mathematical this framework is.",yes,"The paper explicitly examines multiple programming paradigms (functional, logic, constraint) and their integration, providing comparative analysis.",maybe,"The paper discusses the integration of multiple programming paradigms (functional, logic, constraint) and their combination into a programming language, which relates to language design principles. However, it does not explicitly address orthogonality or minimality.",maybe,"While the paper discusses programming paradigms and their integration, it appears to focus more on implementation and practical aspects rather than presenting a formal theoretical foundation.",maybe,"The paper has a significant implementation focus (compilation, abstract machine, object-oriented implementation), which appears to be its primary focus rather than supporting theoretical contributions.",maybe,"The paper appears to balance theoretical and practical aspects, but seems to lean more toward practical implementation (compilation, abstract machine) than pure theoretical contribution.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores programming paradigm integration with a focus on practical implementation, demonstrating strong comparative analysis of functional, logic, and constraint paradigms. While the study presents some theoretical elements through term-rewriting mechanisms and abstract machine design, its primary emphasis appears to be on practical compilation and implementation rather than deep theoretical foundations. The work partially meets theoretical screening criteria but leans more toward pragmatic language design and computational engineering.",3.2
A unified proof technique for verifying program correctness with big-step semantics,"Ximeng Li, Qianying Zhang, Guohui Wang, Zhiping Shi, Yong-Yuan Guan",10.1016/j.sysarc.2022.102820,https://doi.org/10.1016/j.sysarc.2022.102820,Journal of systems architecture,0,2023,yes,"The paper analyzes fundamental program verification at a theoretical level, dealing with operational semantics and verification principles, meeting the fundamental analysis criterion.",yes,"The paper presents a formal verification technique using big-step operational semantics and formalizes results in Coq proof assistant, strongly meeting the formal framework criterion.",maybe,"The paper mentions ""languages of different paradigms"" and verification across paradigms, but this is not the primary focus of the theoretical analysis, so it only partially meets the paradigm theory criterion.",no,"The paper focuses on verification techniques rather than language design principles specifically, so it does not primarily investigate orthogonality, minimality, or fundamental design principles in programming languages.",yes,"The paper presents a theoretical foundation for language-independent verification using formal semantics and mathematical logic, clearly meeting the theoretical foundation criterion.",yes,"The implementation aspects (blockchain smart contracts) serve to demonstrate and support the broader theoretical contributions, meeting the implementation focus criterion.",yes,"The paper makes clear theoretical contributions to verification techniques, focusing on formal methods rather than practical patterns, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible, as the mention of Coq formalization suggests academic publication with likely accessible full text.",Include,"A rigorous theoretical study presenting a language-independent verification technique with formal mathematical foundations, utilizing big-step operational semantics and Coq proof assistant. The research demonstrates strong theoretical contributions across programming paradigms, focusing on fundamental verification principles and formal analysis of computational constructs. While not exclusively centered on language design principles, the work provides significant theoretical insights into program verification techniques.",4.6
Compositional theories for embedded languages,"Davide Trotta, M. Zorzi",-,-,arXiv.org,0,2020,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on the host-core language relationship and type theory, which strongly meets the fundamental analysis criterion.",yes,"The paper presents a formal mathematical framework, including type theory and categorical semantics, and specifically mentions ""enriched categories"" and formal relationships between language and models, which strongly meets the formal framework criterion.",yes,"The paper examines programming paradigms, specifically mentioning ""non-classical computational paradigms"" and discussing the relationship between host and core languages, which meets the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of embedded programming languages, particularly focusing on the host-core language relationship, which strongly meets the language design principles criterion.",yes,"The paper has a clear theoretical foundation, presenting a formal type theory (HC0) and categorical semantics, with the mathematical framework being central to the work, which strongly meets the theoretical foundation criterion.",yes,"The paper appears to focus on theoretical aspects rather than implementation details, and while it mentions ""concrete instances,"" these appear to support the theoretical framework rather than being the primary focus, which meets the implementation focus criterion.",yes,"The paper's primary focus is theoretical, presenting a new type theory and formal framework rather than practical applications, which strongly meets the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical investigation of programming language design, focusing on embedded language principles through a formal type theory and categorical semantics framework. The study explores fundamental computational paradigms, particularly examining host-core language relationships and providing a systematic approach to understanding programming language constructs at a theoretical level. By developing a novel type theory (HC0) and analyzing its mathematical foundations, the work contributes significantly to theoretical understanding of programming language design principles.",4.9
Practical structured parallelism using BMF,David Crooke,-,-,-,3,1998,yes,"The study analyzes fundamental programming language constructs at a theoretical level, particularly regarding parallelism and concurrency.",yes,"The paper uses the Bird-Meertens Formalism as a formal framework and mentions ""concurrent operational semantics,"" though it notes this isn't fully rigorous.",yes,"The paper explicitly examines programming paradigms, proposing a new imperative parallel programming paradigm and analyzing its theoretical foundations.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on parallelism control and programming paradigms.",yes,The study is grounded in formal theory (BMF Theory of Lists) and includes theoretical foundations for parallel programming paradigms.,yes,The implementation discussion (prototype library) serves to support and validate the theoretical contributions rather than being the primary focus.,yes,"While the paper includes implementation aspects, it primarily focuses on theoretical contributions to parallel programming paradigms and their formal foundations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract indicates that the paper is a thesis, which typically has accessible full texts, but this cannot be confirmed from the abstract alone.",Include,"A comprehensive theoretical exploration of parallel programming paradigms using the Bird-Meertens Formalism, demonstrating strong foundations in language design principles, formal frameworks, and paradigm theory. The research provides a rigorous examination of programming language constructs with a balanced approach to theoretical contributions and practical implementation, grounded in mathematical frameworks and computational primitives.",4.6
The Gamma Model as a Functional Programming Tool,"Rachel Harrison, H. Glaser",10.1007/3-540-53504-7_73,https://doi.org/10.1007/3-540-53504-7_73,International Conference on Computing and Information,0,1990,yes,The paper analyzes fundamental programming language constructs through the lens of the Gamma model and functional programming.,maybe,"The abstract mentions ""mechanism behind the model"" but doesn't explicitly indicate use of formal mathematical frameworks or verification approaches.",yes,"The paper explicitly examines programming paradigms, specifically the Gamma model as a programming paradigm and its implementation in functional programming.",maybe,"The paper discusses implementing the Gamma model in a functional language, which relates to language design principles, though it's not explicitly focused on orthogonality or minimality.",maybe,"While the paper examines a programming model (Gamma), it's unclear if it provides a formal theoretical foundation.",yes,The paper discusses implementation aspects (library of higher-order functions) but uses these to support theoretical analysis of the paradigm.,yes,"The paper appears to make theoretical contributions by analyzing the Gamma model's implementation in functional languages, though it also includes practical aspects (library development).",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores the Gamma model's implementation in functional programming, demonstrating strong theoretical engagement with programming paradigms and fundamental language constructs. While the study shows promise in analyzing computational primitives and paradigm foundations, there are uncertainties regarding the depth of formal mathematical frameworks and rigorous verification approaches. The work appears to balance theoretical investigation with practical implementation considerations.",4.3
Object-Oriented Frameworks as Basis for Modularity in Program-Language Design,"M. H. Emden, S. C. Somosan",-,-,-,0,2006,no,"While programming paradigms are discussed, the analysis appears to be more focused on practical implementation rather than fundamental theoretical analysis of language constructs.",no,The abstract does not indicate any formal mathematical framework or rigorous verification approach. The discussion appears to be more conceptual and practical.,yes,"The paper explicitly examines programming paradigms (functional, logic, object-oriented) and their relationships. However, it appears to focus more on practical implementation than theoretical foundations.",no,"The paper discusses programming paradigms and their relationship to language design, but does not explicitly focus on orthogonality or minimality. The focus is more on paradigm implementation through frameworks.",no,"While the paper discusses programming paradigms, it does not appear to present a formal theoretical foundation. The focus seems to be on practical implementation through frameworks.",no,"The paper heavily focuses on implementation aspects (component technology, frameworks) rather than using these to support theoretical contributions.",no,"The paper seems to focus more on practical implementation and software development productivity rather than theoretical contributions. The emphasis is on ""productivity in software development"" and ""management of software development.""",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract primarily discusses practical software development approaches using programming paradigms, with limited theoretical depth and no clear formal mathematical framework. While addressing programming paradigms, the text focuses more on implementation strategies and productivity rather than rigorous theoretical analysis or fundamental language design principles. The work appears more oriented toward practical software engineering than theoretical computer science research.",2.9
iCoLa: A Compositional Meta-language with Support for Incremental Language Development,"Damian Fr√∂lich, L. T. V. Binsbergen",10.1145/3567512.3567529,https://doi.org/10.1145/3567512.3567529,Software Language Engineering,3,2022,maybe,"The paper does analyze fundamental language constructs through the lens of language composition and manipulation, but this appears to be more implementation-oriented than purely theoretical.",no,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, and the paper appears to be more focused on practical implementation rather than presenting a formal theoretical foundation.",maybe,"The paper does examine programming paradigms, specifically language-oriented programming, but the focus appears more practical than theoretical.",maybe,"The paper discusses language design principles through the lens of language-oriented programming and meta-programming, addressing fundamental design principles through language composition and reuse, even though it does not explicitly mention orthogonality or minimality.",no,"The paper seems to focus more on practical implementation (iCoLa) rather than presenting a formal theoretical foundation, and the theoretical aspects appear secondary to the implementation.",no,"The paper heavily focuses on implementation (iCoLa implementation, language construction examples), and while this supports some theoretical aspects, the implementation appears to be the primary focus.",no,"While the paper makes contributions to language design, it seems to emphasize practical implementation and tooling rather than theoretical understanding, with a focus on ""simplifying design and engineering processes"" suggesting a more practical orientation.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores language-oriented programming through a meta-language implementation, demonstrating practical approaches to language design and composition. While addressing some theoretical aspects of programming language paradigms, the study emphasizes implementation and tooling over rigorous formal frameworks or deep theoretical foundations. The work provides insights into language construction techniques but maintains a predominantly practical orientation.",3.2
FROM DIFFICULT PROBLEMS TO PROGRAMMING PARADIGMS,–õ.–í. –ì–æ—Ä–æ–¥–Ω—è—è,10.38028/ESI.2021.21.1.008,https://doi.org/10.38028/ESI.2021.21.1.008,-,0,2021,yes,"The paper analyzes fundamental aspects of programming languages, particularly their semantics and paradigmatic models, meeting this criterion.",maybe,"While the paper discusses analysis and systematization of programming languages, it doesn't explicitly mention formal mathematical frameworks or verification approaches. This criterion is weakly met.",yes,"This criterion is strongly met. The paper explicitly focuses on programming paradigms, their development, and comparative analysis of different paradigms.",maybe,"The abstract discusses programming paradigms and their development, but doesn't explicitly mention orthogonality or minimality. It does touch on language semantics and paradigmatic models, partially meeting this criterion.",maybe,"The paper appears to have some theoretical foundation in analyzing programming paradigms and their relationships, but the abstract doesn't clearly indicate a formal mathematical framework.",maybe,"The paper discusses experimental programming systems, but these appear to support broader theoretical contributions about paradigms rather than focusing solely on implementation.",maybe,"The paper appears to make theoretical contributions through its analysis of paradigm relationships and language systematization, though it also touches on practical aspects like software performance.",maybe,"The paper appears to be written in both Russian and English, with an English translation provided. While this meets the language criterion, the original Russian text may present some accessibility challenges.",no,"The abstract doesn't provide information about full-text accessibility, so this is uncertain.",Exclude,"The research explores programming paradigms through a theoretical lens, examining their historical development, semantic characteristics, and comparative analysis across different language models. While demonstrating strong theoretical foundations in paradigm theory and fundamental language analysis, the study lacks explicit formal mathematical frameworks and rigorous verification approaches. The work provides insights into programming language systematization, with potential implications for understanding computational problem-solving approaches.",3.5
Can computational logic provide a paradigm for both the specification and implementation of concurrent systems?,D. Gilbert,10.1145/234528.234733,https://doi.org/10.1145/234528.234733,CSUR,1,1996,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on concurrency, constraints, and their theoretical foundations, meeting the fundamental analysis criterion.",yes,"The abstract mentions formal semantics and automated reasoning about concurrent systems, indicating a formal mathematical framework. References to specific formal approaches (CCLP paradigm) suggest this criterion is met.",yes,"The abstract extensively discusses programming paradigms, specifically the evolution from sequential to concurrent constraint programming, and provides comparative theoretical analysis, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of concurrent constraint programming languages, including their evolution from sequential languages and the importance of clear semantics, meeting the language design principles criterion.",yes,"The paper clearly focuses on theoretical foundations, discussing formal semantics, constraint systems, and theoretical frameworks for concurrent programming, meeting the theoretical foundation criterion.",yes,"While implementation is mentioned, it's clearly secondary to the theoretical contributions, serving to support the theoretical framework rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper appears to focus primarily on theoretical contributions, discussing fundamental paradigms and formal approaches rather than practical implementations, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility cannot be determined from the abstract alone, but given the academic nature and citations, it's likely accessible through academic channels.",Include,"The abstract demonstrates a robust theoretical exploration of concurrent constraint programming paradigms, presenting a comprehensive analysis of language design principles, formal frameworks, and fundamental computational constructs. Its strong focus on theoretical foundations, paradigmatic evolution, and mathematical semantics aligns closely with the screening criteria, offering a rigorous examination of programming language theory. The work appears to provide significant insights into the theoretical underpinnings of concurrent systems and their logical programming approaches.",4.6
Definition and Execution of a Generic Assembly Programming Paradigm,"J. Maass, Sven Molkenstruck, Ulrike Thomas, J. Hesselbach, F. Wahl",10.1108/01445150810849028,https://doi.org/10.1108/01445150810849028,-,5,2008,maybe,"While the paper analyzes programming constructs, it appears to focus more on practical application in robotics rather than fundamental theoretical analysis.",maybe,"The abstract mentions a ""reference architecture"" but does not clearly indicate whether the paper uses formal mathematical frameworks or rigorous verification approaches.",maybe,"The paper does examine programming paradigm foundations by introducing a new robot-programming paradigm, but it appears more focused on practical application than theoretical analysis.",maybe,"The paper discusses a ""generic robot-programming paradigm"" and manipulation primitives that decouple programming concepts from algorithms, which relates to language design principles. However, it does not explicitly address orthogonality or minimality.",maybe,"While the paper presents a theoretical approach through manipulation primitives, it is not clear if it includes a formal mathematical framework to support its claims.",maybe,"The abstract indicates significant focus on implementation and practical aspects (""Execution on a reference control system""), which may overshadow theoretical contributions.",maybe,"The paper seems to balance theoretical contribution (new programming paradigm) with practical implementation, but the abstract suggests a stronger focus on practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper appears to be accessible through a formal publication, though this cannot be definitively determined from the abstract alone.",Exclude,"A robot-programming paradigm paper that introduces manipulation primitives with potential theoretical implications, but demonstrates a stronger emphasis on practical implementation and robotics applications. While addressing some programming language design principles, the study appears more focused on practical execution and control systems rather than deep theoretical foundations or rigorous mathematical frameworks.",3.2
"Programming Languages and Systems : 11th European Symposium on Programming, ESOP 2002, held as part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2002, Grenoble, France, April 8-12, 2002 : proceedings",D. L. M√©tayer,-,-,-,3,2002,yes,"The abstract provides strong evidence of fundamental analysis, including type systems, lambda calculus, and basic programming language constructs.",yes,"Multiple papers mentioned in the abstract deal with formal frameworks, including type systems, proof methods, and formal semantics approaches.",yes,"The abstract explicitly mentions ""Programming Paradigms"" and includes papers on different programming approaches, such as ""Soft Concurrent Constraint Programming"".",yes,"The abstract mentions several papers dealing with type systems, modularity, and fundamental language constructs, suggesting strong coverage of language design principles.",yes,"The abstract provides strong evidence of theoretical foundations throughout, including type theory, lambda calculus, and formal verification approaches.",maybe,"While some papers mention tools and implementation aspects, these appear to support theoretical contributions rather than being the primary focus.",yes,"Most papers appear to focus on theoretical contributions rather than practical implementations, with emphasis on type systems, formal analysis, and theoretical foundations.",yes,"The paper appears to be written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, such as university libraries or author websites, given that this appears to be a conference proceedings or collection of papers.",Include,"This collection of papers demonstrates strong alignment with theoretical programming language research, featuring extensive coverage of type systems, formal frameworks, and fundamental computational principles. Multiple contributions explore programming paradigms, lambda calculus, and rigorous verification approaches, with a clear emphasis on theoretical foundations and mathematical analysis of programming language constructs. The work appears to provide substantive insights into programming language design, verification, and theoretical understanding across various computational domains.",4.6
A Constructive Semantics for Basic Aspect Constructs,Christiano Braga,10.1007/978-3-642-04164-8_6,https://doi.org/10.1007/978-3-642-04164-8_6,Semantics and Algebraic Specification,0,2009,yes,The paper analyzes fundamental programming language constructs through the lens of formal semantics and their compositional nature.,yes,"The paper explicitly mentions using Modular SOS (Structural Operational Semantics), which is a formal mathematical framework for analyzing programming language properties.",yes,"The paper explicitly discusses programming paradigms and their relationship to semantic components, including aspect-oriented programming.",maybe,"The paper discusses semantic components and their reuse in programming language design, which relates to fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,"The paper appears to have a strong theoretical foundation, focusing on formal semantics and constructive approaches to programming language specification.",maybe,"The paper seems to focus on theoretical aspects rather than implementation, though it does discuss practical applications in terms of paradigm support.",yes,"The paper appears to make theoretical contributions by proposing new semantic constructs and their formal analysis, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract demonstrates a strong theoretical approach to programming language semantics, utilizing formal frameworks like Modular SOS and focusing on fundamental design principles across programming paradigms. It presents a constructive semantic approach that contributes to theoretical understanding of language design, with particular emphasis on aspect-oriented programming and semantic component reuse. The research appears to provide a rigorous mathematical foundation for analyzing programming language properties and paradigm evolution.",4.6
A combined object-oriented and logic programming tool for AI,"Marcelo Jenkins, D. Chester",10.1109/TAI.1993.633951,https://doi.org/10.1109/TAI.1993.633951,Proceedings of 1993 IEEE Conference on Tools with Al (TAI-93),4,1993,yes,The paper analyzes fundamental programming language constructs by examining the core properties of two major paradigms.,maybe,"The abstract mentions a ""logical framework"" but does not clearly indicate whether it is formal or rigorous in a mathematical sense.",yes,"The paper directly examines programming paradigms (object-oriented and logic programming) and their theoretical combination, strongly meeting this criterion.",maybe,"The paper discusses combining programming paradigms, which relates to language design principles, but it does not explicitly mention orthogonality or minimality.",maybe,"The paper appears to have some theoretical foundation in combining paradigms, but the abstract does not explicitly mention mathematical frameworks.",maybe,"The paper discusses Plog, a programming language, but appears to use this to support theoretical contributions rather than focusing solely on implementation.",maybe,"The paper appears to make theoretical contributions by proposing a new combined paradigm framework, though it also mentions practical applications.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research explores a novel combination of object-oriented and logic programming paradigms, presenting a theoretical framework that examines fundamental programming language constructs. While demonstrating strong potential in paradigm theory and fundamental analysis, the study lacks explicit confirmation of rigorous mathematical frameworks or formal verification approaches. The work appears to contribute theoretical insights into programming language design, though some critical methodological details remain unclear from the abstract.",4
A reductionist approach to a course on programming languages,"Michael R. Wick, D. Stevenson",10.1145/364447.364595,https://doi.org/10.1145/364447.364595,Technical Symposium on Computer Science Education,2,2001,no,"While the paper mentions ""fundamental building blocks,"" the context suggests this is for educational purposes rather than theoretical analysis of fundamental constructs.",no,The paper does not mention any formal mathematical frameworks or verification approaches. The focus appears to be pedagogical.,maybe,"While the paper discusses programming paradigms, it appears to do so from an educational perspective rather than providing theoretical analysis. The focus is on teaching paradigms rather than analyzing their theoretical foundations.",no,The paper mentions studying programming paradigms but does not specifically address orthogonality or minimality. It focuses more on the educational presentation of paradigms.,no,The abstract does not indicate any formal theoretical foundation. It describes an educational approach using Scheme as a demonstration language.,no,"The paper discusses implementation through Scheme, but this appears to be in service of educational goals rather than theoretical contributions.",no,The paper appears to focus on educational approaches and pedagogical methods rather than theoretical contributions to programming language understanding.,yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract describes an educational approach to programming languages using Scheme, focusing on pedagogical methods rather than theoretical foundations or formal frameworks. While discussing programming paradigms, the text lacks the depth of theoretical analysis, mathematical rigor, and fundamental construct examination required by the screening criteria. Consequently, the paper does not substantively meet the majority of the specified research requirements.",2.5
Inclusional Theories in Declarative Programming,"Marco Schorlemmer, J. Agust√≠-Cullell",-,-,APPIA-GULP-PRODE,2,1996,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on inclusion relations and operational semantics.",yes,"The paper clearly involves formal mathematical frameworks, discussing term rewriting, operational semantics, and algebraic structures like lattices.",yes,"The paper explicitly examines programming paradigm foundations, specifically focusing on logic programming and its theoretical underpinnings.",yes,"The paper discusses fundamental design principles for a logic programming language, particularly focusing on inclusion relations and operational semantics.",yes,"The abstract indicates a strong theoretical foundation, discussing formal deduction techniques, operational semantics, and mathematical structures.",yes,"While the paper mentions ""rapid prototyping tool,"" this appears to be secondary to the theoretical contributions, serving to support the theoretical framework.",yes,"The paper appears to focus primarily on theoretical contributions, discussing formal deduction techniques and theoretical frameworks rather than practical implementations.",yes,"The paper appears to be written in English, though with some minor formatting issues.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"The abstract demonstrates a rigorous theoretical exploration of logic programming language design, focusing on formal mathematical frameworks, operational semantics, and fundamental programming paradigm principles. It presents a comprehensive analysis of inclusion relations, term rewriting, and algebraic structures, with a strong emphasis on theoretical contributions rather than practical implementations. The research appears to provide significant insights into programming language foundations through a sophisticated mathematical and theoretical lens.",4.6
Integrating Constraints into a Multiparadigm Language,Nabil M. Zamel,-,-,-,3,1993,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on constraint programming semantics and their integration with other paradigms.",no,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches, and while it discusses semantics, it does not clearly indicate a formal analysis approach.",yes,"The paper directly examines multiple programming paradigms (imperative, functional, object-oriented, relational) and their integration, particularly focusing on constraint programming paradigm theory.",maybe,"The paper discusses multiparadigm language design and integration of constraint programming, which relates to fundamental design principles, though it does not explicitly address orthogonality or minimality.",no,"The paper appears to have some theoretical foundation in discussing programming paradigms and their integration, but the abstract does not explicitly mention mathematical frameworks.",maybe,"The abstract suggests a balanced approach between theoretical analysis and implementation considerations, focusing on how to integrate constraint programming into Leda while maintaining theoretical consistency.",maybe,"The paper appears to make theoretical contributions by analyzing paradigm integration and constraint semantics, though it seems to have practical implementation aspects as well.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores multiparadigm programming language design, focusing on integrating constraint programming with existing paradigms through a theoretical lens that examines fundamental language constructs and semantic principles. While demonstrating strong theoretical foundations in paradigm analysis, the study lacks explicit formal mathematical frameworks, creating some uncertainty about its rigorous theoretical approach. The work appears to balance theoretical contributions with practical implementation considerations, particularly in the context of the Leda programming language.",4
"Merging interactive, modular, and object-oriented programming",S. Tung,-,-,-,3,1992,yes,"The study analyzes fundamental programming language constructs at a theoretical level, particularly in how it formalizes the integration of different programming paradigms.",yes,"The paper presents a formal mathematical framework through the $\lambda_{imp}$ language, which extends $\lambda$-calculus to support interactive modular programming. The abstract explicitly mentions formal semantics.",yes,"The research directly examines programming paradigm foundations by analyzing and merging three major paradigms (interactive, modular, and object-oriented), providing theoretical analysis of their integration.",yes,"The paper explicitly deals with fundamental design principles by merging three programming paradigms (interactive, modular, and object-oriented) and presents a formal language ($\lambda_{imp}$) to support this integration.",yes,The study includes a formal theoretical foundation through its use of $\lambda$-calculus and formal semantics for describing module modifications and propagation.,yes,"While the paper discusses implementation (IMP and IMOOP systems), these implementations serve to support and demonstrate the theoretical contributions rather than being the primary focus.",yes,"The paper makes clear theoretical contributions through its formal framework and analysis of paradigm integration, though it also includes practical implementation aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract indicates that the paper is a dissertation, which typically has accessible full texts, but this cannot be confirmed from the abstract alone.",Include,"This dissertation presents a rigorous theoretical exploration of programming language paradigms, offering a formal mathematical framework that integrates interactive, modular, and object-oriented programming through the $\lambda_{imp}$ language. By providing a comprehensive analysis of paradigm foundations, formal semantics, and theoretical contributions, the study demonstrates a deep examination of fundamental programming language constructs and their integration. The research balances theoretical depth with practical implementation, making it a significant contribution to programming language theory.",4.9
Trampoline variables: a general method for state accumulation in reactive programming,"Bjarno Oeyen, Sam Van den Vonder, Wolfgang De Meuter",10.1145/3486605.3486787,https://doi.org/10.1145/3486605.3486787,REBLS@SPLASH,3,2021,yes,"The paper analyzes fundamental programming language constructs (state management, reactive programming) at a theoretical level.",maybe,"While the abstract mentions analysis of composition and hotswapping, it doesn't explicitly state whether a formal mathematical framework is used. However, the technical nature of the analysis suggests some formal approach.",yes,"The paper directly examines programming paradigm foundations, specifically the reactive programming paradigm and its relationship with imperative constructs, which strongly meets the paradigm theory criterion.",yes,"The paper discusses fundamental design principles in reactive programming languages, particularly regarding state management and explicit state variables, which meets the language design principles criterion.",maybe,"The paper appears to provide theoretical foundations for trampoline variables and their relationship to existing reactive operators, though the depth of mathematical framework isn't explicitly stated.",yes,"The paper balances theoretical contributions with practical applications (hotswapping, live IDEs), but the theoretical aspects appear primary.",yes,"The paper makes clear theoretical contributions by introducing a new mechanism (trampoline variables) and analyzing its properties and composition, which isn't purely practical.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of reactive programming paradigms, introducing novel design principles for state management through trampoline variables. By analyzing fundamental programming language constructs and providing a comparative theoretical framework, the study offers substantive contributions to understanding programming language design and paradigm foundations. The work demonstrates a balanced approach between theoretical innovation and practical implementation considerations.",4.6
Algebraic Specification with Functionals in Program Development by Transformation,B. Krieg-Br√ºckner,10.1007/978-94-009-1063-8_25,https://doi.org/10.1007/978-94-009-1063-8_25,-,3,1989,yes,The paper analyzes fundamental programming language constructs through the lens of algebraic specification and transformational development.,yes,"The paper clearly employs mathematical formalism through its use of ""algebraic specification language"" and ""formal requirement specifications,"" indicating a strong formal framework.",yes,"The paper explicitly discusses the functional programming paradigm and its theoretical implications, including ""higher degree of abstraction"" and ""homomorphic extension functionals.""",maybe,"The paper discusses formal specification and transformation approaches, which relate to fundamental design principles, but it does not explicitly address orthogonality or minimality.",yes,"The paper has a strong theoretical foundation through its focus on formal specifications, algebraic approaches, and transformational methodology.",maybe,"The PROSPECTRA system is mentioned, but it appears to serve as a tool to support the theoretical framework rather than being the primary focus.",yes,"The paper appears to focus on theoretical contributions, particularly in formal specification and transformation methodology, rather than purely practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of programming language design through formal specification and transformational methodology, demonstrating strong alignment with mathematical frameworks and paradigm theory. The study presents a comprehensive approach to program development using algebraic specification, functional programming principles, and systematic transformation techniques. Its focus on theoretical foundations and fundamental computational constructs provides significant insights into programming language design and development.",4.6
The Concurrent Constraint Programming Research Programmes,V. Saraswat,10.1007/3-540-60299-2_36,https://doi.org/10.1007/3-540-60299-2_36,International Conference on Principles and Practice of Constraint Programming,1,1995,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in the context of concurrent computation and constraint programming, meeting this criterion.",yes,"The paper presents and utilizes formal mathematical frameworks, including ""mathematical models of computation,"" ""general and fully abstract models,"" and ""operational semantics,"" meeting this criterion.",yes,"The paper explicitly examines programming paradigms, discussing concurrent logic programming, constraint logic programming, and their combination in CCP, and provides comparative theoretical analysis, meeting this criterion.",yes,"The paper discusses fundamental design principles in programming languages, particularly in the context of concurrent constraint programming, meeting this criterion.",yes,"The paper has a strong theoretical foundation, discussing mathematical models, formal semantics, and theoretical paradigms, meeting this criterion.",yes,"While implementations are discussed (e.g., Janus, AKL), they serve to support broader theoretical contributions rather than being the sole focus, meeting this criterion.",yes,"The paper makes clear theoretical contributions, focusing on foundational aspects of concurrent computation and mathematical models rather than just practical applications, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"The abstract demonstrates a comprehensive theoretical exploration of concurrent constraint programming, presenting rigorous mathematical frameworks, paradigm analysis, and fundamental design principles across multiple computational domains. It provides a sophisticated examination of programming language constructs, theoretical foundations, and computational models, with strong evidence of formal semantic approaches and paradigmatic investigation. The work appears to make significant theoretical contributions to understanding concurrent computation through a systematic, mathematically-grounded approach.",4.9
"Domains and Denotational Semantics: History, Accomplishments and Open Problems Classical Domain Theory Axiomatic Domain Theory","Achim Jung, Marcelo P Fiore, Eugenio Moggi, Peter O 'hearn, Jon Riecke, G. Rosolini, Ian Stark, Marcelo P Fiore, D. Ww, D ? W-D ? W ( I E",-,-,-,2,1996,yes,"The paper has a strong focus on fundamental programming language constructs and computational primitives at a theoretical level, including recursive definitions and semantic modeling.",yes,"The paper presents a strong formal mathematical framework, discussing Domain Theory, Denotational Semantics, and mathematical universes, including Scott-domains and mathematical modeling.",yes,"The paper explicitly mentions ""computational paradigms"" and discusses different computational phenomena, such as sequential computation, polymorphism, and mutable state.",yes,"The paper investigates language design principles, specifically mentioning ""bring out subtle issues in language design"" and discussing fundamental aspects of programming languages through denotational semantics.",yes,"The paper has a very strong theoretical foundation, focusing on mathematical universes, ordered structures, and formal semantics, discussing both concrete and axiomatic approaches.",yes,"The paper appears to use implementation aspects, like recursive definitions, to support theoretical contributions rather than focusing on practical implementation.",yes,"The paper is heavily theoretical, focusing on mathematical foundations and semantic analysis rather than practical applications, making a strong theoretical contribution.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given its formal academic nature, though this cannot be determined from the abstract alone.",Include,"This comprehensive theoretical work deeply explores domain theory and denotational semantics, presenting a rigorous mathematical framework for analyzing programming language constructs and computational paradigms. The study offers a sophisticated examination of fundamental programming language principles, focusing on theoretical foundations, semantic modeling, and computational phenomena across different paradigms. Its strong emphasis on mathematical universes, ordered structures, and formal semantic analysis demonstrates a profound contribution to theoretical understanding of programming language design.",4.9
General Computation Models,"P. V. Roy, Seif Haridi",-,-,-,0,2004,yes,The paper analyzes fundamental programming language constructs through its kernel language approach and abstract machine framework.,yes,"The abstract mentions ""precise"" definitions in terms of an ""abstract machine"" and presents a formal framework for analyzing programming paradigms.",yes,"The paper explicitly focuses on programming paradigms, their relationships, and comparative theoretical analysis.",yes,"The paper discusses fundamental design principles through its focus on ""kernel languages"" and their relationships, showing how different programming paradigms can be unified through simple core languages.",yes,"The paper appears to have a strong theoretical foundation, presenting programming paradigms in a ""uniform framework"" and analyzing their ""deep relationships.""",yes,"While implementation aspects are mentioned (Mozart Programming System), they appear to support the theoretical contributions rather than being the primary focus.",yes,"The paper appears to focus on theoretical understanding, presenting a unified view of programming paradigms and their fundamental relationships.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract mentions this is a ""text"" (book) and references the Mozart Programming System, but does not explicitly state full-text accessibility, creating some uncertainty.",Exclude,"A comprehensive theoretical exploration of programming paradigms that rigorously examines fundamental language design principles through a unified framework of kernel languages and abstract machine analysis. The work demonstrates strong theoretical contributions by systematically presenting multiple programming models, their deep relationships, and computational primitives across different paradigms. While the text appears to be a book rather than a research paper, its profound theoretical depth and systematic approach to programming language foundations suggest significant scholarly value.",4.3
The precise control of inheritance and the inheritance of theory in the ADABTPL language,"T. Sheard, D. Stemple",10.1109/ICCL.1988.13064,https://doi.org/10.1109/ICCL.1988.13064,Proceedings. 1988 International Conference on Computer Languages,1,1988,yes,"The paper analyzes fundamental programming language constructs, specifically inheritance mechanisms and their relationship to data structuring, meeting the fundamental analysis criterion.",yes,"The paper describes integration with a ""Boyer-Moore-style theorem prover"" for formal verification of programs, indicating that it meets the formal framework criterion.",yes,"The paper examines programming paradigms, specifically discussing inheritance mechanisms and their relationship to data structuring, meeting the paradigm theory criterion.",yes,"The paper explicitly discusses orthogonality in language design, specifically mentioning ""orthogonal inheritance producing and restricting mechanisms,"" indicating that it meets the language design principles criterion.",yes,"The paper discusses formal verification and theorem proving, indicating that it meets the theoretical foundation criterion.",yes,"While implementation aspects are discussed (compiler integration), they serve to support theoretical contributions about formal verification, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical aspects of language design and formal verification rather than practical implementation details, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract demonstrates a rigorous theoretical approach to programming language design, focusing on orthogonal inheritance mechanisms and formal verification through theorem proving. It presents a comprehensive examination of language paradigms, fundamental constructs, and mathematical frameworks, with a strong emphasis on theoretical contributions rather than practical implementation. The research integrates higher-order functions and metatheorems to analyze programming language properties at a fundamental level.",4.9
"An algebraic model of class, message passing and inheritance",R. J. McKenzie,-,-,-,2,1992,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically focusing on core object-oriented concepts and their formal characterization.",yes,"The paper clearly presents a formal mathematical framework, using ""signatures and algebras"" and ""initial algebras"" to analyze programming language properties. This is a central focus of the work.",yes,"The paper directly examines programming paradigm foundations, specifically focusing on object-oriented programming and its fundamental concepts (classes, objects, message passing, inheritance).",yes,"The paper strongly addresses fundamental design principles, particularly focusing on formal characterization of object-oriented programming concepts. It explicitly aims to provide a unified theoretical framework for understanding core language features.",yes,"The paper is fundamentally theoretical, presenting ""a formal theory characterizing the principal phenomena"" and developing ""a single comprehensive and consistent algebraic theory.""",yes,"While implementation is discussed, it's clearly in service of theoretical contributions, as evidenced by the statement ""Implementation inheritance is then described simply as one of a number of different means of defining algebras.""",yes,"The paper's primary focus is theoretical, aiming to provide a unified formal framework rather than practical applications. It explicitly addresses theoretical understanding of programming concepts.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper may be accessible through academic channels, as it is a thesis, but this cannot be determined from the abstract alone.",Include,"A comprehensive theoretical exploration of object-oriented programming principles, presenting a rigorous formal framework using algebraic methods to analyze fundamental language constructs. The study provides a unified mathematical approach to understanding programming paradigms, focusing on theoretical foundations and formal characterization of core programming concepts. Its deep theoretical contribution and systematic examination of programming language design principles make it a significant scholarly work in computer science.",4.9
An Inherently-Typed Formalization for Featherweight Java,"Samuel da Silva Feitosa, A. S. Mena, R. Ribeiro, A. R. D. Bois",10.1145/3355378.3355385,https://doi.org/10.1145/3355378.3355385,Brazilian Symposium on Programming Languages,1,2019,yes,The paper meets this criterion by analyzing fundamental programming language constructs through formal semantics and type systems.,yes,The paper strongly meets this criterion by using formal mathematical frameworks (Agda and Coq) and discussing formal semantics and type systems.,yes,The paper meets this criterion by examining object-oriented programming paradigm foundations through Featherweight Java.,maybe,"The paper focuses on Featherweight Java, a formal calculus for object-oriented programming, which deals with fundamental language design through formal semantics, even though it does not explicitly discuss orthogonality or minimality.",yes,"The paper clearly meets this criterion by being based on formal theoretical foundations, using dependent types and formal verification tools.",yes,The paper meets this criterion by having the implementation discussion (in Agda and Coq) serve to support theoretical contributions rather than being the primary focus.,yes,The paper strongly meets this criterion by focusing on theoretical contributions through formalization and verification rather than practical aspects.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, even though this cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical investigation of programming language foundations through formal semantics, utilizing advanced verification tools like Agda and Coq to analyze object-oriented programming paradigms. The study demonstrates a strong commitment to theoretical contributions by exploring fundamental language design principles, type systems, and computational primitives through a mathematically rigorous framework. Its focus on formal verification and theoretical analysis provides deep insights into programming language constructs and their underlying mathematical structures.",4.9
Architectural Design via Declarative Programming,"L. Pereira, R. Viegas",10.5220/0002346503630369,https://doi.org/10.5220/0002346503630369,International Conference on Enterprise Information Systems,1,2007,yes,"The paper analyzes fundamental programming language constructs through the lens of declarative theory building and logic programming, meeting this criterion.",yes,"The paper appears to use formal mathematical frameworks, discussing declarative theory building and logic programming, and the mention of ""sound solutions"" suggests formal verification approaches, meeting this criterion.",yes,"The paper examines declarative programming and logic programming paradigms, comparing their approaches to problem-solving, meeting this criterion.",maybe,"The paper discusses declarative theory building and logic programming paradigms, but does not explicitly focus on orthogonality or minimality principles, partially meeting this criterion.",yes,"The paper presents a theoretical foundation through declarative theory building and logic programming paradigms, meeting this criterion.",yes,"While implementation is mentioned (""directly coded into a declarative programming language""), it appears to serve theoretical contributions rather than being the primary focus, meeting this criterion.",yes,"The paper focuses on theoretical aspects of declarative theory building and its application to problem-solving, rather than practical patterns or optimization, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The study demonstrates a strong theoretical foundation in programming language paradigms, utilizing formal mathematical frameworks and logic programming to explore declarative theory building. While presenting a rigorous approach to problem-solving through computational constructs, the research exhibits comprehensive theoretical contributions across multiple screening criteria. The work's focus on fundamental programming language analysis and paradigm theory provides significant depth in understanding computational problem-solving methodologies.",4.3
Programming Languages and Paradigms,James B. Fenwick,-,-,-,0,2021,maybe,"While the paper covers fundamental programming language concepts, the analysis appears to be more pedagogical than theoretical.",no,The paper does not indicate any formal mathematical framework or rigorous verification approach. It appears to be more pedagogical in nature.,yes,"The paper strongly covers programming paradigms, examining four major paradigms (imperative, functional, logical, and object-oriented) in detail.",yes,"The paper discusses ""eight fundamental questions of language design"" and covers language design issues, though it is more educational than research-focused.",no,"While the paper covers programming paradigms, there is no indication of formal theoretical foundations or mathematical frameworks. The focus appears to be on practical teaching and implementation.",no,The paper appears to focus heavily on practical implementation and hands-on experience rather than theoretical contributions.,no,The paper appears to be an educational text rather than a theoretical contribution. It focuses on teaching concepts rather than advancing theoretical understanding.,yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The paper appears to be a textbook rather than a research paper, which raises concerns about full-text accessibility. Textbooks are typically commercially available but may not be freely accessible.",Exclude,"This textbook-style document covers programming paradigms comprehensively but lacks the rigorous theoretical framework and formal mathematical analysis required by the screening criteria. While it provides extensive coverage of programming language concepts across multiple paradigms, its pedagogical approach and emphasis on practical implementation disqualify it from meeting the theoretical research standards. The text appears more suited for educational purposes than as a theoretical research contribution.",2.5
Reclaiming the Unexplored in Hybrid Visual Programming,Michael Homer,10.1145/3689492.3690045,https://doi.org/10.1145/3689492.3690045,"SIGPLAN symposium on New ideas, new paradigms, and reflections on programming and software",0,2024,maybe,"The paper analyzes fundamental programming language constructs, particularly regarding representation and paradigm foundations, though at a more conceptual than mathematical level.",no,The abstract does not indicate the use of formal mathematical frameworks or rigorous verification approaches. The discussion appears more conceptual and exploratory.,yes,"The paper strongly addresses programming paradigm foundations, discussing the limitations of current paradigms and proposing new approaches to programming system design.",maybe,"The paper discusses fundamental design principles of programming languages, particularly regarding representation and paradigm shifts, but does not explicitly address orthogonality or minimality.",no,"While the paper presents theoretical arguments about programming language representation, it does not appear to develop a formal theoretical foundation or mathematical framework.",maybe,"The abstract mentions ""preliminary explorations"" but emphasizes theoretical contributions over practical implementation details.",yes,"The paper appears to make theoretical contributions by challenging existing paradigms and proposing new theoretical approaches to programming system design, though it seems to focus more on conceptual exploration than rigorous theoretical development.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract presents a theoretical exploration of programming language paradigms, challenging traditional textual representations and proposing innovative approaches to code visualization and manipulation. While demonstrating strong conceptual insights into programming language design, the work appears to lack rigorous formal mathematical frameworks and comprehensive theoretical foundations. The research offers provocative ideas about programming system evolution, emphasizing paradigmatic shifts and representational flexibility.",3.5
Practical Idiomatic Considerations for Checkable Meta-Logic in Experimental Functional Programming,"B. T. Widemann, M. Lepper",10.1007/978-3-030-75333-7_2,https://doi.org/10.1007/978-3-030-75333-7_2,Workshop on Functional and Constraint Logic Programming,0,2020,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on meta-logical aspects and formal properties, meeting the fundamental analysis criterion.",yes,"The paper clearly involves formal frameworks, mentioning theorem proving, formal specification, and meta-logical annotations, meeting the formal framework criterion.",yes,"The paper explicitly examines the functional programming paradigm and its logical properties, comparing it with other approaches (simulation vs. formal specification), meeting the paradigm theory criterion.",yes,"The paper discusses fundamental aspects of functional programming languages and their logical properties, including type systems and meta-logical annotations, meeting the language design principles criterion.",yes,"The abstract indicates strong theoretical foundations, discussing formal specification, theorem proving, and logical frameworks, meeting the theoretical foundation criterion.",yes,"While implementation is discussed (Haskell'98), it serves to support theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper appears to make theoretical contributions through novel idioms for checking and meta-logical annotations, rather than focusing on practical aspects alone, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature and reference to Haskell'98 suggests the full text is likely accessible through academic channels, but this cannot be confirmed from the abstract alone.",Include,"The abstract demonstrates a rigorous theoretical approach to programming language design, focusing on formal frameworks, meta-logical annotations, and fundamental paradigm analysis within a functional programming context. It presents novel theoretical contributions through innovative idioms for checking and logical reasoning, with a strong emphasis on theoretical foundations and paradigm theory. The research appears to meet multiple screening criteria by exploring computational primitives and formal specification at a deep theoretical level.",4.6
SpeciÔ¨Åcation and VeriÔ¨Åcation of Rust Iterators in Prusti,"Jonas Hansen, Prof Aurel B√≠l√Ω, Dr. Peter M√ºller",-,-,-,0,2021,yes,"The paper analyzes fundamental programming language constructs (closures, iterators, ownership) at a theoretical level through formal verification.",yes,"The paper explicitly aims to extend the formal verification capabilities of the Prusti tool for Rust programs, indicating the use of a formal mathematical framework.",yes,"The abstract discusses multiple programming paradigms (systems programming, functional programming) and their integration in Rust, showing an analysis of paradigm theory.",yes,"The abstract discusses Rust's ownership type system and the orthogonality of features (closures and iterators), showing a clear focus on language design principles.",maybe,"The focus on formal verification and type systems suggests a theoretical foundation, though the abstract does not explicitly detail the mathematical framework.",yes,The implementation discussion (Prusti tool) serves to support theoretical contributions to formal verification of language features.,yes,The paper appears to make theoretical contributions through formal verification of programming language features rather than focusing on practical patterns.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The reference to other academic works suggests the full text of the paper is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"The research demonstrates strong alignment with theoretical programming language analysis through its focus on formal verification, multi-paradigm integration, and fundamental language construct examination. By exploring Rust's ownership type system and extending verification capabilities for iterators, the study provides a rigorous theoretical contribution to programming language design principles. The work's emphasis on formal mathematical frameworks and paradigm theory suggests a comprehensive approach to understanding computational constructs.",4.6
Requirements for an imperative language to host logic programming in a seamless way,G. Callegarin,10.1145/242604.242619,https://doi.org/10.1145/242604.242619,SIGP,1,1996,yes,"The paper analyzes fundamental aspects of programming language design, specifically how different paradigms can be integrated at a basic level.",maybe,"The abstract mentions a ""framework"" but does not explicitly indicate whether it is formal or mathematical. There is some uncertainty here, though the theoretical nature of the work suggests some formal elements.",yes,"The paper explicitly focuses on multiparadigm language design and the integration of different paradigms (logic, commands, objects, functions, and constraints).",yes,"The paper directly addresses language design principles, specifically focusing on multiparadigm language design and integration of different programming paradigms.",maybe,"The paper appears to present a theoretical framework for paradigm integration, though the level of mathematical rigor is not clear from the abstract.",yes,"The implementation aspect (educational language) appears to serve as a proof of concept for the theoretical framework, rather than being the primary focus.",yes,"The paper appears to make theoretical contributions to understanding paradigm integration, though it also mentions practical implementation. The theoretical focus seems primary.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"A theoretical exploration of multiparadigm language design, focusing on integrating different programming paradigms through a novel linguistic framework. The study demonstrates strong potential for advancing understanding of fundamental programming language constructs, with particular emphasis on paradigm integration and theoretical contributions. While some aspects require further investigation, the research appears to offer significant insights into language design principles.",4.3
Conceptual programming in GIS development,"Ya Tsvetkov, A. V. Buravtsev",10.1088/1755-1315/839/3/032028,https://doi.org/10.1088/1755-1315/839/3/032028,IOP Conference Series: Earth and Environment,0,2021,maybe,"The paper analyzes fundamental programming concepts through the lens of conceptual programming and paradigm combinations, but the focus seems more applied than purely theoretical. The paper partially meets this criterion.",maybe,"The abstract mentions ""functional grammars"" and proves connections between conceptual and functional programming, suggesting some formal framework, but the depth of mathematical rigor is unclear. The paper partially meets this criterion.",yes,"The paper explicitly examines programming paradigms, comparing functional, language-oriented, and imperative approaches. This criterion is well met.",maybe,"The paper discusses programming paradigms and their combination (functional and language-oriented), but does not explicitly focus on orthogonality or minimality. It partially meets this criterion.",maybe,"The paper appears to have some theoretical foundation in conceptual programming and functional grammars, but the abstract does not clearly indicate the depth of the mathematical framework. The paper partially meets this criterion.",yes,"The paper discusses implementation in F# and provides a practical example, but these appear to be supporting the theoretical contributions rather than being the primary focus. This criterion is adequately met.",maybe,"While the paper makes theoretical contributions about conceptual programming and paradigm combinations, it appears to be heavily focused on practical applications in GIS. The paper only partially meets this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores conceptual programming methods with a focus on programming paradigms, demonstrating theoretical contributions through functional and language-oriented programming approaches. While the study presents some formal framework and paradigm analysis, its practical application in geographic information systems suggests a moderate theoretical depth. The work partially meets screening criteria related to language design principles, theoretical foundations, and fundamental programming analysis.",3.5
Programming coordination laws of artifacts in CArtAgO,"M. Sbaraglia, Matteo Casadei, Mirko Viroli",10.1145/1982185.1982378,https://doi.org/10.1145/1982185.1982378,ACM Symposium on Applied Computing,1,2011,yes,The paper analyzes fundamental coordination artifacts and programming paradigms at a theoretical level.,maybe,"The paper mentions a ""declarative logic language based on reactive rules,"" suggesting some formal framework, but the level of mathematical rigor isn't clear from the abstract.",yes,"The paper explicitly examines coordination paradigms and compares them with imperative programming, meeting this criterion.",maybe,"The paper discusses a new language design with a focus on abstraction and declarative logic, which relates to fundamental design principles. However, it doesn't explicitly mention orthogonality or minimality.",maybe,"The abstract indicates a theoretical foundation through its logic-based approach, but the depth of mathematical framework isn't explicitly stated.",yes,"The implementation (prototype) appears to serve the theoretical contribution rather than being the primary focus, meeting this criterion.",yes,"The paper appears to make theoretical contributions through its new language design and paradigm analysis, though it also includes practical implementation.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"A theoretical study proposing a declarative logic language for coordination artifacts, examining programming paradigms with a focus on abstraction and reactive rules. The research demonstrates strong theoretical foundations by analyzing coordination paradigms and presenting a novel language design, with implementation serving to support broader theoretical contributions. While showing promise in addressing fundamental programming language principles, the abstract leaves some uncertainty about the depth of mathematical rigor and formal framework.",4.3
Extending the Quantitative Pattern-Matching Paradigm,"Sandra Alves, D. Kesner, Miguel Ramos",10.48550/arXiv.2408.11007,https://doi.org/10.48550/arXiv.2408.11007,Asian Symposium on Programming Languages and Systems,0,2024,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including pattern matching, type systems, and evaluation strategies, clearly meeting the fundamental analysis criterion.",yes,"The paper presents a formal mathematical framework using Œª-calculus, intersection types, and rigorous type systems for analyzing programming language properties, strongly meeting the formal framework criterion.",yes,"The paper analyzes functional programming paradigms and their relationship to different evaluation strategies (CBV and CBN), meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles through type systems and pattern matching mechanisms, particularly focusing on termination properties, meeting the language design principles criterion.",yes,"The paper provides a formal theoretical foundation through type systems, Œª-calculus, and mathematical analysis of termination properties, clearly meeting the theoretical foundation criterion.",yes,"The paper uses implementation aspects (pattern matching, ADTs) to support theoretical contributions rather than focusing on practical implementation details, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions regarding type systems, termination properties, and formal analysis rather than practical applications, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given its technical nature and academic style, even though this cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical investigation of programming language design, focusing on type systems, Œª-calculus, and termination properties through a formal mathematical framework. The study provides a comprehensive analysis of functional programming paradigms, examining fundamental computational constructs and their theoretical foundations with precise mathematical methods. By exploring intersection types, pattern matching, and evaluation strategies, the work contributes significantly to theoretical understanding of programming language principles.",4.9
Design of a modular multiparadigm programming language for teaching programming concepts,Antonio Augusto Rodrigues de Albuquerque Maranh√£o,-,-,-,0,2004,yes,"The paper analyzes fundamental programming language constructs through the lens of different paradigms and their integration, meeting this criterion.",maybe,"While the paper discusses a systematic approach to language development, it's not clear if it presents a formal mathematical framework. The focus seems more on practical implementation, partially meeting this criterion.",yes,"The paper explicitly examines multiple programming paradigms (functional, imperative, object-oriented, and logic) and their combinations, providing comparative theoretical analysis, strongly meeting this criterion.",yes,"The paper explicitly discusses orthogonality and modularity in language design, which are fundamental design principles, strongly meeting this criterion.",maybe,"The paper presents a theoretical approach to language design through modular components, but it's not clear if this is supported by formal mathematical foundations, partially meeting this criterion.",yes,"The implementation discussion serves to support the theoretical contributions about language design and paradigm integration, meeting this criterion.",yes,"The paper focuses on theoretical aspects of language design and paradigm integration, though it also includes practical applications, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a comprehensive exploration of programming language design principles, examining multiple paradigms through a modular and orthogonal approach. By systematically analyzing functional, imperative, object-oriented, and logic programming paradigms, the study offers a theoretical framework for understanding language development and integration. The work demonstrates strong theoretical contributions while maintaining practical relevance, particularly in educational contexts.",4.3
The Functional Paradigm,"M. Gabbrielli, S. Martini",10.1007/978-1-84882-914-5_11,https://doi.org/10.1007/978-1-84882-914-5_11,-,0,2010,yes,"The paper analyzes fundamental programming language constructs, particularly in functional programming and its relationship to lambda-calculus.",yes,The paper mentions the SECD machine and lambda-calculus as formal frameworks for analyzing functional programming properties.,yes,"The paper directly addresses programming paradigm foundations, comparing functional and imperative paradigms and analyzing their fundamental characteristics.",yes,"The paper discusses fundamental design principles of functional programming, including orthogonality (pure vs. impure forms) and minimality (basic properties of functional computation).",yes,"The paper explicitly includes theoretical foundations, particularly in its discussion of lambda-calculus and formal systems for computability.",maybe,The discussion of the SECD machine and real implementations appears to serve theoretical purposes rather than being the primary focus.,yes,"The paper appears to focus primarily on theoretical understanding, discussing fundamental properties and formal systems rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it is a book chapter.",Include,"This scholarly work provides a comprehensive theoretical exploration of functional programming, deeply examining paradigm foundations, formal frameworks, and computational principles through rigorous analysis of lambda-calculus and programming language design. The text demonstrates strong alignment with theoretical research criteria, offering substantive insights into fundamental programming constructs and paradigmatic comparisons. Its theoretical contribution is particularly noteworthy, focusing on conceptual understanding rather than practical implementation.",4.9
Extraction of Efficient Programs in IŒ£1-arithmetic,"J√°n Komara, Paul J. Voda",-,-,arXiv.org,0,2019,yes,The paper analyzes fundamental programming constructs through the lens of proof theory and primitive recursive functions.,yes,"The paper deals with formal proof systems (IŒ£1-proofs) and mathematical foundations (primitive recursive functions, IŒ£1-arithmetic), indicating the use of a formal mathematical framework.",yes,The paper explicitly examines a programming paradigm (PR+IŒ£1) and its theoretical foundations.,maybe,"The paper discusses a specific programming paradigm (PR+IŒ£1) and its implementation in CL, suggesting attention to fundamental design principles, though it does not explicitly address orthogonality or minimality.",yes,"The paper has a clear theoretical foundation, combining mathematical logic (proof theory) with programming language design.",maybe,"While implementation is mentioned (CL system), it appears to serve theoretical goals rather than being the primary focus.",yes,"The paper appears primarily theoretical, focusing on proof extraction and theoretical foundations rather than practical implementation details.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of programming language design, focusing on formal proof systems and mathematical foundations of computational paradigms. The study presents a sophisticated analysis of programming constructs through mathematical logic, demonstrating strong alignment with theoretical and formal screening criteria. Its primary contribution lies in the theoretical examination of programming language principles and proof extraction mechanisms.",4.6
Analysing Functional Paradigm Concepts - The JavaScript Case,"L. Janecek, R. Pergl",10.1007/978-3-319-56535-4_86,https://doi.org/10.1007/978-3-319-56535-4_86,WorldCIST,0,2017,yes,"The paper clearly analyzes fundamental programming language constructs, specifically focusing on functional programming principles.",maybe,"The abstract does not explicitly mention a formal mathematical framework or verification approach. It describes a ""conceptual framework"" but does not indicate if it is formal in nature.",yes,"The paper explicitly focuses on analyzing the functional paradigm and its fundamental concepts, providing comparative analysis across different languages.",maybe,"The paper discusses fundamental principles of functional programming, including ""key principles and additional principles,"" though it does not explicitly mention orthogonality or minimality.",maybe,"While the paper analyzes fundamental concepts, it is not clear if it provides a formal theoretical foundation. The approach seems more descriptive than formally theoretical.",yes,The paper discusses implementation aspects (analyzing JavaScript versions) but uses these to support broader theoretical contributions about the functional paradigm.,yes,"The paper appears to contribute to theoretical understanding by analyzing fundamental concepts and principles of the functional paradigm, though it also includes practical applications.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The study provides a comprehensive analysis of functional programming paradigms, focusing on fundamental principles and their application across different programming languages. While demonstrating strong theoretical insights into programming language design, the research lacks explicit formal mathematical frameworks or rigorous verification approaches. The work contributes to understanding programming language constructs through a conceptual framework that examines key and additional principles of functional programming.",4
Relational Reactive Programming: miniKanren for the Web,Evan Donahue,10.48550/arXiv.2408.17044,https://doi.org/10.48550/arXiv.2408.17044,arXiv.org,0,2024,maybe,"The paper analyzes fundamental programming language constructs (reactive programming, relational programming) at a theoretical level, though the abstract suggests a practical implementation focus.",maybe,"The paper mentions ""relational programming"" and ""miniKanren,"" which suggests some formal framework, but it is not explicitly clear if this is a rigorous mathematical framework.",yes,"The paper explicitly examines programming paradigms, specifically reactive programming in web development, meeting this criterion.",maybe,"The paper discusses reactive programming frameworks and their application, but does not explicitly focus on orthogonality or minimality. It does address fundamental design principles in the context of reactive programming.",maybe,"The abstract suggests some theoretical foundation through relational programming, but the focus appears more practical, discussing implementation in JavaScript.",maybe,"The paper does discuss implementation, but it seems to be a significant focus rather than supporting theoretical contributions.",maybe,"While the paper makes some theoretical contributions through relational programming, it appears to focus significantly on practical implementation (""reactive Javascript implementation"").",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores reactive programming paradigms with a focus on relational programming and JavaScript implementation, demonstrating partial alignment with theoretical screening criteria. While the study addresses programming language constructs and paradigms, its emphasis on practical implementation and limited explicit theoretical framework suggests moderate theoretical depth. The work provides insights into reactive programming but may not fully satisfy rigorous theoretical research requirements.",3.2
Programming in the MPL-RM programming language,K. Marth,10.1145/1167253.1167313,https://doi.org/10.1145/1167253.1167313,ACM Southeast Regional Conference,0,2005,maybe,"The paper appears to analyze fundamental programming language constructs through the lens of multiple paradigms, though the depth of analysis is not entirely clear.",maybe,"The abstract mentions the ""relational model of data"" as a theoretical foundation, suggesting some formal framework, but the depth of mathematical rigor is not explicitly detailed.",yes,"The paper explicitly focuses on integrating multiple programming paradigms (procedural, object-oriented, functional, relational, logic, and constraint) in a unified way, strongly matching this criterion.",maybe,"The paper discusses the integration of multiple paradigms in a unified language, suggesting attention to fundamental design principles, though it does not explicitly mention orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation based on the relational model, but the depth of the mathematical framework is not clear from the abstract.",maybe,"The abstract suggests a balance between theoretical integration and practical implementation, with examples serving to illustrate the theoretical framework.",maybe,"The paper appears to make theoretical contributions by synthesizing different paradigms, though the abstract mentions ""examples of programming"" which suggests some practical focus.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"A multiparadigm programming language study exploring theoretical foundations across procedural, object-oriented, functional, relational, logic, and constraint programming paradigms. The research demonstrates strong potential for theoretical contribution by synthesizing multiple programming approaches within a unified relational model framework. While showing promise in paradigm integration, the abstract suggests a balanced approach between theoretical analysis and practical implementation examples.",4.3
Object-oriented programming as the end of history in programming languages,M. Van Emden,10.1109/PACRIM.1997.620424,https://doi.org/10.1109/PACRIM.1997.620424,"1997 IEEE Pacific Rim Conference on Communications, Computers and Signal Processing, PACRIM. 10 Years Networking the Pacific Rim, 1987-1997",0,1997,maybe,"The paper analyzes fundamental aspects of programming languages through the lens of paradigms, though the depth of this analysis is not clear from the abstract.",no,The abstract does not explicitly mention any formal mathematical framework or verification approach. The analysis appears to be more conceptual than formal.,yes,"The paper directly examines programming paradigms (dataflow, logic, functional, object-oriented) and their relationship to language design, strongly meeting this criterion.",maybe,"The paper discusses programming paradigms and their relationship to language design, particularly focusing on how C++ can support dataflow programming, suggesting some investigation of fundamental design principles, though not explicitly mentioned.",no,"While the paper makes theoretical claims about programming paradigms, it is unclear if these are supported by a formal theoretical foundation. The abstract suggests a more argumentative approach.",maybe,"The paper discusses C++ as an implementation example, but this appears to serve theoretical arguments rather than being the primary focus.",yes,"The paper appears to make theoretical contributions about the relationship between programming paradigms and language design, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates strong theoretical engagement with programming paradigms, particularly examining how different programming approaches relate to language design. While the study appears to offer conceptual insights into programming language foundations, it lacks explicit evidence of a rigorous formal mathematical framework. The research seems oriented toward theoretical contributions about programming paradigms rather than practical implementation details.",3.9
Conjunctive Query Programming: A Paradigm for Knowledge Engineering of Optimization Problems in the Semantic Web,Thomas Fischer,10.1109/WI-IAT.2014.30,https://doi.org/10.1109/WI-IAT.2014.30,2014 IEEE/WIC/ACM International Joint Conferences on Web Intelligence (WI) and Intelligent Agent Technologies (IAT),0,2014,yes,"The paper analyzes fundamental constructs in terms of combining algebraic and logical modeling at a theoretical level, meeting this criterion.",yes,"The paper explicitly mentions formal reasoning techniques, compilation to satisfiability modulo theories, and integer programming, indicating a rigorous formal framework, strongly meeting this criterion.",maybe,"While the paper discusses a language paradigm, it is more focused on the integration of different formalisms rather than comparative analysis of programming paradigms, partially meeting this criterion.",maybe,"The paper discusses a language paradigm combining algebraic and logical modeling, but does not explicitly address orthogonality or minimality, partially meeting this criterion.",yes,"The paper presents a formal theoretical foundation combining algebraic and logical modeling with formal reasoning techniques, meeting this criterion well.",yes,"The implementation aspects (compilation to SMT and integer programming) serve to support the theoretical contributions, meeting this criterion.",yes,"The paper focuses on theoretical contributions in combining formalisms and developing reasoning techniques rather than practical applications, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research presents a rigorous theoretical framework combining algebraic and logical modeling with formal reasoning techniques, demonstrating strong alignment with criteria focused on theoretical foundations and formal analysis. While the study partially addresses language design principles and paradigm theory, it provides a comprehensive approach to integrating optimization and planning techniques with semantic web knowledge representation. The work's emphasis on theoretical contributions and formal frameworks suggests significant potential for advancing computational reasoning methodologies.",4.3
METAMODELLING WITH FORMAL SEMANTICS SPECIFICATIONS FOR AN ACCESS CONTROL METAMODEL WITH DECISION CAPABILITIES,"Jamal Abd-Ali, K. E. Guemhioui, L. Logrippo",10.5220/0005272903540362,https://doi.org/10.5220/0005272903540362,International Conference on Model-Driven Engineering and Software Development,0,2015,no,"While the paper analyzes language constructs, it is more focused on metamodelling and access control rather than fundamental programming language constructs.",maybe,"The paper mentions mapping to first-order logic programs and formal specifications, indicating some formal framework usage, but it's not clear how rigorous this framework is.",no,"The paper presents a metamodelling paradigm, but it is focused on access control specification rather than fundamental programming paradigms.",no,"The paper discusses metamodelling languages and their design, but does not explicitly address orthogonality or minimality. It focuses more on visual aspects and semantics.",maybe,"The paper appears to have a theoretical foundation in metamodelling and formal specifications, but the abstract does not detail the depth of the mathematical framework.",maybe,The paper discusses implementation aspects (mapping to logic programs) but seems to use these to support theoretical contributions about metamodelling.,no,"The paper makes theoretical contributions in metamodelling and formal specification, but appears to be more focused on practical application to access control systems.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a metamodelling approach for access control specification languages, demonstrating theoretical contributions in formal specification and language design. While the study incorporates elements of formal frameworks and theoretical analysis, its primary focus appears more applied and domain-specific rather than deeply exploring fundamental programming language principles. The work shows promise in theoretical foundations but may not fully satisfy rigorous criteria for pure programming language theory research.",3.2
Multi-paradigm Programming through Graph Rewriting: Case for Support 2 Background 2.1 Previous Work Declarative Programming Multi-paradigm Programming,"Sanjiva Prasad, A. Giacalone, Prateek Mishra",-,-,-,0,-,yes,"The paper demonstrates strong evidence of fundamental analysis of programming language constructs, particularly through the lens of graph rewriting and paradigm integration.",yes,"The paper mentions graph rewriting as a formal framework for analyzing programming language properties. It specifically aims to ""identify a core model of graph rewriting"" and discusses theoretical foundations.",yes,"The paper explicitly focuses on multi-paradigm languages, combining process and functional programming, and functional and concurrent logic programming. It provides comparative theoretical analysis of paradigms.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on multi-paradigm languages and their implementation. It explicitly mentions ""declarative principles"" and discusses the integration of different programming paradigms.",yes,"The paper has a strong theoretical foundation through its focus on graph rewriting principles and formal analysis of programming paradigms. The abstract mentions ""theoretical clarity"" and discusses fundamental principles.",yes,"The implementation discussion is clearly in service of theoretical contributions, as evidenced by the focus on ""practical implementations of multi-paradigm languages"" based on theoretical principles.",yes,"The paper appears to make significant theoretical contributions, focusing on fundamental principles of programming language design and implementation. While it includes implementation aspects, these serve theoretical goals.",yes,"The paper is written in English, meeting the language requirement.",maybe,"The academic nature and references suggest the full text is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"The research presents a comprehensive theoretical exploration of multi-paradigm programming languages, focusing on graph rewriting principles and fundamental design constructs across functional, process, and concurrent logic programming paradigms. By examining theoretical foundations, paradigm integration, and implementation strategies, the study offers a rigorous mathematical framework for understanding programming language design and computational primitives. The work demonstrates strong alignment with theoretical research criteria, emphasizing fundamental analysis and paradigm theory over purely practical implementation concerns.",4.9
"Rewriting calculi, higher-order reductions and patterns: introduction","Horatiu Cirstea, M. Fern√°ndez",10.1017/S0960129508006737,https://doi.org/10.1017/S0960129508006737,Mathematical Structures in Computer Science,0,2008,yes,"The paper appears to analyze fundamental programming language constructs at a theoretical level, particularly regarding first-order and higher-order paradigms.",maybe,"The abstract mentions ""computation models"" and ""logical frameworks,"" suggesting the use of formal mathematical frameworks, though the details are not explicit.",yes,"The abstract explicitly focuses on the integration of first-order and higher-order paradigms, which is central to programming paradigm foundations.",maybe,"The abstract discusses the integration of programming paradigms and computation models, which relates to fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,"The paper appears to have a strong theoretical foundation, discussing the integration of first-order and higher-order paradigms, which suggests mathematical rigor.",yes,The abstract focuses on theoretical aspects rather than implementation details.,yes,"The abstract suggests theoretical contributions through the development of ""new computation models and new logical frameworks,"" rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"The abstract demonstrates a strong theoretical focus on programming language paradigms, particularly the integration of first-order and higher-order computational models. It presents a rigorous exploration of fundamental design principles, paradigm foundations, and theoretical contributions in programming language research. The study appears to offer a sophisticated mathematical framework for analyzing computational constructs at a deep theoretical level.",4.6
Declaration-Driven Frameworks: A Language-Agnostic Approach,"P. V. D. Walt, C. Consel, E. Balland",-,-,-,0,2015,maybe,"The paper analyzes fundamental framework constructs and their application across paradigms, though the focus is more on framework design than basic programming language constructs.",maybe,"While the paper presents a systematic approach to framework design, it's not explicitly clear if it uses formal mathematical frameworks. The abstract suggests more of a design principles approach rather than formal verification.",yes,"The paper explicitly examines programming paradigms, comparing object-oriented (Java) and functional (Racket) approaches, meeting this criterion.",yes,"The paper discusses framework design principles and their application across programming paradigms, including orthogonality (applicability ""independently from the underlying programming paradigm""), meeting this criterion.",maybe,"The paper appears to have a theoretical foundation in framework design principles, but it's not clear if this is formalized mathematically. The focus seems more on practical application and design principles.",yes,"The paper includes implementation (prototype mobile application) but uses this to support broader theoretical contributions about framework design, meeting this criterion.",yes,"The paper makes theoretical contributions through its framework design principles and cross-paradigm analysis, though it also includes practical implementation. The balance appears appropriate.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores programming framework design principles across object-oriented and functional paradigms, demonstrating strong theoretical contributions in language design and cross-paradigm analysis. While the study provides systematic insights into framework development and privacy considerations, it shows partial alignment with formal mathematical frameworks and theoretical foundations. The work balances practical implementation with theoretical exploration of programming language constructs.",4.3
Compositional theories for host-core languages,"D. Trotta, M. Zorzi",-,-,-,0,2020,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on linearity and type theory, strongly meeting this criterion.",yes,"The paper presents a formal mathematical framework through ""enriched categories"" and provides a denotational model with strong correspondence between syntax and semantics, clearly meeting this criterion.",yes,"The paper examines computational paradigms, particularly ""non-classical computational paradigms"" and discusses multi-language programming paradigms, meeting this criterion.",yes,"The paper explicitly deals with type theory and language design principles, particularly focusing on linearity and non-linearity in programming languages, strongly meeting this criterion.",yes,"The paper is built on formal theoretical foundations, extending Benton's Linear-Non-Linear type theory and providing mathematical frameworks for analysis, strongly meeting this criterion.",yes,"While the paper mentions ""concrete instances,"" these appear to serve theoretical purposes rather than being the primary focus, meeting this criterion.",yes,"The paper focuses on theoretical contributions, presenting a new type theory system (HC) and its mathematical foundations rather than practical applications, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and academic context of the paper suggest it is likely accessible through academic channels.",Include,"This research presents a rigorous theoretical exploration of programming language design principles, focusing on type theory and computational paradigms through a formal mathematical framework. The study extends existing linear type theories, providing a novel host-core type theory system with strong theoretical foundations and mathematical modeling. Its comprehensive analysis of fundamental programming language constructs demonstrates significant theoretical contributions to understanding computational paradigms.",4.9
Foreword,J. Lapp,10.1889/1.1844655,https://doi.org/10.1889/1.1844655,IEEE International Conference on Robotics and Automation,0,2001,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including concurrency, object-oriented features, and actor systems.",yes,"The paper presents strong evidence of formal mathematical frameworks, including proof-theoretic approaches, linear logic, algebraic specification, and formal characterization of actor systems.",yes,"The paper explicitly examines programming paradigms, particularly concurrent programming, object-oriented programming, and actor-based systems.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on concurrent object-oriented programming and proof-theoretic foundations.",yes,"The paper is heavily focused on theoretical foundations, including proof-theoretic foundations, linear logic as a specification language, and algebraic frameworks.",yes,"The paper appears to use implementation aspects to support theoretical contributions, particularly in discussing actor systems and concurrent programming.",yes,"The paper focuses on theoretical contributions rather than practical aspects, including proof-theoretic foundations, formal specification, and theoretical frameworks.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it is a special issue of Mathematical Structures in Computer Science.",Include,"This research presents a rigorous theoretical exploration of programming language foundations, focusing on proof-theoretic approaches to concurrent and object-oriented programming paradigms. The study employs formal mathematical frameworks, including linear logic and algebraic specification, to analyze fundamental computational constructs and provide a deep theoretical understanding of programming language design principles. By examining actor systems, concurrency, and object-oriented programming through a formal lens, the research contributes substantively to theoretical computer science.",4.9
Structural Proof Theory and Logic Programming An extended abstract,D. Miller,-,-,-,0,2020,yes,"The paper indicates deep analysis of fundamental programming language constructs, particularly focusing on logical connectives, quantifiers, and proof theory.",yes,"The paper presents and utilizes formal mathematical frameworks, including model theory, SLD-resolution, and proof theory, to analyze programming language properties.",yes,"The paper explicitly compares and analyzes different programming paradigms (logic programming vs. functional programming) from a theoretical perspective, including their fundamental differences.",yes,"The paper discusses fundamental design principles of logic programming languages, particularly focusing on their semantic foundations and theoretical frameworks.",yes,"The paper includes a strong theoretical foundation, discussing denotational semantics, operational semantics, and proof theory frameworks.",yes,The paper uses implementation aspects (like SLD-resolution) to support broader theoretical contributions rather than focusing on practical applications.,yes,"The paper appears to be primarily theoretical, focusing on semantic foundations and proof theory rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, though it is likely accessible through academic channels.",Include,"This research presents a rigorous theoretical exploration of programming language semantics, focusing on proof theory and paradigm foundations across logic and functional programming. The study demonstrates strong alignment with theoretical research criteria, offering deep mathematical analysis of computational frameworks, semantic descriptions, and fundamental programming language constructs. Its comprehensive examination of programming paradigms and formal theoretical approaches provides significant insights into computational logic and language design principles.",4.9
Paradigm for programming computers,M. Schaffner,10.1109/ICNN.1994.374293,https://doi.org/10.1109/ICNN.1994.374293,International Conference on Neural Networks,0,1994,yes,"The paper appears to analyze fundamental aspects of programming at a theoretical level, examining the basic communication model between humans and computers.",maybe,"The abstract mentions ""analysis"" and ""modeling"" but does not explicitly indicate a formal mathematical framework. However, the structured approach to programming as communication suggests some theoretical rigor.",maybe,"The abstract discusses fundamental aspects of programming as communication, which relates to paradigm foundations, but does not explicitly compare paradigms.",maybe,"The abstract discusses programming as a communication model and mentions modeling phases, suggesting a theoretical approach to programming language design, even though it does not explicitly address orthogonality or minimality.",yes,"The paper appears to present a theoretical foundation for programming, breaking it down into two distinct phases and analyzing the modeling phase, suggesting a theoretical approach.",yes,"The abstract explicitly states that the paper focuses on the modeling phase rather than implementation, aligning with this criterion.",yes,"The focus appears to be theoretical, examining the fundamental nature of programming as communication rather than practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract presents a theoretical exploration of programming as a communication model, demonstrating strong alignment with fundamental analysis and theoretical contribution criteria. While some screening criteria cannot be definitively assessed from the abstract alone, the paper's focus on modeling phases and theoretical foundations suggests significant potential relevance to programming language research.",4.3
A Data Flow Language for Hybrid Query and Programming Languages,"K. Rose, Lionel Villard, N. Sato",10.1007/978-3-642-29822-6_19,https://doi.org/10.1007/978-3-642-29822-6_19,Fuji International Symposium on Functional and Logic Programming,0,2012,yes,"The paper analyzes fundamental programming language constructs through the lens of data flow mechanisms and provides theoretical analysis of computational primitives, which meets the fundamental analysis criterion.",yes,"The paper presents ""trix"" as a formal framework for analyzing data flow mechanisms and programming constructs, including formal reasoning about program equivalence, which meets the formal framework criterion.",yes,"The paper explicitly examines multiple programming paradigms and provides comparative theoretical analysis, showing how different paradigms can be unified through the trix formalism, which meets the paradigm theory criterion.",maybe,"The paper discusses the formalization of data flow mechanisms and programming constructs, which relates to fundamental design principles, though it does not explicitly address orthogonality or minimality.",yes,"The paper presents a formal theoretical foundation (trix) and uses ""data flow equivalence"" equational reasoning, which meets the theoretical foundation criterion.",yes,"While the paper mentions performance improvements and benchmarks, these appear to serve as validation of the theoretical framework rather than being the primary focus, which meets the implementation focus criterion.",yes,"The paper's primary focus is on theoretical contributions, including formalization and reasoning about program equivalence, though it does include some practical applications, which meets the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical study presenting a formal framework for analyzing programming language constructs across multiple paradigms, with strong emphasis on mathematical reasoning and fundamental computational principles. The research provides a comprehensive theoretical approach to understanding data flow mechanisms, offering both conceptual insights and potential practical applications through a unified formalism.",4.9
Paradigm for programming computers,M. Schaffner,10.1109/ICNN.1994.374682,https://doi.org/10.1109/ICNN.1994.374682,International Conference on Neural Networks,0,1994,yes,"The paper appears to analyze fundamental aspects of programming at a theoretical level, particularly the modeling phase, meeting this criterion.",maybe,"The abstract mentions ""analysis"" but does not indicate the use of formal mathematical frameworks or verification approaches.",maybe,"The abstract suggests a theoretical examination of programming fundamentals, but does not specifically address programming paradigms or comparative analysis.",maybe,The abstract discusses fundamental aspects of programming but does not explicitly address orthogonality or minimality. It focuses on the modeling phase of programming.,maybe,"While the paper appears theoretical in nature, discussing fundamental aspects of programming as communication, it does not explicitly mention mathematical frameworks.",yes,"The abstract explicitly states that the paper focuses on the modeling phase rather than implementation, which aligns with this criterion.",yes,"The paper appears to focus on theoretical aspects of programming (modeling phase) rather than practical implementation, meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates a theoretical approach to programming language fundamentals, focusing on the modeling phase and communication between humans and machines. While showing promise in examining fundamental programming concepts, the text lacks explicit references to formal mathematical frameworks or rigorous verification approaches. The study appears to contribute to theoretical understanding of programming language design principles, though some screening criteria remain partially or uncertainly addressed.",3.5
The Logical Structure of Concurrent Constraint Programming Languages (Abstract),P. Panangaden,10.1007/978-3-540-48654-1_11,https://doi.org/10.1007/978-3-540-48654-1_11,International Conference on Concurrency Theory,0,1994,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, examining logical connectives, concurrent computation primitives, and categorical structure, strongly meeting the fundamental analysis criterion.",yes,"The paper heavily emphasizes formal mathematical frameworks, specifically using categorical structure (hyperdoctrines), denotational semantics, operational semantics, and logical foundations, strongly meeting the formal framework criterion.",yes,"The paper explicitly examines programming paradigm foundations, comparing Concurrent Constraint Programming with logic programming and analyzing its fundamental nature, strongly meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of Concurrent Constraint Programming, including its logical foundations and categorical structure, strongly meeting the language design principles criterion.",yes,"The paper is deeply theoretical, using categorical logic, denotational semantics, operational semantics, and logical foundations, strongly meeting the theoretical foundation criterion.",yes,"The paper appears to focus on theoretical aspects rather than implementation, meeting the implementation focus criterion.",yes,"The paper focuses entirely on theoretical contributions, analyzing fundamental properties and relationships between paradigms, with no practical implementation details mentioned, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of Concurrent Constraint Programming, utilizing advanced mathematical frameworks like hyperdoctrines and categorical logic to analyze programming paradigm foundations. The study deeply examines fundamental language design principles, logical structures, and computational primitives through a sophisticated theoretical lens, demonstrating significant contributions to understanding programming language semantics and paradigmatic relationships.",4.9
Factored Specifications In The Synthesis Of LISP Functions,T. Biggerstaff,10.1145/800127.804132,https://doi.org/10.1145/800127.804132,ACM Annual Conference,0,1978,maybe,"The paper analyzes fundamental aspects of program specification at a theoretical level, though not specifically programming language constructs.",yes,"The paper presents a formal specification paradigm with ""sufficient formality and rigor to allow machine processing."" It includes a ""well-defined procedure for synthesizing programs,"" suggesting a formal framework.",maybe,"While the paper discusses a specification paradigm, it focuses more on program specification than programming paradigms specifically.",maybe,"The paper discusses a specification paradigm with formal elements, but does not explicitly focus on orthogonality or minimality. It does address fundamental design principles in program specification.",yes,"The paper appears to have a theoretical foundation, presenting a new specification paradigm with formal elements and comparing it to other formal methods.",yes,The paper discusses implementation (the C2 system) but uses it to support theoretical contributions about the specification paradigm.,yes,"The paper makes theoretical contributions by introducing a new specification paradigm and analyzing its properties, though it also has practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"A rigorous theoretical exploration of program specification paradigms, presenting a novel framework with formal mathematical foundations and comparative analysis across multiple specification methodologies. The study demonstrates strong theoretical contributions by introducing a systematic approach to program synthesis, balancing formal principles with practical implementation considerations. While primarily focused on specification systems rather than direct programming language constructs, the research provides substantive insights into fundamental computational design principles.",4
Pourquoi existe-t-il de nombreux paradigmes de programmation ?,"Oscar Plaisant, Max Lemoine",10.48550/arXiv.2412.00248,https://doi.org/10.48550/arXiv.2412.00248,arXiv.org,0,2024,no,"While the paper discusses fundamental aspects of programming paradigms, it's not clear if it analyzes specific language constructs or primitives at a theoretical level.",no,"The abstract mentions ""formally equivalent"" regarding Turing completeness, but does not indicate a formal mathematical framework for analysis.",yes,"The paper explicitly focuses on programming paradigms and their theoretical foundations, including comparative analysis of different paradigms.",no,"The abstract does not explicitly discuss orthogonality or minimality, and while it mentions programming paradigms, it does not specifically address fundamental design principles.",no,"While the paper discusses theoretical aspects of paradigms, it appears to be more descriptive than formally theoretical, focusing on practical applications and suitability.",maybe,"The abstract suggests a balanced approach between theoretical understanding and practical applications, which aligns with this criterion.",maybe,"The paper appears to make theoretical contributions by analyzing why multiple paradigms exist, though it seems to balance theoretical and practical aspects.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract demonstrates strong engagement with programming paradigm theory, offering a comparative analysis of different programming approaches. While the text shows theoretical potential, it lacks explicit formal mathematical frameworks and rigorous design principle investigations. The study appears to balance theoretical exploration with practical paradigm applications, suggesting a nuanced but not comprehensively theoretical approach.",3.5
iCoLa+: An extensible meta-language with support for exploratory language development,"Damian Fr√∂lich, L. T. V. Binsbergen",10.1016/j.jss.2024.111979,https://doi.org/10.1016/j.jss.2024.111979,Journal of Systems and Software,0,2024,yes,The paper analyzes fundamental language constructs through its meta-language approach and language composition theory.,maybe,"The paper presents iCoLa+, a meta-language implemented in Haskell, suggesting a formal framework, but the abstract does not explicitly mention mathematical verification approaches.",yes,"The paper directly addresses programming paradigms, specifically language-oriented programming and domain-specific languages.",maybe,"The paper discusses language design principles through the lens of language-oriented programming and meta-language development, addressing fundamental design principles through ""reusable components"" and ""language-parametric tooling,"" even though it does not explicitly mention orthogonality or minimality.",no,"While the paper presents a theoretical approach to language development, the abstract does not explicitly mention formal theoretical foundations or mathematical frameworks.",yes,The implementation discussion (iCoLa+ in Haskell) serves to support theoretical contributions about language composition and parametric tooling.,yes,"The paper appears to make theoretical contributions through its meta-language approach and language composition theory, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The technical nature and implementation details of the paper suggest it is likely a formal academic paper with accessible full text, though this cannot be determined from the abstract alone.",Exclude,"The research presents a theoretical exploration of programming language design through a meta-language approach, demonstrating strong alignment with paradigm theory and fundamental language construct analysis. While the study offers insights into language composition and parametric tooling, there are some uncertainties regarding the depth of formal mathematical frameworks and explicit theoretical foundations. The work appears to contribute meaningfully to theoretical understanding of programming language development through its innovative meta-language implementation.",4.3
Development of Procedural-Parametric Paradigm in the Language GO,"S. Y. Smogluk, E. N. Garin, D. S. Romanova",10.17516/1999-494x-0230,https://doi.org/10.17516/1999-494x-0230,Journal of Siberian Federal University Engineering & Technologies,0,2020,maybe,"The paper analyzes fundamental programming language constructs (parametric polymorphism, procedural programming) at a conceptual level, though it's unclear how deeply theoretical this analysis is.",no,The abstract does not indicate any formal mathematical framework or rigorous verification approach. The paper appears to be more descriptive of the paradigm rather than formally analyzing it.,yes,"The paper directly examines programming paradigm foundations, specifically proposing a new paradigm (PPP) and comparing it with procedural and object-oriented programming, strongly meeting this criterion.",maybe,"The paper discusses parametric polymorphism and procedural-parametric programming as fundamental design principles, partially meeting this criterion, though it's not explicitly focused on orthogonality or minimality.",no,"While the paper presents a programming paradigm, it does not explicitly mention a formal theoretical foundation or mathematical framework to support its claims.",maybe,"The abstract suggests a balance between theoretical contribution (new paradigm) and practical implementation aspects, meeting this criterion moderately.",maybe,"The paper appears to make a theoretical contribution by proposing a new programming paradigm, though it seems to focus more on practical applications than deep theoretical analysis.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"A programming paradigm proposal exploring procedural-parametric programming demonstrates strong theoretical foundations in paradigm analysis, with moderate engagement in language design principles and fundamental construct examination. While the study offers insights into programming paradigms, it lacks explicit formal mathematical frameworks and rigorous verification approaches, potentially limiting its theoretical depth.",3.5
A Language for Writing Formal Software Specifications: The Library Problem Revisited,C. Chiang,10.1109/ITNG.2006.11,https://doi.org/10.1109/ITNG.2006.11,International Conference on Information Technology: New Generations,0,2006,maybe,"The paper analyzes fundamental aspects of programming through its focus on specification languages and paradigm integration, though the depth of analysis of basic constructs isn't clear from the abstract.",yes,"The paper explicitly mentions ""formal specification"" and discusses proofs, indicating a formal mathematical framework is present.",yes,"The paper explicitly focuses on software development paradigms and their integration, including ""conventional software development, operational specification, rapid prototyping.""",maybe,"The paper discusses a formal specification language (TUG) and mentions integration of different paradigms, suggesting some focus on language design principles, though orthogonality and minimality aren't explicitly mentioned.",maybe,"The paper appears to have a theoretical foundation through its formal specification language and analysis via proofs, though the depth isn't entirely clear from the abstract.",maybe,"The paper discusses implementation aspects (prototyping, testing) but these appear to support broader theoretical contributions about the specification language and paradigm integration.",maybe,"The paper appears to make theoretical contributions through its formal specification language and analysis framework, though it also has practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"A formal specification language exploring software development paradigms demonstrates strong theoretical foundations through its integration of multiple programming approaches and rigorous analytical methods. The research presents a comprehensive framework for understanding programming language design, emphasizing formal specification, paradigm integration, and theoretical contributions to software development methodology.",4.3
Programming Languages and Paradigms,Petra Hofstedt,10.1007/978-3-642-17330-1_3,https://doi.org/10.1007/978-3-642-17330-1_3,-,0,2011,no,"While the abstract mentions ""basic concepts,"" there is no clear indication of theoretical analysis of fundamental constructs.",no,The abstract does not indicate the use of any formal mathematical frameworks or verification approaches.,maybe,"The abstract mentions ""amalgamation of programming paradigms,"" which suggests some paradigm analysis, but it is unclear if this is theoretical or practical.",maybe,"The abstract mentions ""basic concepts and notions from the programming languages area"" but does not specifically indicate whether it covers orthogonality or minimality, so it is unclear if this criterion is met.",no,The abstract does not mention any formal theoretical foundation.,maybe,The abstract does not provide enough information to determine the implementation focus.,no,The abstract suggests this is more of an introductory or educational text rather than a theoretical contribution.,yes,"The abstract is written in English, so this criterion is met.",maybe,The abstract does not provide enough information to determine if the full text of the paper is accessible.,Exclude,"The abstract appears to be an introductory text about programming paradigms, lacking clear evidence of theoretical depth or formal analysis. While written in English, the text suggests an educational approach rather than a rigorous theoretical investigation, with minimal indication of meeting the sophisticated screening criteria for programming language research.",2.5
Lazy Functional Programs in a Concurrent Environment,"L. Feijs, M. Reniers",10.1093/comjnl/40.9.572,https://doi.org/10.1093/comjnl/40.9.572,Computer/law journal,0,1997,yes,"The paper analyzes fundamental programming language constructs, examining I/O mechanisms at a theoretical level, studying communication behavior, and analyzing computational primitives, meeting the fundamental analysis criterion.",yes,"The paper uses formal frameworks such as the Algebra of Communicating Processes (ACP e œÑ), discusses term rewriting systems, and includes operational semantics, meeting the formal framework criterion.",yes,"The paper explicitly examines programming paradigms, bridging functional and process-oriented paradigms, analyzing fundamental differences between paradigms, and providing comparative theoretical analysis, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of functional programming languages, particularly regarding I/O mechanisms and their relationship to reactive systems, meeting the language design principles criterion.",yes,"The paper presents a strong theoretical foundation, using formal process equations, analyzing relationships between different formal systems, and employing abstract mathematical concepts, meeting the theoretical foundation criterion.",yes,"The paper uses implementation aspects (I/O mechanisms) to support theoretical contributions rather than focusing on practical implementation details, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions, developing formal relationships between paradigms, providing theoretical analysis of I/O behavior, and focusing on fundamental properties rather than practical applications, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language paradigms, utilizing formal mathematical frameworks like Algebra of Communicating Processes to analyze fundamental computational constructs. The study bridges functional and process-oriented programming approaches through a sophisticated examination of I/O mechanisms, term rewriting systems, and operational semantics, demonstrating a deep theoretical contribution to understanding programming language design principles.",4.9
Monads are not what they seem Uncovering the hidden nature of programming concepts,T. Pet≈ô√≠ƒçek,-,-,-,0,2017,yes,"The paper analyzes fundamental programming language constructs (monads) at a theoretical level, incorporating multiple perspectives.",maybe,"The paper mentions category theory and formal aspects of monads, indicating some formal mathematical framework, though it appears to be more focused on broader perspectives.",maybe,"The paper examines programming concepts through multiple theoretical lenses, including category theory and programming paradigms, though this is not its primary focus.",maybe,"The paper discusses monads, which are fundamental programming language concepts, but does not explicitly focus on orthogonality or minimality. However, it does examine fundamental design principles through a theoretical lens.",yes,"The paper has a strong theoretical foundation, incorporating category theory and developing a formal framework for understanding programming concepts at three levels (formal, metaphorical, and implementation).",yes,The paper includes implementation aspects but uses them to support broader theoretical contributions.,yes,"The paper explicitly aims to contribute to theoretical understanding by developing a broader framework for understanding programming concepts, going beyond practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The study presents a comprehensive theoretical exploration of programming concepts, particularly monads, through a multidisciplinary lens that integrates formal mathematical frameworks, philosophical perspectives, and cognitive analysis. By developing a three-level framework for understanding programming concepts and examining fundamental computational primitives, the research offers a rigorous theoretical contribution that transcends traditional technical approaches. The work demonstrates strong alignment with theoretical research criteria by providing a sophisticated, multi-perspective examination of programming language foundations.",4.6
A Generalization and Paradigm-Independent Reformulation of Algorithmic Debugging,"D. Cabrera, Josep Silva",10.1007/978-3-319-27436-2_16,https://doi.org/10.1007/978-3-319-27436-2_16,International Workshop/Symposium on Logic-based Program Synthesis and Transformation,0,2015,yes,"The paper analyzes fundamental debugging constructs at a theoretical level, proposing a reformulation of standard approaches.",maybe,"The abstract suggests a theoretical reformulation of debugging techniques, but does not explicitly mention formal mathematical frameworks. However, the mention of ""standard definitions and algorithms"" and ""paradigm-independent"" approach suggests some formal analysis.",maybe,"The paper explicitly addresses paradigm-independence and mentions different programming languages, suggesting some paradigm theory analysis.",maybe,"The paper discusses algorithmic debugging across programming languages, but does not explicitly focus on orthogonality or minimality. However, it does address fundamental design principles in debugging mechanisms.",maybe,"The paper appears to have a theoretical foundation, as it discusses reformulation of standard definitions and algorithms, though the depth of mathematical framework is not clear from the abstract.",yes,The paper discusses implementation aspects (internal data structures) but uses these to support broader theoretical contributions about debugging mechanisms.,yes,"The paper clearly focuses on theoretical contributions, proposing a reformulation of standard approaches and addressing fundamental problems in algorithmic debugging.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a theoretical investigation of algorithmic debugging across programming paradigms, offering a paradigm-independent reformulation of standard debugging techniques. By addressing fundamental design principles and proposing a novel theoretical approach, the study demonstrates strong potential for contributing to programming language theory and computational analysis. The work appears to balance theoretical rigor with practical insights, focusing on fundamental constructs and computational primitives.",4.3
Proceedings Tenth International Workshop on Developments in Computational Models,"Ugo Dal Lago, Russell Harmer",10.4204/EPTCS.179,https://doi.org/10.4204/EPTCS.179,-,0,2015,yes,"The focus on ""abstract models of computation"" and their applications to programming languages suggests fundamental analysis is present.",maybe,"The abstract mentions ""abstract models of computation"" and their applications, suggesting formal frameworks may be discussed, but it's not explicitly stated.",yes,"The abstract explicitly mentions ""new paradigms of software development"" and computational models, suggesting paradigm theory is covered.",maybe,"The abstract mentions ""new families of programming languages"" and ""new paradigms of software development,"" suggesting some coverage of language design principles, though it's not explicitly focused on orthogonality or minimality.",maybe,"The focus on ""abstract models of computation"" indicates theoretical foundations are likely present, though the depth isn't clear from the abstract.",yes,"The abstract emphasizes theoretical aspects (computational models) over implementation details, meeting this criterion.",yes,"The workshop's focus on computational models and their theoretical foundations suggests theoretical contributions are central, rather than purely practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The paper appears to be a workshop proceedings volume, which is typically accessible through academic databases or libraries, though this cannot be confirmed from the abstract alone.",Exclude,"A workshop proceedings volume exploring computational models and programming language paradigms, demonstrating strong theoretical foundations and potential alignment with language design principles. The abstract suggests comprehensive coverage of computational theory, paradigm development, and theoretical contributions across programming language research domains. Multiple screening criteria appear satisfied, though some aspects require further investigation to confirm full compliance.",4.3
1999 European Summer Meeting of the Association for Symbolic Logic,W. Hodges,10.2307/421084,https://doi.org/10.2307/421084,Bulletin of Symbolic Logic,0,2000,yes,"The paper provides clear evidence of fundamental analysis of programming language constructs, particularly in the discussion of term rewriting systems and game semantics.",yes,"The paper presents strong evidence of formal frameworks, particularly in the discussion of term rewriting systems, game semantics, and mathematical logic. It mentions ""formal systems"" and ""proof-theoretic analysis.""",yes,"The paper discusses various programming paradigms and their theoretical foundations, including functional programming and concurrent games.",maybe,"The paper discusses term rewriting systems and programming language semantics, including discussion of orthogonality in rewriting systems, which partially meets the language design principles criterion.",yes,"The paper demonstrates clear theoretical foundations, with discussions of mathematical logic, model theory, and formal semantics.",yes,The paper suggests a strong theoretical focus with minimal discussion of implementation details.,yes,"The paper appears to be primarily theoretical, focusing on formal semantics, model theory, and proof theory rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it appears to be from a formal conference proceedings.",Exclude,"The document presents a comprehensive collection of abstracts from a mathematical logic conference, demonstrating strong theoretical foundations across multiple domains including programming language semantics, term rewriting systems, and formal mathematical frameworks. While the content exhibits rigorous theoretical analysis and explores fundamental programming language constructs, its broad scope and conference proceedings format suggest a nuanced alignment with specific programming language theory screening criteria. The abstracts reveal sophisticated mathematical and computational reasoning across various theoretical domains, with particular emphasis on formal systems and proof-theoretic approaches.",4.3
Mini-Foc A Kernel Calculus for Certified Computer Algebra [Ongoing work],"Stephane Fetcher, L. Liquori",-,-,-,0,2005,yes,"The study analyzes fundamental programming language constructs at a theoretical level, including inheritance, binding, overriding, and type systems.",yes,"The paper presents strong evidence of formal mathematical framework usage, including formal proofs, pre/post conditions, and formal specification of syntax, semantics, and type systems.",yes,"The paper explicitly examines programming paradigm foundations, particularly object-oriented programming, and provides comparative theoretical analysis with ""classic object-oriented languages.""",yes,"The paper clearly investigates fundamental design principles in programming languages, particularly focusing on reliability, correctness, and formal specification of language features.",yes,"The paper presents a clear theoretical foundation, including formal proofs, mathematical theorems, and formal specification of language components.",yes,"While implementation aspects are discussed, they clearly serve to support broader theoretical contributions, particularly in the Mini-Foc kernel analysis.",yes,"The paper's primary focus is theoretical, contributing to understanding of formal language design, correctness proofs, and programming paradigms.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical investigation of programming language design, focusing on formal frameworks, correctness proofs, and fundamental language constructs. It demonstrates strong alignment with theoretical programming language research criteria, particularly in examining paradigm foundations, mathematical frameworks, and formal specification of language properties. The study's comprehensive approach to language design principles and theoretical contributions suggests significant scholarly value.",4.9
A Causal Model anda Declarative ProgrammingLanguagefor Concurrent,"SystemsKarsten, Bohlmann",-,-,-,0,1996,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including concurrent structures, interaction diagrams, causal ordering, and value-passing interactions.",yes,"The paper presents a strong formal framework, including a mathematical model based on reflexive domains, denotational semantics, operational semantics, and pomset representations.",yes,"The paper explicitly examines programming paradigms, including functional programming, object-oriented paradigm generalization, and process algebra comparison.",yes,"The paper strongly addresses language design principles, particularly through its focus on declarative programming, functional programming, and the generalization of object-oriented paradigms. The mathematical model and denotational semantics suggest attention to fundamental design principles.",yes,"The paper has a robust theoretical foundation, including mathematical values representing systems, formal semantics, causal ordering theory, and process algebra comparison.",yes,"While implementation is mentioned (""basis for language implementation""), it serves to support the theoretical framework rather than being the primary focus.",yes,"The paper's primary focus is theoretical, presenting new mathematical models and semantic frameworks rather than practical implementations. The theoretical contribution is clear and substantial.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of programming language foundations, presenting a comprehensive mathematical framework for concurrent systems with strong emphasis on declarative, functional, and object-oriented paradigms. The study offers a sophisticated analysis of language design principles, semantic models, and computational interactions through a formal, mathematically-grounded approach. Its theoretical contributions span multiple dimensions of programming language research, including paradigm theory, fundamental construct analysis, and formal verification techniques.",4.9
Communicating Parallel Processes,S. Brookes,-,-,-,1,2000,yes,"The paper analyzes fundamental programming language constructs (input/output, parallel composition) at a theoretical level.",yes,"The paper discusses semantic foundations, mathematical models, and presents a formal semantic framework for analyzing programming language properties.",yes,"The paper examines programming paradigms (synchronous vs. asynchronous communication) and provides comparative theoretical analysis, including unification of paradigms.",yes,"The paper explicitly discusses fundamental design principles of CSP, including input/output as primitives and parallel composition. It also proposes an ""idealized"" version with different design principles.",yes,"The paper focuses on semantic foundations, mathematical models, and theoretical analysis of programming language properties.",yes,"While implementation aspects are discussed, they serve to support broader theoretical contributions about language design and semantics.",yes,"The paper's primary focus is theoretical, proposing new semantic frameworks and analyzing fundamental properties rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given its significance as a theoretical paper about CSP.",Include,"This theoretical paper comprehensively explores programming language design principles, semantic foundations, and paradigm theory through a rigorous examination of Communicating Sequential Processes. It presents a formal mathematical framework analyzing fundamental computational constructs, offering a sophisticated theoretical contribution that unifies programming paradigms and provides deep insights into language design. The research demonstrates strong alignment with theoretical research criteria, focusing on semantic analysis, mathematical modeling, and fundamental computational principles.",4.9
Proceedings of the 9th ACM SIGPLAN international conference on Principles and practice of declarative programming,"Michael Leuschel, A. Podelski",-,-,-,0,2007,yes,"The focus on ""specifying, performing, and analyzing computations"" at a fundamental level suggests the analysis of basic programming constructs or computational primitives at a theoretical level.",yes,"The abstract explicitly mentions ""logical formalisms and methods"" and includes papers from logic and formal programming communities, indicating the use of a formal mathematical framework or rigorous verification approach.",yes,"The abstract explicitly discusses multiple programming paradigms (logic, constraint, functional, visual, etc.) and their theoretical foundations, indicating the examination of programming paradigm foundations or comparative theoretical analysis of paradigms.",yes,"The abstract indicates the symposium covers declarative programming paradigms and formal methods for specifying computations, suggesting coverage of language design principles.",yes,"The focus on ""logical formalisms"" and ""specifying, performing, and analyzing computations"" suggests the inclusion of a formal theoretical foundation or mathematical framework to support the claims.",yes,"The abstract emphasizes theoretical aspects and formal methods over implementation details, indicating that the discussion of implementation or tools serves to support broader theoretical contributions.",yes,"The symposium's focus on ""principles"" and formal methods suggests theoretical contributions rather than purely practical work.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper is a conference proceedings volume, likely accessible through ACM Digital Library or university libraries, but the full text accessibility cannot be determined with certainty without checking.",Exclude,"The conference proceedings volume demonstrates strong alignment with theoretical programming language research, covering multiple paradigms and emphasizing formal methods, logical formalisms, and computational principles. While the abstract suggests comprehensive theoretical contributions across programming language design and analysis, the nature of a proceedings volume means individual paper content cannot be definitively assessed without further review.",4.3
Proceedings of the 4th ACM SIGPLAN international conference on Principles and practice of declarative programming,"F. Pfenning, C. Kirchner",-,-,-,0,2002,yes,"The abstract indicates analysis of fundamental programming language constructs through mentions of ""programming paradigms"" and ""program analysis,"" meeting this criterion.",maybe,"The abstract mentions ""logical methods"" and ""type theory,"" suggesting the use of formal frameworks, but does not provide explicit details.",yes,"The abstract explicitly mentions ""understanding, integrating and extending programming paradigms"" including logic, functional, constraint, probabilistic, rule and object-oriented programming, strongly meeting this criterion.",maybe,"The abstract does not specifically discuss orthogonality or minimality, so it is unclear if this criterion is met.",yes,"The abstract indicates theoretical content through mentions of ""logical methods,"" ""type theory,"" and ""program analysis and verification,"" suggesting a theoretical foundation.",yes,"The abstract explicitly states that ""practice has an important place"" but also emphasizes theoretical aspects, suggesting a balanced approach and meeting this criterion.",maybe,"The abstract suggests both theoretical and practical focus, but emphasizes theoretical aspects through mentions of logical methods and program analysis, partially meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",yes,"The paper is likely accessible through ACM libraries or archives, meeting this criterion.",Exclude,"The conference proceedings introduction demonstrates strong alignment with theoretical programming language research, covering multiple paradigms and emphasizing logical methods, type theory, and program analysis. While the abstract suggests comprehensive theoretical foundations across programming language design, its nature as a conference overview limits definitive assessment of specific theoretical contributions. The document appears to meet most screening criteria, particularly those related to paradigm theory and fundamental analysis.",3.5
–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞—Ä–∞–¥–∏–≥–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è,–ò—Ä–∏–Ω–∞ –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞ –ö—É–¥—Ä—è–≤—Ü–µ–≤–∞,-,-,-,0,2015,yes,"The paper analyzes programming paradigms at a theoretical level using mathematical foundations, providing good evidence for the analysis of fundamental programming language constructs or computational primitives.",yes,"The abstract explicitly mentions mathematical foundations including ""algebra, mathematical logic, theory of algorithms, theory of formal languages and grammars, automata theory,"" providing strong evidence for the use of a formal mathematical framework.",yes,"The paper's primary focus is on ""classification of programming paradigms"" and comparative analysis, with specific mention of the functional programming paradigm, providing very strong evidence for the examination of programming paradigm foundations.",maybe,"The abstract mentions classification of programming paradigms, which suggests some coverage of fundamental design principles, though it does not explicitly discuss orthogonality or minimality.",yes,"The abstract clearly indicates the inclusion of a formal theoretical foundation, with explicit mention of mathematical bases and theoretical programming context.",yes,"The abstract explicitly states that the paper excludes implementation technologies, focusing on theoretical aspects.",yes,"The paper focuses on theoretical classification and mathematical foundations rather than practical aspects, explicitly stating it ""not including technologies of programming,"" indicating a strong theoretical contribution.",maybe,"The abstract is in English, though the original paper's language is not explicitly stated, creating some uncertainty about whether the paper is written in English or French.",no,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"A theoretical study exploring programming paradigms through rigorous mathematical foundations, focusing on fundamental principles of computational theory across multiple mathematical disciplines. The research provides a comprehensive classification of programming paradigms, emphasizing theoretical understanding and mathematical frameworks while explicitly excluding technological implementation details. Strong alignment with theoretical research criteria demonstrates a sophisticated approach to analyzing programming language constructs at a conceptual level.",4.6
Multi-paradigm Logic Programming Integrating Paradigms via Interaction Nets (extended Abstract),"M. Fern√°ndez, I. Mackie",-,-,-,0,2007,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly through the lens of interaction nets and their relationship to different programming paradigms.",yes,"The paper uses interaction nets, which are described as a ""rewrite system based on rewriting of networks"" with ""linear logic foundation."" This indicates the use of a formal mathematical framework.",yes,"The paper directly examines programming paradigm foundations, specifically focusing on the integration of different paradigms (Œª-calculus and term rewriting systems) and aims to extend this to other paradigms.",maybe,"The paper discusses the integration of programming paradigms and provides a unifying framework, which relates to fundamental design principles. However, it does not explicitly address orthogonality or minimality.",yes,The paper explicitly uses linear logic as its theoretical foundation and presents a formal framework for analyzing programming language properties.,maybe,"The paper discusses implementation, but this appears to serve theoretical purposes rather than being the primary focus. The implementation discussion supports the theoretical framework.",yes,The paper appears to focus on theoretical contributions rather than practical aspects. It presents a theoretical framework for understanding paradigm integration.,yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical framework for integrating programming paradigms using interaction nets, with a strong foundation in linear logic and a focus on fundamental computational constructs. The study offers a mathematical approach to understanding programming language properties, examining paradigm integration through a formal, theoretical lens that extends beyond practical implementation considerations.",4.7
Computational Synthesis: Following the Treaded Mathematical Track,Zippora Arzi-Gonczarowski,-,-,-,1,2003,yes,"The paper analyzes fundamental constructs at a theoretical level, particularly in its discussion of mathematical modeling and category theory.",yes,"The paper explicitly discusses mathematical frameworks, category theory, and formal modeling approaches, emphasizing the importance of rigorous mathematical synthesis and formalization.",maybe,"While the paper discusses theoretical foundations of intelligent systems and mentions programming language semantics, it is not primarily focused on programming paradigms.",maybe,"The paper discusses mathematical modeling of intelligent systems and mentions programming language semantics, but does not specifically focus on orthogonality or minimality in programming languages.",yes,"The paper is heavily focused on theoretical foundations, discussing mathematical modeling, category theory, and formal approaches to system design.",yes,"The paper uses implementation discussions to support theoretical contributions, particularly in discussing how mathematical models can be used to understand intelligent systems.",yes,"The paper is fundamentally theoretical, focusing on mathematical modeling and formal approaches rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text accessibility cannot be determined from the abstract alone, but the AAAI copyright notice suggests it may be accessible through academic channels.",Exclude,"A rigorous mathematical approach to intelligent system modeling demonstrates strong theoretical foundations, utilizing category theory and formal frameworks to analyze computational constructs. The study provides a comprehensive exploration of mathematical modeling principles, with significant theoretical contributions that transcend traditional programming language design while maintaining a sophisticated analytical approach. While not exclusively focused on programming languages, the research offers profound insights into fundamental computational theory and mathematical synthesis.",4.3
Data abstraction in programming language semantics,Ramesh Subrahmanyam,-,-,-,1,1992,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including abstract data types, lambda terms, and semantic models, strongly meeting the fundamental analysis criterion.",yes,"The paper uses denotational semantics, algebraic equations, and formal mathematical frameworks to analyze programming language properties, strongly meeting the formal framework criterion.",yes,"The paper examines programming paradigms through the lens of PCF (a functional programming paradigm) and discusses different evaluation strategies (call-by-name vs. call-by-value), meeting the paradigm theory criterion.",maybe,"The paper discusses abstract data types and their specification in programming languages, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",yes,"The paper is heavily theoretical, using mathematical frameworks including denotational semantics, algebraic specifications, and categorical descriptions, clearly meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed, they are clearly in service of theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper focuses entirely on theoretical contributions, including formal semantics, algebraic specifications, and mathematical frameworks, strongly meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper may be accessible through academic channels, as it is a thesis, but this cannot be determined from the abstract alone.",Include,"This theoretical computer science paper provides a rigorous mathematical exploration of programming language semantics, focusing on abstract data types and their formal specification through denotational semantics and algebraic frameworks. The research deeply examines fundamental programming language constructs, paradigm foundations, and theoretical contributions across different evaluation strategies, demonstrating a comprehensive approach to understanding computational semantics. Its strong theoretical orientation and mathematical precision make it a significant contribution to programming language theory.",4.9
A framework for studying the semantics of object-oriented programs,"Zhuangjian Wei, Arthur T. Poe",-,-,-,1,2001,yes,"The paper analyzes fundamental programming language constructs (object references, reference aliasing, dynamic bindings) at a theoretical level.",yes,"The paper presents FOOS, a formal framework for specifying, deriving, and verifying object-oriented program semantics. It explicitly uses mathematical logic theories and predicate transformation.",yes,"The paper examines object-oriented programming paradigm foundations, providing a theoretical analysis of how to formalize and verify object-oriented programming concepts.",yes,"The paper discusses fundamental design principles through its formal framework for object-oriented semantics, particularly focusing on how to specify and verify programming language properties.",yes,"The paper builds on many-sorted logic and predicate transformation, creating a Theory of Object Types (TOT) as its theoretical foundation.",yes,"While the paper includes a miniature language (TOOL), this implementation serves to demonstrate and support the theoretical framework rather than being the primary focus.",yes,"The paper's primary focus is theoretical, presenting a formal framework for understanding object-oriented programming semantics rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical framework for object-oriented programming semantics is presented, utilizing formal mathematical approaches like many-sorted logic and predicate transformation to analyze fundamental programming language constructs. The research provides a comprehensive theoretical foundation for understanding object-oriented programming paradigms, with a strong emphasis on formal verification and semantic specification. The study demonstrates a deep theoretical contribution to programming language design principles through its systematic approach to modeling and reasoning about object-oriented programming properties.",4.9
Dagstuhl Seminar Expressiveness in Concurrency,"R. Nicola, U. Goltz, F. Vaandrager",-,-,-,0,2008,yes,"The abstract indicates analysis of fundamental programming language constructs, including communication primitives, nondeterministic choice, and various semantic models, strongly meeting this criterion.",yes,"The abstract explicitly mentions formal methods, process algebras, Petri nets, modal logics, and various semantic models, clearly meeting this criterion.",yes,"The abstract explicitly mentions comparing specification and verification methods across different programming paradigms, meeting this criterion.",yes,"The abstract discusses formal methods for programming language design and implementation, including comparative analysis of programming concepts, which strongly meets this criterion.",yes,"The paper focuses heavily on formal theoretical foundations, including formal comparison of programming concepts and formal methods for specification and verification, strongly meeting this criterion.",yes,"While implementation is mentioned, it's discussed in the context of formal design principles and theoretical foundations, meeting this criterion.",yes,"The focus is clearly theoretical, dealing with formal methods, comparative analysis, and fundamental programming concepts rather than practical applications, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract suggests the paper may be accessible through academic channels, but this cannot be confirmed from the abstract alone.",Include,"A comprehensive theoretical exploration of programming language design principles, focusing on formal methods, comparative analysis across paradigms, and fundamental computational constructs. The study systematically examines semantic models, communication primitives, and verification techniques, demonstrating a rigorous approach to understanding programming language foundations. With strong alignment across multiple theoretical dimensions, the research provides a sophisticated framework for analyzing programming language concepts.",4.7
Wherefore thou art ‚Ä¶ Semantics of Computation?,F. Honsell,-,-,-,0,2015,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including basic computational models, semantics of programming languages, and fundamental properties of programming.",yes,"The paper heavily emphasizes formal mathematical frameworks, including denotational semantics, Œª-calculus, categorical semantics, domain theory, and formal equivalence relations.",yes,"The paper examines programming paradigm foundations through discussion of computational models, analysis of denotational semantics, and a historical perspective on programming language theory.",yes,"The paper discusses fundamental design principles through the lens of formal semantics and computational models, particularly focusing on denotational semantics and compositional semantics.",yes,"The paper is deeply rooted in theoretical foundations, discussing universal computational models, formal semantics, mathematical structures (domains, topological spaces), and categorical approaches.",yes,"The paper appears to be purely theoretical, with no significant implementation focus.",yes,"The paper focuses entirely on theoretical aspects, discussing formal semantics, mathematical foundations, and theoretical understanding of programming languages, with no practical implementation focus.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The presence of citations and academic style suggests the full text is likely accessible, though this cannot be determined from the abstract alone.",Include,"This scholarly work provides a rigorous theoretical exploration of programming language semantics, deeply rooted in formal mathematical frameworks and computational models. The research systematically examines fundamental design principles, paradigm foundations, and theoretical contributions through advanced mathematical constructs like Œª-calculus and categorical semantics. Its comprehensive approach to understanding programming language properties demonstrates a sophisticated theoretical analysis that transcends practical implementation concerns.",4.9
"A framework for the development of simulation systems (computation theory, compiling expert)",D. E. Stevenson,-,-,-,0,1983,yes,"The paper analyzes fundamental computational primitives, basic program structure (state-transition form), and theoretical properties of recursive functions, indicating a strong focus on fundamental analysis.",yes,"The paper explicitly uses formal mathematical frameworks such as computability theory, denotational semantics, and rigorous proofs (e.g., ""nonconstructive proof that recursive functions have a set of basis functions"").",yes,"The paper examines computational paradigms, discusses a ""different machine paradigm,"" and provides theoretical analysis of computational structures.",yes,"The paper strongly addresses language design principles through its development of formal frameworks for interpreter design and computational structures. The focus on fundamental design principles is evident in the discussion of the ""computational structure paradigm.""",yes,"The paper presents a strong theoretical foundation, including the typed Herbrand universe, formal mathematical framework for evaluation functions, and the computational system property as a theoretical concept.",yes,"The paper appropriately balances implementation discussion with theoretical contributions, as the interpreter implementation serves to demonstrate and support the theoretical framework rather than being the primary focus.",yes,"The paper focuses on theoretical foundations of computation, formal mathematical concepts, and new theoretical results (state-transition form, regular expression proofs), indicating a strong theoretical contribution.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical framework for computational systems, utilizing advanced mathematical concepts like denotational semantics and computability theory to explore fundamental programming language design principles. The study offers profound insights into computational paradigms, developing novel theoretical constructs such as the typed Herbrand universe and computational structure, while providing formal proofs and mathematical modeling of computational primitives. Its comprehensive approach bridges theoretical foundations with practical implementation, demonstrating a sophisticated examination of programming language theory.",4.9
Types for Multi-Paradigm Modelling,"J. Lara, H. Vangheluwe",-,-,-,0,-,yes,"The paper shows strong evidence of fundamental analysis through the analysis of type systems, formalism relationships, meta-modeling foundations, and computational primitives (type manipulation).",yes,"The paper presents strong evidence of formal frameworks through the use of meta-modeling, Formalism Transformation Graph (FTG), graph grammars for type manipulation, and formal theoretical foundations for type systems.",yes,"The paper has a strong focus on multi-paradigm modeling and formalism relationships, including meta-modelling, multi-formalism modeling, multiple abstraction levels, and formalism transformation.",maybe,"The paper discusses type systems and their limitations in multi-paradigm modeling, which relates to fundamental design principles, but it does not explicitly focus on orthogonality or minimality.",yes,"The paper has a clear theoretical foundation through its meta-modeling approach, formalism-based type system, graph grammar theory, and formal transformation mechanisms.",yes,"The implementation (AToM3) serves to demonstrate and support the theoretical contributions rather than being the primary focus, as the tool implementation is used to validate the theoretical framework.",yes,"The paper makes theoretical contributions through novel type system extensions, formalism transformation theory, and a meta-modeling approach, though it also includes implementation aspects (AToM3 tool).",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a robust theoretical framework for multi-paradigm modeling, demonstrating strong foundations in formal language design, meta-modeling, and computational type systems. By exploring type limitations and proposing novel approaches to formalism transformation, the study offers significant theoretical contributions to programming language research. The work integrates theoretical analysis with implementation validation, providing a comprehensive examination of computational modeling principles.",4.6
COMBINATORY LOGIC AS THE FIRST-ORDER MATHEMATICAL THEORY,"Ê±üÊòéÂæ∑, ÊñáËïô",-,-,-,0,1989,yes,"The mention of ""combinatory logic and predicate calculus"" as fundamental components suggests analysis of fundamental programming language constructs at a theoretical level.",yes,"The abstract explicitly mentions ""algebraic perspective"" and ""first-order mathematical theory,"" strongly indicating a formal mathematical framework.",yes,"The abstract explicitly mentions ""functional and logic paradigms"" and their theoretical foundations.",yes,"The abstract mentions ""unified basis"" and mathematical foundations for programming languages, suggesting investigation of fundamental design principles.",yes,"The focus on ""strict and thorough mathematical foundation"" and ""first-order mathematical theory"" clearly indicates a formal theoretical foundation.",yes,The abstract suggests a purely theoretical focus with no mention of implementation.,yes,The focus on mathematical foundations and theoretical unification suggests this is primarily theoretical rather than practical.,yes,"The abstract is written in English, meeting the publication language criterion.",maybe,The abstract does not provide enough information to determine the full-text accessibility of the paper.,Include,"A rigorous mathematical exploration of programming language foundations, focusing on unifying combinatory logic and predicate calculus through an algebraic perspective. The study demonstrates strong theoretical contributions by examining fundamental design principles across functional and logic programming paradigms. Its primary emphasis on mathematical theory and paradigm foundations suggests a comprehensive theoretical approach to understanding programming language constructs.",4.6
Definitive programming for parallelism,M. Beynon,-,-,-,1,1989,yes,"The paper analyzes fundamental programming language constructs, particularly in the context of concurrent programming and parallel computing.",maybe,"The abstract mentions an ""abstract machine model"" and discusses theoretical foundations, suggesting some formal framework, though the depth is not entirely clear.",yes,"The paper explicitly examines programming paradigms, comparing ""definitive programming"" with existing paradigms for parallel computing.",maybe,"The paper discusses ""definitive programming"" as a novel approach and compares it with existing paradigms, suggesting investigation of fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,"The paper appears to have a theoretical foundation, discussing ""definitive principles"" and their application to concurrent systems, and it builds on previous theoretical work.",yes,"The paper mentions implementation aspects (interactive systems, simulation) but uses these to support theoretical contributions rather than focusing solely on practical aspects.",yes,"The paper appears to focus on theoretical contributions rather than practical aspects, discussing fundamental principles and paradigm comparison.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A theoretical exploration of programming language paradigms focusing on definitive programming for parallel computing, with strong emphasis on fundamental principles and comparative analysis. The research demonstrates rigorous theoretical foundations, examining programming language constructs through a novel paradigmatic lens while maintaining a theoretical approach to computational design. Multiple screening criteria are met, particularly in paradigm theory, theoretical contribution, and fundamental analysis of programming language principles.",4.6
Reening Multiset Transformers,"C. Hankin, Daniel Le M etayery, David Sandsz",-,-,-,0,2008,yes,"The paper provides a clear analysis of fundamental programming language constructs, particularly regarding parallel and sequential composition operators at a theoretical level.",yes,"The paper develops ""programming laws"" and a ""calculus,"" indicating the use of a rigorous mathematical framework for analyzing programming language properties.",yes,"The paper explicitly examines programming paradigms, discussing parallel and sequential composition operators and their relationship. The chemical reaction metaphor represents a fundamental paradigm approach.",yes,"The paper discusses Gamma as a ""minimal language,"" directly addressing the minimality design principle. It also presents a formal framework for program refinement, suggesting attention to fundamental design principles.",yes,"The paper has a clear theoretical foundation, with the development of programming laws and a calculus for program refinement. The chemical reaction metaphor suggests a formal theoretical model.",yes,The paper's discussion of implementation aspects (pipelining transformation) appears to serve theoretical contributions rather than being the primary focus.,yes,"The paper has a strong theoretical focus, with emphasis on programming laws, refinement theory, and transformation rules. The work appears primarily theoretical rather than practical.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of programming language design principles, focusing on Gamma's minimal language framework and formal mathematical analysis of parallel and sequential composition operators. The study presents a comprehensive theoretical contribution through programming laws, refinement calculus, and paradigmatic examination of computational constructs. Strong evidence of fundamental theoretical analysis with mathematical frameworks supporting programming language research.",4.9
1 Kernel Andorra Prolog ( KAP ) : the language,-,-,-,-,0,2005,yes,"The paper has a strong focus on fundamental analysis, examining basic computational primitives, analyzing fundamental language constructs, and studying the core properties of programming paradigms.",yes,"The paper presents a formal mathematical framework, including ""formal machinery"" for computation model control, formal transformational semantics, and a formal description of or-trees for capturing computations.",yes,"The paper has a strong focus on paradigm theory, explicitly discussing the combination of Prolog and committed choice paradigms, analyzing the theoretical foundations of different programming approaches, and examining the fundamental properties of programming paradigms.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on the Kernel Andorra Prolog framework and its relationship to various programming paradigms.",yes,"The paper has a clear theoretical foundation, presenting formal semantics, discussing the theoretical framework for combining programming paradigms, and including mathematical formalization of computation control.",yes,"The implementation aspects discussed in the paper, such as deep guards, are presented in service of the theoretical contributions rather than as the primary focus.",yes,"The paper's primary focus is theoretical, presenting a formal framework for understanding programming languages, contributing to the theoretical understanding of paradigm integration, and focusing on fundamental properties rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but the academic nature of the paper suggests it is likely available through proper channels.",Include,"The research presents a rigorous theoretical framework for programming language design, focusing on the Kernel Andorra Prolog paradigm with strong emphasis on formal mathematical foundations and paradigm integration. It systematically explores fundamental computational principles, offering a comprehensive theoretical analysis of programming language constructs and their underlying mathematical structures. The study demonstrates deep engagement with theoretical contributions, paradigm theory, and formal semantic approaches to understanding programming language design.",4.9
A generic framework facilitating automated quality assurance across programming languages of disparate paradigms,Darryl Owens,-,-,-,1,2016,maybe,"While the paper analyzes programming paradigms, it does so in the context of quality assurance rather than fundamental theoretical analysis of language constructs.",no,"While the paper presents a framework, it appears to be more practical/structural rather than formal/mathematical. The abstract mentions ""experimental method"" and ""implementation requirements"" rather than formal verification.",yes,"The paper explicitly examines multiple programming paradigms (procedural, object-oriented, functional, logical) and their relationships to quality assurance.",maybe,"The paper discusses programming paradigms and their relationship to quality assurance, but does not explicitly focus on orthogonality or minimality. It is more focused on quality assurance frameworks.",maybe,"The paper includes some theoretical elements (taxonomy, framework) but seems to focus more on practical application and implementation. The theoretical foundation appears secondary to the practical framework development.",no,"The paper does discuss implementation, but it appears to be the primary focus rather than serving to support broader theoretical contributions.",maybe,"The paper makes some theoretical contributions (taxonomy, framework) but appears to focus significantly on practical implementation and quality assurance applications rather than pure theoretical understanding.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores programming paradigms and quality assurance frameworks, demonstrating partial alignment with theoretical screening criteria through its examination of procedural, object-oriented, and functional paradigms. While the study presents a novel taxonomy and framework, its primary focus on practical implementation and quality assurance techniques limits its depth of theoretical contribution. The work provides insights into paradigm relationships but falls short of a purely theoretical analysis of programming language constructs.",3.2
Type Models: Toward U nifying Concepts for Language Interoperability*,Arturo J. S√°nchez Ru√≠z,-,-,-,1,-,yes,"The paper analyzes fundamental programming language constructs (type systems) at a theoretical level, meeting this criterion.",maybe,"The abstract mentions ""type models"" as a framework for analyzing type systems, suggesting a formal approach, though the level of formality is not explicitly stated.",yes,"The abstract explicitly mentions ""multi-paradigm programming"" and discusses different paradigms, meeting this criterion.",maybe,"The paper discusses type systems and interoperability, which relates to fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,"The paper appears to present a theoretical framework (type models) for analyzing type systems across different languages, indicating a theoretical foundation.",yes,"The abstract suggests the work is primarily theoretical, with implementation aspects serving to support the theoretical framework.",yes,"The paper focuses on theoretical aspects of type systems and interoperability rather than practical implementation, meeting this criterion.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research presents a theoretical framework for analyzing type systems across programming paradigms, focusing on language interoperability through type models. It demonstrates strong alignment with theoretical screening criteria by examining fundamental language constructs, paradigm foundations, and providing a conceptual approach to understanding type system differences. The study appears to offer a rigorous theoretical contribution to understanding programming language design principles.",4.3
Embedding an object calculus in the unifying theories of programming,M. Smith,-,-,-,0,2010,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on object-based programming and reference models.",yes,"The paper centers on Unifying Theories of Programming (UTP), which is explicitly described as a formal mathematical framework for analyzing programming language properties. It deals with relational predicates and formal models.",yes,"The paper explicitly focuses on comparing and contrasting different programming paradigms within a unified theoretical framework, including imperative, higher-order, concurrent, and object-oriented programming.",yes,The paper directly addresses fundamental design principles by examining how different programming paradigms can be unified within a single theoretical framework (UTP). It specifically deals with object-based object orientation and reference models.,yes,"The entire work is built on formal theoretical foundations, specifically the UTP framework and Abadi-Cardelli's object calculi (sigma-calculi).",yes,"The paper appears to focus on theoretical contributions rather than implementation details. While it discusses models and embeddings, these serve theoretical purposes rather than practical implementation.",yes,The paper makes clear theoretical contributions rather than practical ones. It focuses on extending the UTP framework and providing formal models for object-based programming.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it is a dissertation.",Include,"This dissertation presents a rigorous theoretical exploration of programming language paradigms through the Unifying Theories of Programming (UTP) framework, offering a comprehensive formal analysis of object-based object orientation and reference models. By extending existing theoretical foundations and providing a unified approach to modeling different programming paradigms, the work makes significant contributions to understanding fundamental computational constructs at a deep theoretical level. The research demonstrates a strong commitment to mathematical rigor and theoretical depth, examining programming language principles through a sophisticated formal framework.",4.9
Logical Foundations for DeclarativeObject-oriented Programming ?,"C. Kreitz, K. Lau, Mario Ornaghi",-,-,-,0,2007,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically examining classes, methods, and inheritance in a formal framework.",yes,The paper presents a formal mathematical framework using first-order theories and logic programs to analyze programming language properties. It explicitly discusses formal reasoning and correctness proofs.,yes,"The paper explicitly examines programming paradigm foundations, comparing declarative and imperative approaches, and provides theoretical analysis of object-oriented programming paradigms.",yes,"The paper directly addresses fundamental design principles in programming languages, specifically focusing on declarative object-oriented programming and formal reasoning about programs. It discusses orthogonality in terms of combining different programming paradigms.",yes,"The paper is built on formal theoretical foundations, using first-order theories, logic programs, and formal semantics to support its claims about program correctness and reuse.",yes,"The paper's focus is primarily theoretical, with implementation aspects serving to support the theoretical contributions rather than being the main focus.",yes,The paper makes clear theoretical contributions rather than focusing on practical aspects. It develops formal foundations for declarative object-oriented programming and provides theoretical frameworks for program correctness.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given its formal academic nature, though this cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical framework for declarative object-oriented programming, utilizing first-order theories and logic programs to formally analyze programming language properties and correctness. The study provides a comprehensive examination of programming paradigms, focusing on fundamental design principles, theoretical foundations, and formal reasoning about program development. Its strong emphasis on mathematical frameworks and theoretical contributions demonstrates a deep exploration of computational language constructs at a fundamental level.",4.9
Structural Recursion as a Query Language,V. Tannen,-,-,-,0,2015,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on structural recursion and its relationship to relational algebra.",yes,"The paper uses a ""nicely"" typed lambda calculus and discusses formal properties like total maps and relational algebra, indicating a strong formal mathematical framework.",yes,"The paper directly examines programming paradigms, proposing a new paradigm that bridges relational algebra and unrestricted programming languages.",yes,"The paper discusses fundamental design principles in programming languages, specifically proposing a new programming paradigm that balances semantic simplicity with expressive power.",yes,"The study has a clear theoretical foundation, combining lambda calculus with structural recursion and relational algebra concepts.",yes,"While implementation aspects are discussed (optimization, structural recursion), these serve to support the theoretical contributions rather than being the primary focus.",yes,"The paper's primary focus is theoretical, contributing to understanding of programming paradigms and their expressive power, rather than practical applications.",yes,The paper is clearly written in English.,yes,"The abstract explicitly states the paper is available at ScholarlyCommons (http://repository.upenn.edu/cis_reports/403), indicating the full text is accessible.",Include,"A comprehensive theoretical exploration of programming language design principles, presenting a novel paradigm that bridges relational algebra and unrestricted programming languages through structural recursion and lambda calculus. The study offers a rigorous mathematical framework with strong theoretical foundations, examining fundamental computational constructs while maintaining a focus on paradigmatic analysis and expressive power. The research demonstrates significant potential for advancing understanding of programming language design through a sophisticated, mathematically grounded approach.",4.9
Logical Foundations for Declarative Object-oriented Programming Logical Foundations for Declarative Object-oriented Programming ?,"C. Kreitz, K. Lau, Mario Ornaghi",-,-,-,0,1995,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically examining classes, methods, and inheritance in a formal framework.",yes,The paper presents a formal mathematical framework using first-order theories and logic programs to analyze programming language properties. It explicitly discusses formal reasoning and correctness proofs.,yes,"The paper explicitly examines programming paradigm foundations, comparing declarative and imperative approaches, and provides theoretical analysis of object-oriented programming paradigms.",yes,"The paper directly addresses fundamental design principles in programming languages, specifically focusing on declarative object-oriented programming and formal reasoning about programs. It discusses orthogonality in terms of combining different programming paradigms.",yes,"The paper is built on formal theoretical foundations, using first-order theories, logic programs, and formal semantics to support its claims about program correctness and reuse.",yes,"The paper's focus is primarily theoretical, with implementation aspects serving to support the theoretical contributions rather than being the main focus.",yes,The paper makes clear theoretical contributions rather than focusing on practical aspects. It develops formal foundations for declarative object-oriented programming and provides theoretical frameworks for program correctness.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given its technical nature and academic style, though this cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical framework for declarative object-oriented programming, utilizing first-order theories and logic programs to establish formal foundations for program correctness and reuse. The study provides a comprehensive theoretical analysis of programming paradigms, focusing on fundamental design principles and mathematical frameworks for understanding computational constructs. By examining classes, methods, and inheritance through a formal semantic lens, the research contributes significant theoretical insights into programming language design and verification.",4.9
Strikte Verfahren zyklischer Berechnung,Baltasar Tranc√≥n y Widemann,10.14279/DEPOSITONCE-1771,https://doi.org/10.14279/DEPOSITONCE-1771,-,1,2008,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on cyclical data, corecursion, and computational primitives.",yes,"The paper presents a formal mathematical framework using coalgebraic approaches, category theory, and formal semantics for analyzing programming language properties.",yes,"The research explicitly examines programming paradigm foundations, comparing declarative, functional, imperative, and object-oriented approaches, with particular focus on theoretical aspects.",yes,"The paper deeply investigates fundamental design principles in programming languages, particularly focusing on declarative and functional construction of cyclical data and their theoretical foundations.",yes,"The paper provides a comprehensive theoretical foundation using coalgebraic semantics, category theory, and formal mathematical frameworks to support its claims.",yes,"While the paper includes implementation aspects (virtual machine, interpreter, compiler), these serve to support and demonstrate the theoretical contributions rather than being the primary focus.",yes,"The paper's primary focus is theoretical, contributing to fundamental understanding of cyclical computations, coalgebraic semantics, and programming language theory.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The detailed nature of the abstract suggests this is likely a formal academic paper that would be accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"This comprehensive research presents a rigorous theoretical exploration of programming language design principles, focusing on coalgebraic semantics and cyclical data processing through a formal mathematical framework. The study provides deep insights into programming paradigms, offering a sophisticated analysis of computational primitives and theoretical foundations across declarative, functional, and imperative programming approaches. By developing a novel coalgebraic approach and supporting it with both theoretical and implementation-level contributions, the research significantly advances understanding of fundamental programming language constructs.",4.9
Structural Recursion As A Query Language,V. Tannen,-,-,-,0,2014,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on structural recursion and its relationship to relational algebra.",yes,"The paper uses a ""nicely"" typed lambda calculus and discusses formal properties like total maps and relational algebra, indicating a strong formal mathematical framework.",yes,"The paper directly examines programming paradigms, comparing and combining elements of relational algebra and unrestricted programming languages.",yes,"The paper discusses fundamental design principles, specifically proposing a new programming paradigm that balances semantic simplicity with expressive power. It explicitly addresses structural recursion and type systems.",yes,"The study has a clear theoretical foundation, combining lambda calculus, structural recursion, and relational algebra to establish its programming paradigm.",yes,"While implementation aspects are discussed (optimization, transitive closure), these serve to support the theoretical contributions rather than being the primary focus.",yes,"The paper's primary focus is theoretical, proposing a new programming paradigm and analyzing its expressive power and properties.",yes,The paper is clearly written in English.,yes,"The abstract explicitly states the paper is available at ScholarlyCommons (http://repository.upenn.edu/cis_reports/403), indicating the full text is accessible.",Include,"A comprehensive theoretical exploration of programming language design principles, combining lambda calculus, structural recursion, and relational algebra to propose a novel paradigm with rigorous mathematical foundations. The study provides a deep theoretical analysis of programming language constructs, examining fundamental properties and expressive power while maintaining a strong focus on formal frameworks and paradigm theory. Its theoretical contribution is supported by a clear, accessible research approach that balances semantic simplicity with computational expressiveness.",4.9
Foundations for Partial Evaluation of Functional Languages with Computational Eeects 1 Partial Evaluation of Programs with Computational Eeects,John Hatclii,-,-,-,0,-,yes,"The paper analyzes fundamental programming language constructs, specifically computational effects and their theoretical treatment in functional programming.",yes,"The paper explicitly discusses using Moggi's computational metalanguage as a formal framework and mentions categorical structures (monads), indicating a rigorous mathematical approach.",yes,"The paper directly examines programming paradigm foundations, specifically comparing pure functional languages with modern functional languages that include computational effects.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on how to handle computational effects in functional programming languages.",yes,The paper has a strong theoretical foundation through the use of computational monads and categorical structures as a mathematical framework.,yes,"While implementation aspects are discussed, they serve to support broader theoretical contributions about handling computational effects in functional programming.",yes,"The paper appears to focus on theoretical contributions, particularly in developing a formal framework for handling computational effects in partial evaluation.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but the academic nature and references suggest it is likely accessible through academic channels.",Include,"This research presents a rigorous theoretical exploration of programming language design, focusing on computational effects in functional programming through a formal mathematical framework. The study provides a comprehensive analysis of paradigm foundations, utilizing Moggi's computational metalanguage to examine fundamental programming language constructs with a strong emphasis on theoretical contributions. By investigating computational monads and their implications for partial evaluation, the work demonstrates a sophisticated approach to understanding programming language principles.",4.9
Embedding an object calculus in the unifying theories of programming,J. Gibbons,-,-,-,0,2010,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on object-based programming and reference models.",yes,"The paper centers on Hoare and He's Unifying Theories of Programming (UTP), which is explicitly described as a formal mathematical framework for analyzing programming language properties. It also deals with formal calculi (sigma-calculi).",yes,"The paper directly examines programming paradigm foundations, specifically comparing and contrasting different paradigms (imperative, higher-order, concurrent, object-oriented) within a unified theoretical framework.",yes,The paper directly addresses fundamental design principles by examining how different programming paradigms and features can be unified within a single theoretical framework (UTP). It specifically focuses on object-based object orientation principles.,yes,"The entire work is built on formal theoretical foundations, including UTP and Abadi-Cardelli's formalism. The abstract explicitly mentions ""fully abstract model"" and formal theoretical contributions.",yes,"The paper appears to focus on theoretical contributions rather than implementation details. While it discusses modeling, it does so in a theoretical context rather than a practical implementation focus.",yes,The paper makes clear theoretical contributions rather than practical ones. It focuses on extending UTP with object-based object orientation and providing formal models of references and objects.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it is a dissertation.",Include,"This dissertation presents a rigorous theoretical exploration of programming language foundations, utilizing Hoare and He's Unifying Theories of Programming to examine object-based object orientation through a formal mathematical framework. The work makes significant theoretical contributions by extending existing models, providing a comprehensive analysis of programming paradigms, and demonstrating a unified approach to understanding computational constructs. Its focus on fundamental design principles, formal frameworks, and paradigm theory positions it as a substantive scholarly contribution to programming language research.",4.9
Explorer Naturally Embedded Query Languages,"V. Tannen, P. Buneman, L. Wong",-,-,-,0,2014,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including structural recursion, query language properties, semantic foundations, and categorical constructions, meeting the fundamental analysis criterion.",yes,"The paper clearly employs formal mathematical frameworks, including category theory and equational theories, for analyzing language properties, meeting the formal framework criterion.",yes,"The paper examines programming paradigm foundations through the analysis of structural recursion as a computational engine, investigation of sublanguages with varying expressive power, and comparative analysis of different query languages, meeting the paradigm theory criterion.",yes,"The paper investigates fundamental design principles through its analysis of structural recursion and progression of sublanguages with increasing expressive power, meeting the language design principles criterion.",yes,"The paper has a strong theoretical foundation through the use of category theory, cartesian categories with strong monads, equational theories, and formal analysis of expressiveness, meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed (query languages), they serve to support broader theoretical contributions about language design and expressiveness, meeting the implementation focus criterion.",yes,"The paper's primary focus is theoretical, contributing to understanding language expressiveness, semantic foundations, categorical constructions, and algebraic perspectives, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",yes,"The full text of the paper is accessible through the ScholarlyCommons repository, meeting the full-text accessibility criterion.",Include,"This technical report presents a rigorous theoretical investigation of programming language design principles, utilizing advanced mathematical frameworks like category theory and equational theories to analyze structural recursion and language expressiveness. The study offers a comprehensive examination of programming paradigm foundations, focusing on fundamental theoretical contributions that explore semantic properties, computational primitives, and comparative language analysis. By providing a formal, mathematically-grounded approach to understanding programming language constructs, the research demonstrates significant theoretical depth and scholarly rigor.",4.9
Modeling Languages : A new Paradigm of Programming ‚àó,T. H√ºrlimann,-,-,-,0,1998,yes,The paper analyzes fundamental language constructs by examining the separation of declarative and algorithmic knowledge at a theoretical level.,maybe,"The abstract mentions ""mathematical-logical constraints"" and discusses semantic separation, suggesting some formal framework, though the depth isn't entirely clear from the abstract.",yes,"The paper examines the theoretical foundations of combining declarative and algorithmic paradigms, which directly addresses this criterion.",yes,"The paper clearly addresses language design principles, specifically focusing on the separation of declarative and algorithmic knowledge, which meets the criterion for investigating fundamental design principles.",maybe,"The paper appears to have a theoretical foundation in its approach to combining declarative and algorithmic knowledge, though the mathematical rigor isn't explicitly detailed in the abstract.",maybe,"The abstract mentions ""examples"" but suggests these are used to illustrate theoretical concepts rather than being the primary focus.",yes,"The paper appears to make a theoretical contribution by presenting a new approach to language design, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A novel programming language design approach is presented, focusing on the theoretical separation of declarative and algorithmic knowledge with potential implications for programming paradigm foundations. The study demonstrates strong alignment with theoretical language design principles, exploring fundamental constructs through a mathematical-logical framework that combines computational paradigms. While some uncertainties exist regarding the depth of formal treatment, the research appears to make a substantive theoretical contribution to programming language design.",4.6
Foundations of Choreographies Achievements during the project : summary of a collection of papers with significant results,"L. Cruz-Filipe, F. Montesi",-,-,-,0,2016,yes,"The paper provides clear evidence of fundamental analysis of programming language constructs, particularly in the development of CC and analysis of choreography primitives.",yes,"The paper presents Core Choreographies (CC) as a formal model and discusses formal properties like deadlock-freedom and expressivity analysis, indicating the use of a formal mathematical framework.",yes,"The paper directly examines programming paradigm foundations, specifically the choreographic programming paradigm, and provides theoretical analysis of its core primitives and expressiveness.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on choreographic programming and its core primitives. The development of ""Core Choreographies (CC)"" as a minimal, canonical model directly addresses language design principles.",yes,"The paper develops CC as a theoretical model with formal properties and analyzes its expressivity and projectability, providing a clear theoretical foundation.",yes,"The paper appropriately balances implementation aspects (EndPoint Projection) with theoretical contributions, using implementation to support theoretical analysis rather than as the primary focus.",yes,"The paper focuses on developing a canonical model and analyzing fundamental properties rather than practical applications, though it acknowledges practical implications, indicating a strong theoretical contribution.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The presence of multiple citations suggests this is likely a published academic paper, so the full text is likely accessible.",Include,"The research presents a rigorous theoretical exploration of choreographic programming, developing a canonical model (Core Choreographies) that systematically analyzes fundamental programming language constructs through a formal mathematical framework. By investigating paradigm foundations, language design principles, and computational primitives, the study offers a comprehensive theoretical contribution to understanding concurrent and distributed programming systems. The work demonstrates strong alignment with theoretical research criteria, focusing on fundamental analysis and paradigm theory rather than purely practical applications.",4.9
Verifiable and Executable Logic Specifications of Concurrent Objects in s,"Luls Caires, Luis Monteiro",-,-,-,1,2006,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on the integration of different programming paradigms and their formal properties.",yes,"The paper clearly involves formal frameworks, discussing œÄ-calculus, linear logic, and formal specification languages. The mention of ""proof-search as computation"" and formal encodings indicates a strong mathematical foundation.",yes,"The paper explicitly examines programming paradigms, particularly the integration of concurrent, logic, and object-oriented programming paradigms.",yes,"The paper discusses language design principles, particularly focusing on the integration of different programming paradigms (logic programming, concurrent systems, object-oriented programming) into a unified framework.",yes,"The abstract demonstrates a strong theoretical foundation, discussing formal encodings, logical frameworks, and mathematical relationships between different formal systems.",yes,"The paper appears to focus on theoretical aspects rather than implementation, though it does discuss operational semantics. The implementation aspects serve theoretical goals.",yes,"The focus is clearly theoretical, dealing with formal specification, logical frameworks, and paradigm integration rather than practical implementation details.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The academic nature and citations of the paper suggest it is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical exploration of programming language design, focusing on the integration of concurrent, logic, and object-oriented paradigms through formal mathematical frameworks. The study demonstrates a deep engagement with fundamental language constructs, paradigm theory, and formal verification approaches, with a strong emphasis on theoretical contributions rather than practical implementation. By examining the relationships between œÄ-calculus, linear logic, and specification languages, the work provides a sophisticated analysis of programming language foundations.",4.9
Linking a ‚Äú State-rich ‚Äù Process Algebra to a ‚Äú State-free ‚Äù Process Algebra to Verify Software / Hardware Implementations,"Arshad Beg Lero, Andrew Butterfield Lero",-,-,-,0,2010,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in the context of process algebras and formal methods.",yes,"The paper explicitly focuses on formal verification and mathematical frameworks, specifically mentioning UTP (Unifying Theories of Programming) and formal semantics.",yes,"The paper explicitly examines programming paradigms, particularly the combination of state-rich and state-free process algebras, and discusses the theoretical foundations of different paradigms.",yes,"The paper discusses formal language design principles, particularly in combining Z, CSP, and refinement calculus in Circus, and examines fundamental design aspects of programming languages.",yes,"The paper is heavily focused on theoretical foundations, including formal methods, mathematical logic, and set theory as theoretical underpinnings.",yes,"While implementation tools are discussed, they serve to support the broader theoretical contributions rather than being the primary focus.",yes,"The paper's primary focus is on theoretical contributions, specifically developing a formally verified link between different formal languages and their theoretical foundations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the paper appears to be an academic publication with institutional affiliations, suggesting it is likely accessible through academic channels.",Include,"This research presents a rigorous theoretical investigation into programming language design, focusing on formal methods, paradigm theory, and mathematical frameworks for analyzing computational constructs. The study explores the integration of state-rich and state-free process algebras through a formally verified approach, demonstrating deep engagement with fundamental programming language principles and theoretical foundations. By examining the theoretical underpinnings of Circus, Z, and CSP, the work contributes substantively to understanding programming language design at a mathematical and conceptual level.",4.9
Acknowledgements 2 Theoretical Foundations 3 Requirements of a New Programming Paradigm 3.1 Functional Programming towards a New Computational Model for Engineering Software Systems,"J. Peckham, F. Maryanski, S. Zdonik",-,-,-,1,1993,maybe,"The paper analyzes some fundamental language constructs (inheritance, encapsulation) but primarily in the context of engineering design rather than pure theoretical analysis.",maybe,"The paper mentions a ""formal domain theory of design information (HM)"" and discusses formal models, suggesting some formal framework is present.",maybe,"The paper discusses a unique programming paradigm for engineering design, but does not appear to provide broad comparative theoretical analysis of paradigms.",maybe,"The paper discusses design principles of the ""Designer"" language, including orthogonality aspects like function overloading and module separation, though it is not primarily focused on fundamental design principles.",maybe,"There is evidence of theoretical foundation through the formal domain theory and formal models mentioned, though it appears to be more application-oriented.",maybe,"The paper discusses implementation details (like multiple inheritance, modules, and parallelism) but uses these to support theoretical contributions about the language design.",maybe,"While the paper makes some theoretical contributions through its formal domain theory, it appears to focus significantly on practical aspects of engineering design implementation.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The document presents a programming language design with theoretical foundations, including a formal domain theory and language design principles, but primarily focuses on practical engineering design applications. While demonstrating some theoretical elements like formal models and paradigm-specific constructs, the work appears more oriented toward implementation and practical utility rather than pure theoretical research. The study partially meets screening criteria related to language design and theoretical contribution, but lacks comprehensive theoretical depth.",3.5
Advances in Distributed Computing (ADC) and Colloquium on Combining Paradigms for Software Development (CCPSD),"S. Abramsky, T. Maibaum, Colloquium on Trees in Algebra",-,-,-,1,1991,yes,"There is strong evidence of fundamental analysis in entries like ""Evaluation transformer model,"" ""Reduction machines,"" and ""Narrowing strategies.""",yes,"There is strong evidence of formal frameworks throughout the abstract, including ""Formal specification,"" ""Formal program developments,"" ""Process algebra verification,"" and ""Higher-order logic.""",yes,"Several entries in the abstract suggest paradigm analysis, including ""CCS for OO and LP"" and ""Actor-oriented system specification.""",yes,"Several entries in the abstract suggest investigation of language design principles, including ""CCS for OO and LP,"" ""Parametric order-sorted types,"" and ""Exploiting non-determinism through laziness.""",yes,"Multiple entries in the abstract indicate strong theoretical foundations, such as ""A theory of program modifications,"" ""Theoretical view,"" and ""Formally based component description language.""",yes,"While some implementation aspects are mentioned, they appear to support theoretical contributions rather than being the primary focus.",yes,"The abstract strongly indicates theoretical contributions rather than practical applications, with a focus on formal methods, verification, and theoretical foundations.",yes,"The abstract appears to be written in English, though it is a collection of titles rather than a traditional abstract.",maybe,"The full-text accessibility cannot be determined from the abstract alone, creating some uncertainty.",Include,"The document demonstrates strong alignment with theoretical and formal programming language research, presenting multiple entries that explore fundamental design principles, formal frameworks, and paradigm analysis across various computational domains. Its content comprehensively addresses theoretical contributions, language design principles, and mathematical foundations, with a clear focus on rigorous computational theory rather than practical implementation. While the unusual format and potential accessibility limitations exist, the substantive theoretical depth and breadth of the content strongly support its alignment with the screening criteria.",4.6
"Linear Logic, Heap-shape Patterns and Imperative Programming","Limin Jia, D. Walker",-,-,-,2,2006,yes,"The paper provides a clear analysis of fundamental constructs, including data structure manipulation, memory safety, and computational primitives for construction/deconstruction.",yes,"The paper uses a formal mathematical framework, including linear logical formulas, mode analysis from logic programming, a type system for memory safety, and formal analysis of specifications.",yes,"The paper directly addresses programming paradigm foundations, proposing a new programming paradigm, providing theoretical analysis of data structure manipulation, and including comparative elements with existing approaches.",yes,"The paper clearly investigates fundamental design principles in programming languages, specifically focusing on a new paradigm for handling mutable data structures. The emphasis on safety and formal specification suggests attention to orthogonality and minimality.",yes,"The paper has a clear theoretical foundation, based on linear logic, formal mode analysis, a theoretical type system, and a mathematical framework for memory safety.",yes,"The implementation aspects, such as pattern matching and the type system, serve the theoretical contributions rather than being the primary focus.",yes,"The paper has a strong theoretical focus, with a new theoretical framework for data structure manipulation, formal analysis methods, theoretical safety guarantees, and a focus on theoretical contributions rather than practical patterns or optimization.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical exploration of programming language design, presenting a novel paradigm for mutable data structure manipulation through linear logical formulas and formal mode analysis. The research demonstrates strong theoretical foundations, employing mathematical frameworks to ensure memory safety and provide a comprehensive approach to computational construct analysis. The study's focus on fundamental programming language principles and formal verification techniques underscores its significant theoretical contribution.",4.9
Automatic unrestricted independent and-parallelism in declarative multiparadigm languages,"G. Heileman, Amadeo Casas",-,-,-,2,2008,yes,"The paper analyzes fundamental programming language constructs, particularly regarding parallelism, nondeterminism, and partially instantiated data structures at a theoretical level.",maybe,"While the paper discusses formal aspects of programming languages, it doesn't explicitly mention using formal mathematical frameworks or rigorous verification approaches. However, it does discuss formal language properties and transformations.",yes,"The paper explicitly compares and analyzes different programming paradigms (logic, functional, and declarative programming) and their theoretical foundations.",yes,"The paper discusses language design principles, particularly regarding parallelism capabilities and the relationship between declarative, logic, and functional programming paradigms. It examines fundamental design choices in programming languages.",yes,"The paper appears to have a strong theoretical foundation, discussing the fundamental properties of logic programming, functional programming, and their relationship to parallelism. It examines theoretical aspects of language design and implementation.",yes,"The paper discusses implementation aspects (particularly regarding parallel execution primitives and Prolog extensions), but these are clearly tied to theoretical contributions rather than being the sole focus.",yes,"The paper makes theoretical contributions by analyzing fundamental properties of programming paradigms and their relationship to parallelism. While it includes implementation aspects, these appear to support theoretical contributions.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a comprehensive theoretical exploration of programming language paradigms, focusing on parallelism, logic programming, and functional programming principles. It demonstrates strong theoretical foundations by analyzing fundamental language constructs, comparing programming paradigms, and examining design principles across different computational approaches. The study contributes significant theoretical insights into language design, implementation strategies, and computational primitives while maintaining a rigorous academic approach.",4.6
A Verified Integration of Imperative Parallel Programming Paradigms in an Object-Oriented Language,Paul Sivilotti,-,-,-,1,1993,yes,"The paper analyzes fundamental programming language constructs related to concurrency and parallelism at a theoretical level, meeting the fundamental analysis criterion.",yes,"The abstract explicitly mentions ""formally verified"" and discusses equivalence proofs between different programming models, indicating that the paper uses a formal mathematical framework.",yes,"The paper directly examines programming paradigm foundations by comparing and proving equivalence between different concurrency paradigms, strongly meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of the CC++ programming language, including parallel composition, atomic functions, and single-assignment variables, meeting the language design principles criterion.",yes,"The paper appears to have a strong theoretical foundation, showing equivalence between different programming paradigms and models (semaphores, monitors, asynchronous channels).",yes,"While implementation is mentioned (""specified, implemented""), it serves to support the theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The focus of the paper is clearly theoretical, examining fundamental equivalences between programming models rather than practical implementations or patterns, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A rigorous theoretical study exploring programming language design principles through formal verification of concurrency models, demonstrating equivalence between different programming paradigms. The research provides a comprehensive theoretical analysis of fundamental programming language constructs, focusing on mathematical frameworks and paradigm foundations rather than practical implementations.",4.6
Putting it in context: a syntactic theory of incremental program construction,Shinn-Der Lee,-,-,-,0,1996,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on program contexts, linking mechanisms, and variable references, strongly meeting the fundamental analysis criterion.",yes,"The paper uses lambda-calculi as a formal mathematical framework and presents a rigorous approach to analyzing programming language properties through formal schema development, meeting the formal framework criterion.",yes,"The paper explicitly examines multiple programming paradigms (modular, object-oriented, and interactive programming) and provides theoretical analysis of their foundations, strongly meeting the paradigm theory criterion.",yes,"The paper presents a schema for enhancing programming languages with incremental construction capabilities, focusing on fundamental design principles of program contexts and linking mechanisms, strongly meeting the language design principles criterion.",yes,"The paper presents a theoretical foundation based on lambda-calculi and formal program contexts, with mathematical rigor in its approach to program construction and linking, clearly meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed (e.g., metacircular compiler), they serve to support broader theoretical contributions about program construction and linking, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions to programming language design and paradigm foundations, rather than practical implementations, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical framework for programming language design, utilizing lambda-calculi to explore incremental program construction across multiple paradigms. The study offers a formal mathematical approach to analyzing programming language properties, with a strong focus on fundamental constructs, linking mechanisms, and theoretical contributions to programming language foundations. Its comprehensive examination of modular, object-oriented, and interactive programming paradigms demonstrates a deep theoretical analysis of computational principles.",4.9
6.2 Multi-way Merge with Constant Delay 6 Controlling Reactive Computations And(x = 4) : True)) 5.2 Local Execution 5 Controlling Nondeterminism 5.1 Finite Domain Constraint Techniques 4.2.4 Independent-and Style Translation 4.2.3 Andorra Principle Style Translation 4.2.2 Translating Deenitions with,V. Saraswat,-,-,-,0,2007,yes,The paper analyzes fundamental programming language constructs and paradigms at a theoretical level.,yes,"The abstract mentions ""Kernel Andorra Prolog framework"" and indicates formal analysis, though the full extent isn't clear from the abstract.",yes,The paper explicitly examines programming paradigms (Prolog and GHC) and their theoretical foundations.,yes,"The paper discusses the design of AKL and its relationship to Prolog and GHC paradigms, suggesting investigation of fundamental design principles.",yes,"The paper appears to have a theoretical foundation, discussing programming paradigms and formal frameworks.",yes,The discussion of implementation aspects (like search structuring and concurrent reactive processes) appears to support theoretical contributions rather than being the sole focus.,yes,The paper appears to make theoretical contributions by introducing a new language framework and analyzing paradigm relationships.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract indicates this is a research report from SICS, but the full-text accessibility cannot be determined from the abstract alone, creating some uncertainty.",Include,"The research presents a comprehensive theoretical exploration of programming language paradigms, focusing on the Andorra Kernel Language (AKL) and its relationship to Prolog and GHC frameworks. By introducing a novel language design that extends existing paradigms and provides advanced computational capabilities, the study demonstrates significant theoretical contributions to programming language foundations. The work appears to offer rigorous analysis of fundamental language constructs and paradigm relationships, with strong emphasis on theoretical understanding and formal frameworks.",4.6
New Trends in the Intergration of Paradigms,H. R. Nielson,-,-,-,0,2008,yes,"The paper analyzes fundamental programming language constructs (actors, coordination patterns) at a theoretical level, meeting this criterion.",no,"The abstract does not explicitly mention formal mathematical frameworks or verification approaches. While it discusses theoretical constructs, there is no clear indication of formal analysis.",maybe,"The paper examines the Actor model as a programming paradigm foundation and discusses its use for building coordination abstractions, partially meeting this criterion.",no,"The paper discusses programming language constructs and their abstraction, but does not explicitly address orthogonality or minimality. It focuses more on coordination patterns and abstractions.",no,"The paper presents theoretical constructs (activators, actorspaces, synchronizers, protocols) but does not explicitly mention a formal theoretical foundation or mathematical framework.",maybe,"The paper discusses implementation aspects but frames them in terms of theoretical constructs and their application, suggesting a balanced approach between theory and practice.",maybe,"The paper appears to make theoretical contributions through its analysis of coordination patterns and abstractions, though it also emphasizes practical benefits (""without compromising computational efficiency"").",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research explores programming language constructs through the Actor model, demonstrating theoretical contributions in coordination patterns and abstractions. While the study presents fundamental programming language analysis and paradigm theory, it lacks explicit formal mathematical frameworks and rigorous verification approaches. The work balances theoretical insights with practical implementation considerations, suggesting a nuanced approach to programming language design.",3.5
El Lenguaje CLP(H/E): Una Aproximaci√≥n basada en Restricciones a la Integraci√≥n de la Programaci√≥n L√≥gica y Funcional,Mar√≠a Alpuente Frasnedo,-,-,-,0,1991,yes,"The paper provides strong evidence of fundamental analysis of programming language constructs, particularly focusing on the integration of logical and equational programming at a theoretical level.",yes,"The paper presents a formal mathematical framework, discussing formal semantics, model intersection properties, and mathematical structures (Herbrand universe, congruences).",yes,"The paper explicitly examines programming paradigm foundations, specifically the integration of logical and equational programming paradigms, and provides comparative theoretical analysis.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on the integration of logical and equational languages, and examines orthogonality in combining different programming paradigms.",yes,"The paper has a very strong theoretical foundation, presenting formal theoretical foundations for integrating logic and equational programming, including mathematical structures and semantic properties.",yes,"While implementation is mentioned briefly, it serves to support the theoretical contributions rather than being the primary focus.",yes,"The paper clearly focuses on theoretical contributions rather than practical aspects, developing new theoretical foundations for integrating programming paradigms.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible, as it appears to be a thesis, which often have accessible full texts.",Include,"This thesis presents a rigorous theoretical exploration of programming language integration, focusing on the mathematical foundations of combining logical and equational programming paradigms. The work demonstrates a comprehensive formal framework with strong theoretical contributions, examining fundamental design principles and semantic properties across computational logic domains. Its approach provides a sophisticated analysis of programming language constructs through a mathematical lens, offering significant insights into paradigm integration and computational theory.",4.9
"Component-based Programming under Different Paradigms a Personal View on Components Gj: Making Java Easier to Type, and Easier to Type Polytypic Programming a Simple Approach to Generic Functional Programming Behavior Protocols and Components Separation of Concerns with Adaptive Plug-n-play Componen","P. Wadler, K. Weihe, Konstanz, K. Weihe, P. Wadler, Johan Jeuring, Ralf Hinze, F. Pl√°≈°il, Stanislav Visnovsky, Milos Besta, Mira Mezini, Karl Lieberherr, G√ºnter Kniesel, Peter Thiemann, Todd Veldhuizen, Thomas Gen√üler, Fzi Karlsruhe, Erik Meijer, Lutz Kettner, S. Krishnamurthi, Reinhard Budde, Gmd",-,-,-,0,-,yes,"The paper analyzes fundamental programming language constructs and paradigm foundations at a theoretical level, meeting the fundamental analysis criterion.",maybe,"While the paper mentions ""theoretical insights,"" it explicitly states ""we want to put emphasis on practical know-how,"" suggesting limited formal mathematical framework usage, partially meeting the formal framework criterion.",yes,"The paper strongly focuses on programming paradigm foundations and comparative analysis across different paradigms (OO, template-oriented, functional), meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles across programming paradigms, including object-oriented, template-oriented, and functional programming techniques, meeting the language design principles criterion.",maybe,"The paper appears to focus more on practical combinations and implementations rather than formal theoretical foundations, though some theoretical aspects are mentioned, partially meeting the theoretical foundation criterion.",yes,"The paper discusses implementation aspects (Java and C++ extensions) in service of broader theoretical understanding of paradigm combinations, meeting the implementation focus criterion.",maybe,"The abstract suggests a stronger focus on practical applications and ""practical know-how"" rather than pure theoretical contributions, partially meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text accessibility of the paper cannot be determined from the abstract alone, though being a seminar paper suggests it might be available through academic channels.",Exclude,"The document explores programming paradigms with a strong emphasis on comparative analysis across object-oriented, template-oriented, and functional programming techniques. While demonstrating robust theoretical foundations in language design principles, the work appears more oriented toward practical applications and cross-paradigm understanding rather than rigorous mathematical frameworks. The research aims to bridge theoretical insights with practical implementation strategies across different programming approaches.",3.5
Programming Paradigms and Computational Thinking,G. Michaelson,-,-,-,0,2018,maybe,"While the paper analyzes fundamental concepts of programming paradigms, it does not appear to focus on specific language constructs or computational primitives.",no,The abstract does not indicate the use of formal mathematical frameworks or verification approaches. The paper appears to be more conceptual and philosophical in nature.,yes,"The paper explicitly examines programming paradigm foundations and their relationships, questioning the traditional view of paradigms as distinct entities.",no,"The paper discusses programming paradigms and their relationships, but does not explicitly focus on orthogonality or minimality. It takes a more meta-level view of paradigms.",no,"While the paper discusses theoretical aspects of programming paradigms, it does not appear to present a formal mathematical framework. It seems to focus on conceptual analysis.",no,"The abstract does not discuss implementation or tools, focusing instead on theoretical aspects of paradigms.",maybe,"The paper appears to make theoretical contributions by challenging existing views of programming paradigms and proposing a unitary paradigm of computational thinking. However, it seems more philosophical than mathematical.",yes,"The paper is written in English, meeting this criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The abstract explores programming paradigms from a philosophical perspective, challenging traditional conceptualizations and proposing a unitary computational thinking approach. While demonstrating strong theoretical engagement with paradigm theory, the work lacks explicit formal mathematical frameworks or rigorous verification methods. The philosophical nature of the analysis suggests limited alignment with strict theoretical screening criteria.",3.2
Linguistic Symbiosis through coroutined interpretation,"T. D'Hondt, K. Gybels, M. D'Hondt, A. Peeters",-,-,-,0,2003,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly regarding paradigm combination and linguistic symbiosis.",no,The abstract does not indicate the use of formal mathematical frameworks or rigorous verification approaches. The paper appears to be more conceptual and descriptive.,yes,"The paper explicitly focuses on programming paradigms and their combination, discussing various paradigms (functional, imperative, object-oriented, concurrent, logic) and their compatibility.",maybe,"The paper discusses linguistic symbiosis and paradigm combination, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",no,"While the paper discusses theoretical concepts of paradigm combination, it does not explicitly mention a formal theoretical foundation or mathematical framework.",maybe,"The abstract suggests a focus on theoretical aspects of paradigm combination rather than practical implementation, though it mentions ""true language engineering.""",maybe,"The paper appears to make theoretical contributions about paradigm combination and linguistic symbiosis, though it seems to lean more towards conceptual analysis than rigorous theoretical development.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The abstract demonstrates strong engagement with programming language paradigms and theoretical analysis, particularly in exploring linguistic symbiosis across different programming styles. While the work shows significant theoretical depth in examining paradigm combination, it lacks explicit formal mathematical frameworks or rigorous verification approaches. The research appears conceptually rich but potentially limited in its formal theoretical foundations.",3.5
Execution models for Constraint Programming: kernel language design through semantics equivalence. . (ModeÃÄles d'exe'cution pour la programmation par contraintes : conception d'un langage noyau par le biais d'e'quivalences se'mantiques),Thierry Martinez,-,-,-,0,2015,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including execution models, control mechanisms, and synchronization primitives.",yes,"The paper presents formal mathematical frameworks for analyzing programming language properties, including logical provability, constraint propagation, and semantic equivalence.",yes,"The paper directly examines programming paradigm foundations, specifically logic programming and constraint programming, and provides comparative theoretical analysis between paradigms.",yes,"The paper explicitly deals with fundamental design principles in programming languages, particularly focusing on declarative programming paradigms and their execution models.",yes,"The work is deeply theoretical, focusing on formal semantics, logical foundations, and mathematical frameworks for programming paradigms.",yes,"While implementation aspects are discussed (e.g., ClpZinc modeling language), they serve to support broader theoretical contributions rather than being the primary focus.",yes,"The paper focuses on theoretical contributions, including semantic equivalences, formal transformations, and fundamental properties of programming paradigms.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it appears to be a thesis.",Include,"This thesis provides a rigorous theoretical exploration of programming language paradigms, focusing on formal semantic equivalences and mathematical frameworks for logic and constraint programming. The work deeply examines fundamental design principles, presenting constructive transformations and semantic analyses that contribute significantly to theoretical understanding of programming language constructs. Its comprehensive approach to paradigm theory, formal frameworks, and fundamental computational primitives demonstrates a sophisticated scholarly investigation of programming language foundations.",4.9
Object management support for the construction of complex applications,"P. Tarr, L. Clarke",-,-,-,1,1996,yes,"The paper analyzes fundamental programming language constructs and computational primitives at a theoretical level, particularly regarding object management and semantic models.",yes,"The abstract explicitly mentions ""formally define some of these semantic models,"" indicating a formal mathematical framework is used.",yes,"The paper directly addresses programming paradigm foundations, specifically the integration of programming language and database paradigms. It provides comparative theoretical analysis of these paradigms.",yes,"The paper discusses fundamental design principles in programming languages, particularly regarding the integration of programming language and database capabilities. It addresses orthogonality in the sense of unifying different paradigms.",yes,"The paper appears to have a strong theoretical foundation, discussing semantic models and their integration. The mention of formal definition suggests mathematical rigor.",yes,The implementation (prototype) is used to support theoretical contributions rather than being the primary focus. The abstract emphasizes theoretical aspects and semantic models.,yes,"The paper makes theoretical contributions by addressing the fundamental integration of programming language and database capabilities. While it includes implementation, this appears to support theoretical contributions.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of programming language and database paradigm integration, utilizing formal semantic models and addressing fundamental design principles. By examining the theoretical foundations of object management and proposing a novel ""database programming language"" approach, the study offers substantive contributions to understanding computational paradigms and their semantic interactions. The work demonstrates strong theoretical depth through its formal framework and comparative analysis of programming language constructs.",4.6
Advanced Seminar on Foundations of Innovative Software Development II and Colloquium on Functional and Logic Programming and Specifications (CFLP),"H. Ehrig, Colloquium on Functional, Specifications",-,-,-,2,1987,yes,"The paper analyzes fundamental programming language constructs or computational primitives at a theoretical level, as indicated by topics like ""Linear logic and lazy computation,"" ""Natural dynamic semantics,"" and ""Canonical term functors.""",yes,"The paper presents and utilizes formal mathematical frameworks and rigorous verification approaches, as indicated by mentions of ""linear logic,"" ""natural dynamic semantics,"" and ""canonical term functors.""",yes,"The paper examines programming paradigm foundations and provides comparative theoretical analysis of paradigms, as seen in topics like ""Retractions: A functional paradigm for logic programming"" and ""Higher order generalization.""",yes,"The paper investigates fundamental design principles in programming languages, such as orthogonality and minimality, as evidenced by topics like ""Extensional models for polymorphism"" and ""A type discipline for program modules.""",yes,"The paper includes a formal theoretical foundation or mathematical framework to support its claims, as evidenced by topics like ""Models and equality for logical programming,"" ""Inductive assertion method,"" and ""Theory and practice of canonical term functors.""",yes,"The paper's discussion of implementation or tools serves to support broader theoretical contributions rather than focusing solely on practical aspects, as evidenced by topics like ""Implementing algebraically specified abstract data types.""",yes,"The paper contributes to theoretical understanding rather than focusing exclusively on practical patterns, optimization, or educational aspects, as most entries focus on theoretical contributions.",yes,"The paper appears to be written in English, meeting the language requirement.",maybe,"The full text of the paper is likely accessible through academic channels, given its technical nature and probable academic publication.",Include,"The abstract demonstrates strong theoretical foundations in programming language research, with multiple entries exploring formal frameworks, paradigm theory, and fundamental computational principles. Topics ranging from linear logic and semantic unification to type disciplines and canonical term functors indicate a rigorous, mathematically-oriented approach to understanding programming language design and theoretical constructs. The work appears to prioritize theoretical contributions over practical implementations, suggesting a deep scholarly investigation of computational principles.",4.6
Combining OO and Functional Language Concepts,Qiang Zhen,-,-,-,0,2000,yes,"The paper analyzes fundamental programming language constructs (objects, classes, inheritance, etc.) at a theoretical level, meeting the fundamental analysis criterion.",yes,"The paper presents a formal core language and mentions ""operational semantics"", indicating a rigorous mathematical framework, meeting the formal framework criterion.",yes,"The paper's central focus is on combining object-oriented and functional programming paradigms, providing comparative theoretical analysis, meeting the paradigm theory criterion.",yes,"The paper explicitly focuses on combining programming paradigms and discusses fundamental design principles like orthogonality, meeting the language design principles criterion.",yes,"The paper presents a theoretical foundation for combining programming paradigms with formal operational semantics, meeting the theoretical foundation criterion.",yes,"While implementation aspects are discussed, they serve to support the theoretical contributions about paradigm combination, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical contributions to programming language design rather than practical implementations, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"A comprehensive theoretical exploration of programming language paradigms, combining object-oriented and functional approaches through a rigorous formal framework with operational semantics. The study presents a core language that systematically integrates fundamental programming concepts from multiple languages, offering a novel approach to language design principles and paradigm combination. Its strong theoretical foundation and focus on fundamental computational constructs make it a significant contribution to programming language research.",4.9
Design and implementation of static analyses for higher-order languages,Ilya Sergey,-,-,-,0,2015,yes,"The paper analyzes fundamental programming language constructs, computational primitives, and theoretical foundations of programming language analysis.",yes,"The paper explicitly discusses formal frameworks, including monadic abstract interpretation, logic-based approaches to verification, and formal mathematical frameworks for mechanized verification.",yes,"The paper discusses functional programming paradigms, concurrent programming paradigms, and higher-order programming concepts.",maybe,"The paper discusses programming language analysis and verification, and addresses fundamental design principles through its discussion of monadic abstract interpreters, though it does not explicitly focus on orthogonality or minimality.",yes,"The paper presents mathematical foundations for abstract interpretation, formal logic frameworks for concurrent program verification, and theoretical foundations for cardinality analysis.",yes,"While implementation aspects are discussed, such as GHC compiler integration, they serve to support and demonstrate theoretical contributions rather than being the primary focus.",yes,"The paper focuses on theoretical foundations of static analysis, formal verification approaches, and mathematical frameworks for programming language analysis.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature and references in the paper suggest it is likely an academic paper with accessible full text, though this cannot be determined from the abstract alone.",Include,"This research presents a comprehensive theoretical exploration of programming language analysis, focusing on formal frameworks, verification approaches, and fundamental computational principles across functional and concurrent programming paradigms. The work demonstrates rigorous mathematical foundations in static analysis, monadic interpretation, and logic-based verification, with significant contributions to theoretical understanding of programming language constructs. By integrating theoretical insights with practical implementation considerations, the study offers a sophisticated examination of computational design and verification methodologies.",4.9
First-order Lax Logicas a framework for Constraint Logic,"M. Fairtlough, M. Mendler, M. Walton",-,-,-,0,1997,yes,"The paper analyzes fundamental logical constructs, computational primitives, and the theoretical foundations of programming paradigms.",yes,"The paper presents a formal mathematical framework, including a Gentzen-type system, first-order bimodal theory, Curry-Howard isomorphism, and formal proof systems.",yes,"The paper examines the Lax Logic Programming (LLP) paradigm, the Constraint Logic Programming (CLP) paradigm, and provides comparative theoretical analysis between these paradigms.",maybe,"The paper discusses formal logical frameworks and their application to programming languages, particularly focusing on Lax Logic and its relationship to programming paradigms. While not explicitly discussing orthogonality or minimality, it does address fundamental design principles through its analysis of logical frameworks.",yes,"The paper is heavily theoretical, presenting soundness and completeness theorems, formal logical frameworks, and mathematical foundations for constraint logic programming.",maybe,The paper appears to use implementation aspects (CLP programs) to support theoretical contributions rather than focusing on practical implementation details.,yes,"The paper focuses on the theoretical foundations of programming paradigms, formal logical frameworks, and mathematical relationships between different programming approaches.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the presence of formal citations suggests this is likely an academic paper that would be accessible through academic channels.",Include,"This research presents a rigorous theoretical exploration of programming language paradigms through formal mathematical frameworks, focusing on Lax Logic and Constraint Logic Programming. The study provides a comprehensive theoretical analysis of computational primitives, paradigm foundations, and logical constructs, utilizing sophisticated mathematical techniques like Gentzen-type systems and Curry-Howard isomorphism. By examining fundamental design principles and offering a comparative theoretical approach, the work contributes significantly to understanding programming language theory.",4.9
Synthesis from multi-paradigm specifications,"Ioannis Filippidis, R. Murray, G. Holzmann",-,-,-,2,2015,yes,"The paper analyzes fundamental programming language constructs, examining basic programming language elements, control flow, data control, and sequential constraints.",yes,"The paper uses a formal framework, including two-player turn-based infinite games with full information, formal semantics, LTL, and generalized reactivity(1), as well as formal synthesis algorithms.",yes,"The paper explicitly examines programming paradigms, integrating imperative and declarative paradigms, analyzing their comparative strengths, and discussing paradigm choice for different requirements.",yes,"The paper discusses language design principles, particularly the integration of imperative and declarative elements in a programming language, and addresses fundamental design considerations for reactive synthesis problems.",yes,"The paper has a clear theoretical foundation, based on formal game theory, using mathematical frameworks (LTL, reactivity1)(), and including a formal semantics definition.",yes,"The implementation serves theoretical goals, with the translation to the Slugs synthesizer supporting the theoretical framework, and the implementation details being secondary to the theoretical contributions.",yes,"The paper has a strong theoretical focus, developing a new language framework, contributing to theoretical understanding of reactive synthesis, and focusing on fundamental language design.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature and implementation details of the paper suggest it is likely a formal academic paper with accessible full text, though this cannot be determined from the abstract alone.",Include,"A rigorous theoretical study exploring programming language design principles through the integration of imperative and declarative paradigms, utilizing formal mathematical frameworks like game theory and linear temporal logic. The research provides a comprehensive theoretical contribution to reactive synthesis, examining fundamental computational constructs and paradigm foundations with a strong emphasis on mathematical rigor and formal analysis.",4.9
"A PROPOSAL FOR HARMONISING TYPES , INHERITANCE AND POLYMORPHISM FOR OBJECT-ORIENTED PROGRAMMING","A. Simons, A. J. Cowling",-,-,-,1,2006,yes,"The paper analyzes fundamental OOP constructs at a theoretical level, particularly focusing on typing systems and class properties.",yes,"The abstract explicitly mentions ""formal typed models"" and discusses the challenge of creating a ""typed functional algebra,"" strongly indicating the use of a formal mathematical framework.",yes,"The abstract directly addresses programming paradigm foundations, comparing different OOP schools (HCI, AI, SE) and their theoretical underpinnings.",yes,"The abstract discusses fundamental design principles in OOP, including typing systems and class properties, meeting this criterion.",yes,"The paper appears to focus on theoretical foundations, discussing formal models and operational definitions of OOP languages.",yes,"The abstract discusses implementation aspects (like typing systems) in service of theoretical understanding, meeting this criterion.",yes,"The focus is clearly theoretical, examining fundamental properties of OOP and formal modeling rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The presence of citations suggests this is likely a formal academic paper, but the full-text accessibility cannot be determined from the abstract alone.",Include,"The abstract demonstrates a rigorous theoretical exploration of Object-Oriented Programming paradigms, focusing on formal modeling, typing systems, and fundamental design principles across different computational schools. Its strong emphasis on mathematical frameworks, paradigm foundations, and theoretical analysis of programming language constructs aligns closely with the screening criteria. The research appears to provide a sophisticated examination of OOP's theoretical underpinnings, particularly in the context of formal typed models and computational abstractions.",4.9
Analysis of paradigm use in multiparadigm language programs,D. S. Westbrook,-,-,-,0,1998,maybe,"The paper analyzes fundamental programming language constructs through the lens of paradigms, though it is more focused on paradigm usage patterns than basic computational primitives.",yes,"The paper presents a formal paradigm inference system with inference rules, which constitutes a formal mathematical framework.",yes,"The paper directly examines programming paradigm foundations and provides comparative theoretical analysis across multiple paradigms (imperative, functional, logic, and object-oriented).",no,The paper discusses paradigmatic aspects of programming languages but does not explicitly focus on orthogonality or minimality. It is more focused on paradigm usage analysis.,yes,"The paper develops a theoretical model (paradigmatic map) and formalizes paradigm associations through inference rules, providing a solid theoretical foundation.",yes,The implementation (GPA tool) serves to support and validate the theoretical contributions rather than being the primary focus.,yes,"The paper makes theoretical contributions through its paradigmatic map model and inference system, though it also includes practical implementation (GPA tool). The theoretical aspects appear primary.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it is a dissertation.",Include,"A comprehensive theoretical exploration of programming language paradigms, presenting a formal mathematical framework for analyzing paradigm usage across multiple programming approaches. The study develops a rigorous paradigm inference system and theoretical model that examines fundamental language constructs through a comparative lens, with strong emphasis on theoretical contributions and paradigmatic analysis. While demonstrating robust theoretical foundations, the research maintains a balanced approach between theoretical depth and practical implementation.",4.6
1 LFG qua concurrent constraint programming,V. Saraswat,-,-,-,0,2007,yes,"The paper analyzes fundamental constructs at a theoretical level, including the basic structure of constraints, properties of constraint systems, and fundamental relationships between different analytical dimensions.",yes,"The paper clearly presents a formal mathematical framework, including context-free grammar for c-structure, attribute-value matrices for f-structure, linear logic for semantic projections, and formal constraint systems.",yes,"The paper examines fundamental paradigm foundations, specifically the compositional computing paradigm, constraint-based programming paradigm, and multiple dimensions of analysis (c-structure, f-structure, semantic structure).",yes,"The paper discusses fundamental design principles in the context of LFG (Lexical Functional Grammar), including orthogonality and compositional principles. The abstract specifically mentions ""separation of concerns"" and ""compositionality.""",yes,"The paper has a strong theoretical foundation, evident through the mathematical formalism of constraint systems, formal treatment of semantic projections, and theoretical properties of constraints (partial information, additivity, etc.).",yes,"While implementation aspects are mentioned, they serve to support theoretical contributions rather than being the primary focus.",yes,"The paper appears to focus on theoretical contributions rather than practical applications, discussing fundamental properties and theoretical frameworks.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"The abstract demonstrates a rigorous theoretical exploration of Lexical Functional Grammar, presenting a comprehensive formal framework with mathematical foundations in constraint systems and semantic projections. It systematically addresses multiple dimensions of language analysis through a sophisticated paradigm of compositional computing, with strong emphasis on theoretical principles and fundamental computational constructs. The work exhibits deep theoretical contributions across language design, paradigm theory, and formal analysis, meeting most screening criteria with high precision.",4.9
Multi-paradigm Logic Programming a Simple Operational Model for Concurrent Functional Logic Programming,M. Hanus,-,-,-,0,2007,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically examining operational semantics and evaluation principles, which meets the fundamental analysis criterion.",yes,"The paper presents an operational semantics framework, which is a formal mathematical approach for analyzing programming language properties, and this clearly meets the formal framework criterion.",yes,"The paper explicitly examines programming paradigm foundations, combining functional, logic, and concurrent programming paradigms, which strongly meets the paradigm theory criterion.",yes,"The paper discusses fundamental design principles by examining operational semantics and combining principles from different programming paradigms, which strongly meets the language design principles criterion.",yes,"The study appears to have a strong theoretical foundation, focusing on formal operational semantics and combining different programming paradigms' principles, which meets the theoretical foundation criterion.",yes,"The abstract suggests the focus is on theoretical foundations rather than implementation details, meeting the implementation focus criterion.",yes,"The focus is clearly theoretical, examining fundamental principles and their combination rather than practical applications, which meets the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The study presents a rigorous theoretical investigation of programming language paradigms, focusing on operational semantics and the combination of functional, logic, and concurrent programming principles. By examining fundamental design principles through a formal mathematical framework, the research contributes significantly to theoretical understanding of programming language constructs and paradigm interactions. The work demonstrates a strong emphasis on theoretical foundations, paradigm theory, and fundamental analysis of computational principles.",4.7
Programming and Reasoning with Infinite Data in Isabelle / HOL,"M. Fleury, Andreas Lochbihler, A. Popescu",-,-,-,0,2017,yes,"The study analyzes fundamental programming language constructs at a theoretical level, particularly focusing on infinite objects and coinductive datatypes.",yes,"The study clearly involves formal mathematical frameworks, using Isabelle/HOL as a proof assistant and discussing formal reasoning about infinite objects.",yes,"The paper explicitly examines programming paradigms, specifically ""total/productive coprogramming"" and its theoretical foundations.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on total/productive coprogramming and coinductive datatypes.",yes,"The work is deeply theoretical, focusing on formal foundations of programming languages and mathematical frameworks for reasoning about infinite objects.",yes,"While implementation aspects are mentioned (compiler for concurrent Java), these serve to support the theoretical contributions rather than being the primary focus.",yes,"The work appears to be primarily theoretical, focusing on formal frameworks and reasoning rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract appears to be from a tutorial presentation, and it's unclear if a full paper exists or is accessible, creating some uncertainty about the full-text accessibility.",Include,"A comprehensive theoretical exploration of programming language design principles, focusing on formal mathematical frameworks and paradigm foundations through the lens of Isabelle/HOL. The work demonstrates rigorous theoretical contributions in programming language analysis, examining fundamental constructs like infinite objects and coinductive datatypes with a strong emphasis on mathematical reasoning and paradigm theory. While the full-text accessibility remains uncertain, the research clearly meets multiple theoretical and formal framework screening criteria.",4.6
Acknowledgements I am much indebted to Mark Norris of British Telecom Research Laboratories for promoting and encouraging my interest in applying definitive principles to concur-,"M. Slade, E. Yung, W. M. Beynon, Y. Yung, A. Cartwright",-,-,-,0,2007,yes,"The paper analyzes fundamental programming language constructs, particularly in the context of concurrent programming and multiprocessor architectures.",maybe,"The abstract mentions an ""abstract machine model"" and discusses theoretical foundations, suggesting some formal framework, though the depth isn't entirely clear.",yes,"The paper explicitly examines programming paradigms, comparing ""definitive programming"" with existing paradigms and discussing their relative merits.",yes,"The paper discusses programming language principles and paradigms, particularly focusing on ""definitive programming"" as a novel approach, suggesting investigation of fundamental design principles.",yes,"The paper appears to have a theoretical foundation, discussing ""definitive principles"" and their application to concurrent programming. The mention of ""abstract machine model"" suggests mathematical/theoretical underpinnings.",yes,The abstract suggests the implementation discussion (abstract machine model) serves theoretical purposes rather than being the primary focus.,yes,"The paper appears to focus on theoretical contributions, proposing a new paradigm and analyzing its theoretical foundations rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a novel theoretical approach to programming paradigms, focusing on definitive programming principles for concurrent computing across multiprocessor architectures. By exploring fundamental language design principles, paradigm foundations, and an abstract machine model, the study offers a rigorous theoretical contribution to understanding programming language constructs. The work demonstrates strong alignment with theoretical research criteria, particularly in examining programming paradigm foundations and proposing innovative computational frameworks.",4.6
Readings and Reflections about Hierarchy and Heterarchy in Programming Paradigms,-,-,-,-,0,2007,yes,"The paper clearly analyzes fundamental programming language constructs at a theoretical level, particularly focusing on data types, object types, and computational primitives, indicating the study analyzes fundamental programming language constructs.",yes,"The abstract heavily engages with formal mathematical concepts, specifically discussing algebras, coalgebras, and recursive type equations, suggesting the study presents or utilizes a formal mathematical framework.",yes,"The abstract explicitly discusses programming paradigms, comparing different approaches (algebraic vs. coalgebraic, object-oriented vs. traditional) and their fundamental properties, suggesting the research examines programming paradigm foundations.",yes,"The abstract discusses fundamental principles of programming languages, particularly focusing on algebraic and coalgebraic approaches to data types and object types, indicating the study investigates language design principles.",yes,"The paper appears to have a strong theoretical foundation, discussing mathematical concepts like fixed points, recursive type equations, and formal distinctions between algebraic and coalgebraic approaches, indicating the inclusion of a formal theoretical foundation.",yes,"The abstract maintains a theoretical focus, with any discussion of implementation serving to illustrate theoretical points rather than being the primary focus, suggesting the study's discussion of implementation supports broader theoretical contributions.",yes,"The focus appears to be entirely theoretical, discussing fundamental properties and distinctions in programming language design, indicating the study contributes to theoretical understanding.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The presence of a URL suggests the full text may be accessible online, but this cannot be definitively determined from the abstract alone.",Include,"The abstract demonstrates a rigorous theoretical exploration of programming language design principles, utilizing formal mathematical frameworks to analyze fundamental computational paradigms and type systems. Its deep engagement with algebraic and coalgebraic approaches, coupled with a comprehensive examination of programming language constructs, strongly aligns with theoretical research criteria. The work appears to provide a sophisticated mathematical foundation for understanding programming language structures and computational interactions.",4.9
An Equational Constraint Logic approach to Conceptual Modelling,"M. Alpuente, M. J. Ram√≠rez",10.1007/978-3-7091-7557-6_5,https://doi.org/10.1007/978-3-7091-7557-6_5,-,1,1992,yes,"The paper analyzes fundamental programming language constructs, particularly in the integration of logic and equational programming.",maybe,"The paper appears to use formal mathematical frameworks, particularly in its discussion of constraint logic programming and equational theories. The mention of ""inferential capability"" suggests formal analysis.",yes,"The paper explicitly examines programming paradigms, specifically the integration of logic programming and equational programming paradigms.",maybe,"The paper discusses the development of CLP(H/E) as a declarative programming language, but does not explicitly focus on orthogonality or minimality. It does discuss fundamental design principles in integrating logic and equational programming.",yes,"The paper appears to have a strong theoretical foundation, building on formal logic programming and constraint logic programming frameworks.",maybe,The paper discusses implementation aspects (CLPH/E) language() but uses these to support theoretical contributions rather than focusing solely on practical aspects.,maybe,"While the paper mentions applications to database systems, it appears to focus primarily on theoretical contributions in programming language design and formal frameworks.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The presence of multiple citations suggests the paper is likely a published academic work, but the full-text accessibility cannot be determined from the abstract alone.",Exclude,"The research presents a rigorous theoretical exploration of programming language design, focusing on the integration of logic and equational programming paradigms through a formal mathematical framework. By examining constraint logic programming techniques and developing a declarative language (CLP(H/E)), the study demonstrates strong theoretical foundations in computational paradigms and fundamental language constructs. The work appears to prioritize theoretical contributions over purely practical applications, with a sophisticated approach to analyzing programming language principles.",4.3
A presentation of the Curry-Howard Correspondance,Chantal Berline,-,-,-,1,1997,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly through the lens of Œª-calculus.",yes,"The paper heavily involves formal mathematical frameworks, specifically discussing Œª-calculus and its relationship to proof theory and programming theory.",yes,"The abstract explicitly compares functional and imperative programming paradigms, discussing their fundamental differences and theoretical foundations.",yes,"The abstract discusses fundamental design principles, particularly comparing functional and imperative programming paradigms and their conceptual differences.",yes,"Strong theoretical foundation is evident through the discussion of Œª-calculus, Curry-Howard Isomorphism, and proof theory connections.",yes,"The discussion appears to be primarily theoretical, with any implementation aspects serving to support theoretical contributions.",yes,"The paper appears strongly theoretical, focusing on fundamental connections between proof theory and programming theory rather than practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract mentions these are ""notes"" extracted from a paper, but does not provide clear information about full-text accessibility, creating some uncertainty.",Include,"This theoretical paper deeply explores programming language foundations through Œª-calculus, examining fundamental paradigm differences and mathematical frameworks connecting proof theory and programming theory. The work demonstrates strong theoretical contributions by analyzing computational primitives, paradigm foundations, and formal mathematical structures across functional and imperative programming approaches. Its rigorous theoretical focus and comprehensive examination of programming language principles align closely with the screening criteria.",4.9
The Recursion Schemes of Scientific Models : A Multi-Paradigm Study of the Logistic Map in Haskell,B. T. Widemann,-,-,-,0,2012,yes,The paper analyzes fundamental programming language constructs (recursion) at a theoretical level and their relationship to scientific modeling.,yes,"The paper presents a formal framework for analyzing recursion patterns and their relationship to scientific modeling, with mathematical foundations implied through the discussion of recursion theory.",yes,"The paper explicitly examines functional programming paradigms and their relationship to scientific modeling, providing comparative theoretical analysis.",yes,"The paper discusses fundamental design principles through the Squiggol approach to recursive algorithms and its implementation in Haskell, including aspects of orthogonality in separating computation and recursion scheme.",yes,"The paper has a strong theoretical foundation, as evidenced by the discussion of recursion theory, formal algorithms, and mathematical modeling principles.",yes,"The Haskell implementation serves to support theoretical contributions rather than being the primary focus, as evidenced by the abstract's emphasis on theoretical implications.",yes,"The paper makes clear theoretical contributions by analyzing fundamental relationships between recursion patterns and scientific modeling, going beyond practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but the academic nature of the paper suggests it is likely accessible.",Include,"The study presents a rigorous theoretical exploration of recursive algorithms and scientific modeling, demonstrating strong alignment with language design principles, paradigm theory, and fundamental computational analysis. By examining recursion patterns through a functional programming lens and providing a mathematical framework for understanding computational constructs, the research offers significant theoretical contributions to programming language foundations. The work bridges theoretical computer science with scientific modeling, emphasizing the deep epistemological implications of formal algorithms and computational paradigms.",4.6
"Functional Programming Languages and Computer Architecture: Portland, Oregon, USA, September 14-16, 1987. Proceedings",G. Kahn,-,-,-,2,1987,maybe,"Several papers analyze fundamental programming language constructs, such as ""The G-machine as a representation of stack semantics"" and ""Matrix algebra and applicative programming.""",maybe,"Several entries in the abstract suggest the use of formal mathematical frameworks, such as ""Evaluation transformers - A model for the parallel evaluation of functional languages"" and ""Pomset interpretations of parallel functional programs.""",maybe,"Multiple entries in the abstract discuss functional programming paradigms and their theoretical foundations, including ""Attribute grammars as a functional programming paradigm"" and ""The planar topology of functional programs.""",maybe,"The abstract mentions several papers related to language design and implementation, suggesting coverage of language design principles.",maybe,"The abstract includes papers with clear theoretical foundations, like ""Categorical multi-combinators"" and ""Finding fixed points in finite lattices,"" indicating the presence of a formal theoretical foundation.",maybe,"While some papers discuss implementation, these appear to support broader theoretical contributions rather than being purely practical.",maybe,"The abstract strongly indicates theoretical contributions, with many papers focusing on formal analysis, mathematical models, and theoretical foundations rather than purely practical aspects.",yes,"The abstract appears to be written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given the technical nature and academic context.",Include,"The collection of abstracts demonstrates strong alignment with theoretical programming language research, covering formal frameworks, paradigm theory, and fundamental computational constructs across multiple functional programming domains. Multiple entries suggest rigorous mathematical approaches to language design, implementation, and analysis, with a clear emphasis on theoretical contributions rather than purely practical applications. The breadth of topics indicates a comprehensive exploration of programming language foundations from a theoretical perspective.",4.6
"Actors , Objects , Contextures , Morphograms Readings and Reflections about Hierarchy and Heterarchy in Programming Paradigms 1 Actors","R. Kaehr, Juli",-,-,-,0,2007,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on data types, object types, and computational primitives, indicating the study analyzes fundamental programming language constructs.",yes,"The abstract heavily engages with formal mathematical frameworks, discussing algebras, coalgebras, and recursive type equations, suggesting the study presents or utilizes a formal mathematical framework.",yes,"The abstract explicitly discusses programming paradigms, comparing different approaches (algebraic vs. coalgebraic, object-oriented vs. traditional) and their fundamental properties, suggesting the research examines programming paradigm foundations.",yes,"The abstract discusses fundamental principles of programming languages, particularly focusing on algebraic and coalgebraic approaches to data types and object types, indicating the study investigates language design principles.",yes,"The paper appears to have a strong theoretical foundation, discussing mathematical concepts like fixed points, recursive type equations, and formal distinctions between algebraic and coalgebraic approaches, indicating the study includes a formal theoretical foundation.",yes,"The abstract maintains a theoretical focus, with any discussion of implementation serving to illustrate theoretical points rather than being the primary focus, suggesting the study's discussion of implementation supports broader theoretical contributions.",yes,"The focus is clearly theoretical, examining fundamental properties of programming language constructs and paradigms rather than practical applications, indicating the study contributes to theoretical understanding.",yes,"The paper is written in English, meeting the language requirement.",maybe,"The presence of a URL at the end of the abstract suggests the full text may be available online, but this cannot be definitively determined from the abstract alone.",Include,"The abstract demonstrates a rigorous theoretical exploration of programming language foundations, utilizing formal mathematical frameworks to analyze fundamental design principles across different computational paradigms. Its comprehensive examination of algebraic and coalgebraic approaches, object types, and computational primitives strongly aligns with theoretical research criteria, presenting a sophisticated mathematical analysis of programming language constructs. The work appears to make significant theoretical contributions by systematically comparing programming paradigms through a precise mathematical lens.",4.9
The Common Model for the Communication and Synchronization Primitives,Petr Han√°,-,-,-,0,2008,yes,"The paper analyzes fundamental interaction primitives across programming paradigms at a theoretical level, using a formal model.",yes,"The paper uses ""asynchronous PRAM"" as a formal model for describing interaction primitives, suggesting a formal mathematical framework.",yes,"The paper explicitly states it examines ""common paradigms used in programming languages for parallel and distributed computing,"" directly addressing paradigm theory.",maybe,"The paper focuses on describing interaction primitives across programming paradigms, which relates to fundamental design principles, though it does not explicitly mention orthogonality or minimality.",yes,"The paper presents a ""common model"" for describing primitives and uses PRAM as a theoretical foundation, indicating a formal theoretical approach.",yes,"The abstract doesn't mention implementation details, focusing instead on theoretical modeling.",yes,"The focus appears to be on theoretical modeling and description of primitives rather than practical implementation, suggesting a theoretical contribution.",yes,"The paper appears to be written in English, though there are some minor formatting issues.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"A theoretical study exploring programming language paradigms through a formal mathematical framework, focusing on interaction primitives across parallel and distributed computing models. The research presents a rigorous approach to describing computational primitives using an asynchronous PRAM model, demonstrating strong alignment with theoretical programming language analysis criteria. While most screening requirements are met, full-text accessibility remains uncertain.",4.6
Programming in Persistent Higher-Order Languages,"R. Connor, R. Morrison, M. Atkinson, F. Matthes, Joachim W. Schmidt",10.1007/978-3-642-78565-8_24,https://doi.org/10.1007/978-3-642-78565-8_24,-,1,1993,yes,"The paper analyzes fundamental programming language constructs, particularly type systems and their application to persistent data, meeting this criterion.",maybe,"While the abstract mentions type systems, it doesn't explicitly state whether a formal mathematical framework is used. However, the discussion of sophisticated typing suggests some formal analysis may be present.",yes,"The paper explicitly discusses ""radically different programming paradigms"" and their theoretical foundations in persistent programming, showing strong alignment with this criterion.",yes,"The paper discusses type systems and programming paradigms, which are fundamental design principles. The focus on persistent programming languages and their type systems suggests strong alignment with this criterion.",maybe,"The paper appears to have a theoretical foundation in type systems and programming paradigms, though the depth of mathematical framework isn't explicitly stated.",yes,"The abstract suggests the paper balances theoretical discussion with practical applications in operating systems and database management systems, supporting broader theoretical contributions.",yes,"The paper appears to focus on theoretical aspects of persistent programming and type systems rather than practical implementations, meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract demonstrates strong theoretical foundations in programming language design, particularly focusing on persistent programming paradigms and type systems. It explores fundamental language constructs, paradigm theory, and theoretical contributions across operating systems and database management contexts. The research appears to provide a rigorous examination of programming language principles with potential formal mathematical underpinnings.",4.6
Towards Language Interfaces for DSLs Integration,Thomas Degueule,-,-,-,2,2015,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on language interfaces, composition, and type systems.",yes,"The paper presents formal frameworks through ""model types"" and ""model-oriented type systems"" with structural typing and family polymorphism. It explicitly mentions formalisms for expressing interfaces and binding relations.",yes,"The paper examines programming paradigm foundations, particularly in the context of DSLs and their composition. It discusses theoretical aspects of language design and evolution.",maybe,"The paper discusses language design principles, particularly focusing on modularity and interfaces in language design. While not explicitly discussing orthogonality or minimality, it addresses fundamental design principles through the lens of language interfaces and composition.",yes,"The paper presents a strong theoretical foundation through the formal type system, model polymorphism, and structural typing concepts. It explicitly mentions a theoretical framework for language interfaces and composition.",yes,The implementation discussion (Melange language) serves to demonstrate and support the theoretical contributions rather than being the primary focus.,yes,"The paper makes clear theoretical contributions through its framework for language interfaces, model types, and type systems. While it includes practical applications, the focus is primarily theoretical.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be an academic publication with proper citations, suggesting it is likely accessible for full-text review, though this cannot be definitively determined from the abstract alone.",Include,"The research presents a rigorous theoretical framework for Domain-Specific Language (DSL) design, focusing on language interfaces, model types, and type systems with strong formal mathematical foundations. It contributes significant theoretical insights into programming language composition, modularity, and paradigm evolution, demonstrating a comprehensive approach to understanding fundamental language design principles. The study's emphasis on formal frameworks, theoretical contributions, and fundamental analysis of programming language constructs provides a substantive exploration of language engineering principles.",4.6
Objects In a Functional Environment,"Juan Carlos Guzm√°n, Asc√°nder Su√°rez",-,-,-,0,-,yes,"The paper analyzes fundamental programming language constructs, specifically the integration of objects into functional programming and their interaction with pattern-matching and type systems.",maybe,"While the paper mentions type inference mechanisms, it's not explicitly clear if it presents a formal mathematical framework. However, the focus on type systems suggests some formal analysis.",yes,"The paper directly examines programming paradigm foundations, specifically the intersection of object-oriented and functional programming paradigms.",yes,"The paper discusses fundamental design principles in programming languages, specifically focusing on incorporating objects into functional programming languages and adapting them to pattern-matching mechanisms.",yes,"The paper appears to have a theoretical foundation, as it deals with fundamental concepts of programming paradigms and their integration.",yes,"The discussion appears to be primarily theoretical, with implementation aspects serving to support the theoretical contributions.",yes,"The paper focuses on theoretical contributions, proposing new primitives and analyzing fundamental paradigm integration rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Include,"The research explores fundamental programming language design principles by investigating the integration of object-oriented concepts into functional programming paradigms. It presents a theoretical analysis of programming language constructs, focusing on proposing new primitives and examining paradigm interactions through a rigorous examination of type systems and pattern-matching mechanisms. The study demonstrates strong theoretical contributions to understanding programming language foundations across different paradigms.",4.6
Ludics Programming I: Interactive Proof Search,"A. Saurin, Inria Futurs",-,-,-,0,2007,yes,"The paper examines basic programming primitives through logical semantics and proof theory, indicating a focus on fundamental analysis.",yes,"The paper explicitly deals with proof theory, Ludics, and formal logical semantics, suggesting a rigorous formal approach.",yes,The paper directly examines programming paradigms (functional and logic programming) and their theoretical foundations through proof theory.,maybe,"The paper discusses fundamental principles of programming languages, particularly focusing on proof theory and its relationship to programming paradigms. While not explicitly discussing orthogonality or minimality, it addresses fundamental design principles through the lens of proof theory.",yes,"The paper has a clear theoretical foundation through proof theory and Ludics, and it explicitly aims to develop a new computational model based on formal theoretical foundations.",maybe,"The paper appears to maintain a theoretical focus, with implementation aspects serving theoretical understanding rather than being the primary focus.",yes,"The paper clearly focuses on theoretical contributions, developing a new computational model and studying its properties, rather than focusing on practical patterns or optimization.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research explores fundamental programming language principles through proof theory, examining computational models and paradigm foundations with a rigorous theoretical approach. The study demonstrates strong alignment with theoretical research criteria by investigating interactive proof search, logical semantics, and computational primitives across functional and logic programming paradigms. Its focus on developing a new computational model based on Ludics provides a sophisticated theoretical contribution to understanding programming language design.",4.9
Language Spaces,C. Holt,-,-,-,0,2003,yes,"The paper appears to analyze fundamental aspects of programming languages at a theoretical level, particularly regarding syntactic freedom and paradigm integration.",yes,"The abstract mentions ""higher-order universal algebra of relations"" as a framework, indicating a formal mathematical approach.",yes,"The abstract explicitly mentions ""programming styles and paradigms"" and discusses their integration.",yes,"The abstract discusses syntactic freedom and framework design for programming languages, suggesting investigation of fundamental design principles.",maybe,"The reference to universal algebra suggests a theoretical foundation, though the abstract notes it's ""expressed informally.""",yes,The abstract suggests a theoretical focus on framework development rather than implementation details.,yes,The focus appears to be on theoretical framework development rather than practical implementation.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"A theoretical exploration of visual programming frameworks demonstrates strong alignment with language design principles, paradigm theory, and fundamental computational analysis. The study proposes a higher-order universal algebra approach to understanding programming language syntactic freedom, with a focus on theoretical contributions across programming paradigms. While the abstract suggests rigorous theoretical foundations, some uncertainty remains regarding the depth of formal mathematical treatment.",4.3
Suitability of Programming Languages for Categorical Databases,"D. A. Nelson, B. Rossiter",-,-,-,1,2009,no,"While the paper examines programming languages, it does so from the perspective of implementation suitability rather than fundamental theoretical analysis of language constructs.",maybe,"The paper mentions category theory and formalism for object-relational databases, indicating some formal mathematical framework, though it's not clear how deeply this is applied to programming languages themselves.",maybe,"The paper explicitly examines ""five well known programming languages, from a selection of programming paradigms,"" suggesting some comparative analysis of paradigms, though the focus seems more practical than theoretical.",no,"The paper examines programming languages across paradigms, but focuses more on their suitability for implementation rather than investigating fundamental design principles like orthogonality or minimality.",maybe,"The paper has a theoretical foundation in category theory, but appears to focus more on practical implementation considerations.",no,"The paper's primary focus appears to be on implementation considerations, with the theoretical aspects (category theory) serving the practical goal of finding a suitable implementation language.",no,"The paper appears to be primarily focused on practical implementation considerations (""most suitable language for implementing the prototype data model"") rather than theoretical contributions.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The study explores programming languages across paradigms using category theory, but primarily focuses on practical implementation considerations rather than deep theoretical analysis. While the research touches on formal frameworks and paradigm comparisons, its core objective appears to be identifying a suitable language for prototype development, which limits its alignment with rigorous theoretical screening criteria.",3.2
An Adaptive Language Approach For Domain Analysis,D. Hanirex,-,-,-,0,2014,maybe,"The paper appears to analyze fundamental programming language constructs through the lens of paradigm integration, though the depth of theoretical analysis isn't clear from the abstract.",maybe,"While the abstract mentions ""formal representation"" regarding ontologies, it doesn't clearly indicate whether the paper presents a formal mathematical framework for analyzing programming language properties.",yes,"The paper explicitly focuses on multiple programming paradigms (functional, object-oriented, concurrency) and their integration, strongly meeting this criterion.",maybe,"The paper discusses multi-paradigm programming and integration of ontologies into programming languages, which relates to language design principles. However, it doesn't explicitly address orthogonality or minimality.",maybe,"The abstract suggests some theoretical elements through ontology integration, but doesn't explicitly demonstrate a formal theoretical foundation.",maybe,"The abstract mentions system development and metaprogramming implementation, but it's unclear whether these serve broader theoretical contributions or are the primary focus.",maybe,"The paper appears to make theoretical contributions by addressing paradigm integration and impedance mismatch, though the abstract's focus on ""system development"" suggests some practical orientation.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,The full-text accessibility of the paper cannot be determined from the abstract alone.,Exclude,"The research explores multi-paradigm programming language design through ontology integration, demonstrating strong potential in paradigm theory and theoretical contributions. While the study addresses fundamental programming language constructs and paradigm integration, uncertainties remain regarding the depth of formal frameworks and theoretical foundations. The work appears to balance theoretical exploration with practical implementation considerations.",3.5
On Feature Orientation and Functional Programming,"S. Apel, Christian K√§stner, Armin Gr√∂√ülinger, C. Lengauer",-,-,-,1,2008,yes,"The paper analyzes fundamental programming language constructs (crosscutting concerns, separation of concerns) at a theoretical level, which meets the fundamental analysis criterion.",maybe,"The abstract does not explicitly mention a formal mathematical framework or verification approach, so it is unclear if the paper meets this criterion.",yes,"The paper explicitly examines programming paradigms (object orientation, feature orientation, and functional programming) and provides comparative theoretical analysis, which strongly meets the paradigm theory criterion.",yes,"The paper discusses fundamental principles of programming languages, specifically addressing separation of concerns and crosscutting concerns, which meets the language design principles criterion.",maybe,"The paper appears to have a theoretical foundation in analyzing programming paradigms and their relationship to crosscutting concerns, though the depth of the mathematical framework is not clear from the abstract.",yes,"The abstract mentions case studies, but these appear to support theoretical contributions rather than being the primary focus, which meets the implementation focus criterion.",yes,"The paper appears to focus on theoretical contributions regarding programming paradigms and their relationship to crosscutting concerns, rather than practical aspects alone, which meets the theoretical contribution criterion.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores fundamental programming language principles, particularly examining crosscutting concerns across different paradigms with a strong theoretical focus on feature orientation and functional programming. While demonstrating robust theoretical contributions and paradigm analysis, the study exhibits some uncertainty regarding its formal mathematical framework. The work appears to provide a substantive theoretical investigation of programming language design principles.",4.3
Modular Monadic Semantics for Aspect-Oriented Programming,Garrin Kimmell,-,-,-,0,2004,yes,"The paper provides strong evidence of fundamental analysis of programming language constructs, particularly in how aspects are woven into programs and how their semantics can be formally specified.",yes,"The paper employs modular monadic semantics, functors, and algebraic data types as formal mathematical constructs for analyzing programming language properties, providing strong evidence of a formal mathematical framework.",yes,"The paper explicitly examines programming paradigm foundations, specifically aspect-oriented programming, and provides theoretical analysis of how aspects interact with object languages.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on modular monadic semantics and aspect-oriented programming. It explicitly addresses orthogonality through its discussion of independent specification of language constructs.",yes,"The paper uses mathematical concepts like functors, algebras, and fixed-points to support its claims about programming language semantics, demonstrating a clear theoretical foundation.",yes,The paper's discussion of implementation aspects (like compiler staging) serves to support broader theoretical contributions about language semantics and composition.,yes,"The paper makes clear theoretical contributions, focusing on formal semantics and mathematical frameworks rather than practical implementations or patterns.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the presence of detailed citations suggests this is likely a formal academic paper that would be accessible through academic channels.",Include,"This research presents a rigorous theoretical investigation of programming language semantics, employing advanced mathematical frameworks like modular monadic semantics and functors to analyze aspect-oriented programming paradigms. The study offers a comprehensive theoretical contribution by examining fundamental language constructs, providing a formal approach to understanding programming language design principles and semantic composition. Its strong focus on mathematical foundations and paradigm theory demonstrates a sophisticated approach to understanding computational language structures.",4.9
The -calculus,"N. J. Rehof, Morten Heine Ssrensen",-,-,-,0,1994,yes,"The paper provides a deep analysis of fundamental constructs, including control operators, normalization, proof theory, and programming paradigms.",yes,"The paper presents a formal mathematical framework through its discussion of the Curry-Howard Isomorphism, typed-calculus with formal properties, normalization systems, and connections to formal logic.",yes,"The paper explicitly discusses programming paradigms, specifically the ""call-by-name catch=throw-programming paradigm"" and its theoretical foundations.",yes,"The paper discusses control operators and calculus design principles, including orthogonality and compatibility, meeting the language design principles criterion.",yes,"The paper has a clear theoretical foundation through its mathematical framework of control calculus, connection to formal logic, and proof normalization theory.",yes,"The implementation aspects of the paper, if any, appear to serve the theoretical contributions rather than being the primary focus.",yes,"The paper has a strong focus on theoretical contributions, including the development of a new control operator, theoretical properties of the calculus, connections to formal logic, and normalization theory.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given its academic nature and references, though this cannot be determined from the abstract alone.",Include,"This research presents a rigorous theoretical exploration of programming language design principles, focusing on control operators, formal logic, and the Curry-Howard Isomorphism. The study offers a deep mathematical framework analyzing fundamental computational constructs, with strong emphasis on theoretical contributions and paradigm foundations. Its comprehensive approach to programming language theory demonstrates significant scholarly depth across multiple theoretical dimensions.",4.9
Using Adaptive Automata in a Multi-paradigm Programming Environment,J. Jos√©,-,-,-,0,2001,yes,The paper analyzes fundamental programming language constructs through the lens of adaptive automata and their relationship to Turing Machines.,yes,"The paper explicitly discusses adaptive automata as formal state machines and mentions their formal power equivalence to Turing Machines, indicating a rigorous formal framework.",yes,The paper explicitly focuses on multiparadigmatic programming environments and integration of different programming paradigms.,maybe,"The paper discusses multiparadigmatic programming environments and integration of different programming languages, which relates to language design principles, though it does not explicitly focus on orthogonality or minimality.",yes,The paper presents adaptive automata as a formal theoretical foundation and discusses their formal power in relation to Turing Machines.,maybe,"The paper discusses implementation aspects (name management module, application program) but uses these to support theoretical contributions about adaptive automata and paradigm integration.",maybe,"The paper appears to make theoretical contributions through its formal framework and analysis of adaptive automata, though it also includes practical implementation aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical framework exploring multiparadigmatic programming environments through adaptive automata, demonstrating strong formal foundations and theoretical contributions. By examining programming language paradigms and computational primitives at a fundamental level, the study offers a sophisticated analysis of language design principles and computational theory. The work integrates theoretical insights with practical implementation, focusing on the formal power and potential of adaptive automata in programming language research.",4.6
"effort to develop foundations for prototype-based languages or to define a more general model , which at the same time represents both class-based and prototype-based languages","Ver√≥nica Arga√±araz, G. Baum, C. Pons, Mar√≠a Jos√© Presso, M. Prieto, Natalia Romero",-,-,-,0,2012,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically focusing on the basic elements of object-oriented programming and how different sharing mechanisms can be constructed from these elements, meeting the fundamental analysis criterion.",yes,"The paper uses Abadi and Cardelli's formal calculus of objects (impœÇ-calculus) as its mathematical framework and extends it to handle per-object delegation, meeting the formal framework criterion.",yes,"The paper directly examines programming paradigm foundations, comparing class-based and prototype-based paradigms and providing a theoretical analysis of their relationship, meeting the paradigm theory criterion.",yes,"The paper directly addresses fundamental design principles in programming languages, specifically focusing on object-oriented programming paradigms and their basic constructs. It examines orthogonality in how different sharing mechanisms can be built from basic principles.",yes,"The paper is built on formal theoretical foundations, specifically the impœÇ-calculus, and extends it to provide a theoretical framework for understanding object-oriented programming paradigms, meeting the theoretical foundation criterion.",yes,"The paper appropriately balances theoretical and implementation aspects. While it discusses implementation through high-level constructs, these serve to support the theoretical contributions rather than being the primary focus, meeting the implementation focus criterion.",yes,"The paper makes clear theoretical contributions rather than focusing on practical aspects. It provides a formal framework for understanding sharing mechanisms and demonstrates how different paradigms can be built from basic principles, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be from a conference (CACIC '97), which suggests it may be accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"This research provides a rigorous theoretical examination of object-oriented programming paradigms, utilizing a formal mathematical framework to analyze sharing mechanisms across class-based and prototype-based languages. By extending Abadi and Cardelli's calculus of objects, the study offers a fundamental theoretical contribution that explores the basic constructs of object-oriented programming through a rigorous, mathematically-grounded approach. The work demonstrates how different programming paradigms can be constructed from minimal, fundamental principles, representing a significant theoretical advancement in understanding programming language design.",4.9
Investigations Into Abstraction And Concurrency,R. Jagadeesan,-,-,-,1,1991,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including process communication, shared memory, and computational primitives.",yes,"The paper strongly meets this criterion. It explicitly uses domain theory as a mathematical formalism and presents formal semantic descriptions. It develops new mathematical frameworks, including a ""new powerdomain construction.""",yes,"The paper explicitly examines multiple programming paradigms (functional, logic, and concurrent programming) and provides theoretical analysis of their foundations and relationships.",yes,"The paper deeply investigates fundamental design principles, particularly in the context of interactive programming systems and dataflow models. It examines orthogonality in different programming paradigms (functional, logic, and concurrent programming).",yes,"The paper has a strong theoretical foundation, using domain theory and mathematical formalisms to analyze programming language properties. It presents formal semantic descriptions and theoretical models.",yes,The paper's discussion of implementation aspects (like dataflow networks) serves to support broader theoretical contributions rather than focusing on practical aspects.,yes,"The paper is primarily theoretical, focusing on abstract semantics, mathematical models, and formal frameworks rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full text accessibility cannot be definitively determined from the abstract alone, the fact that this is a thesis suggests it is likely accessible through academic channels.",Include,"This thesis presents a rigorous theoretical investigation of programming language semantics, utilizing domain theory and mathematical formalisms to analyze fundamental computational constructs across multiple programming paradigms. The work demonstrates a deep theoretical contribution by developing novel semantic models, exploring process communication, and providing formal frameworks for understanding interactive programming systems. Its comprehensive examination of programming language principles, mathematical foundations, and paradigmatic relationships strongly aligns with theoretical research criteria.",4.9
Formalising sharing mechanisms in object-oriented paradigm,"Ver√≥nica Argara√±az, G. Baum, C. Pons, Mar√≠a Jos√© Presso, M. Prieto, Natalia Romero",-,-,-,0,1997,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, specifically focusing on object sharing, delegation, and basic object-oriented concepts.",yes,The paper explicitly uses a formal mathematical framework - the Abadi & Cardelli imperative calculus (impœÇ-calculus). It provides rigorous formal analysis of object-oriented programming concepts.,yes,"The paper directly examines programming paradigm foundations, comparing class-based and prototype-based paradigms, and provides theoretical analysis of how they can be constructed from basic elements.",yes,"The paper strongly addresses fundamental design principles in programming languages, specifically focusing on object-oriented programming paradigms and their basic constructs. It examines orthogonality in how different sharing mechanisms can be constructed from basic elements.",yes,"The paper has a strong theoretical foundation, building on formal calculus and providing mathematical frameworks for analyzing programming language properties. It specifically aims to show how basic constructs can be formally represented.",yes,The paper appropriately balances theoretical contributions with implementation considerations. It discusses how the formal framework can be used to write programs without requiring deep understanding of the formalism.,yes,The paper makes clear theoretical contributions rather than focusing on practical aspects. It aims to establish fundamental principles for object-oriented programming and demonstrate how different sharing mechanisms can be formally constructed.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract appears to be from conference proceedings, but the full-text accessibility cannot be definitively determined from the abstract alone, creating some uncertainty.",Include,"This research provides a rigorous theoretical examination of object-oriented programming paradigms, utilizing a formal mathematical framework to analyze fundamental design principles and sharing mechanisms across class-based and prototype-based languages. The study offers a comprehensive theoretical contribution by demonstrating how basic object-oriented constructs can be formally represented and constructed from fundamental elements, with a strong emphasis on mathematical and logical foundations. While the full-text accessibility remains uncertain, the paper's deep theoretical analysis and formal approach to programming language design principles make it a significant scholarly work.",4.6
PhD Abstracts,Graham Hutton,-,-,-,0,2017,yes,"The paper analyzes fundamental programming language constructs, particularly in the context of probabilistic programming and parallel computation.",yes,"The paper presents formal mathematical frameworks for analyzing programming language properties, particularly in the discussion of ""quotient inductive-inductive definitions"" and their categorical characterization.",yes,"The paper examines programming paradigms, particularly probabilistic programming and parallel programming paradigms, with theoretical analysis of their foundations.",maybe,"The paper discusses programming language design, particularly for parallel Haskell implementations and probabilistic programming languages, but does not explicitly focus on orthogonality or minimality principles.",yes,"The paper includes clear theoretical foundations, especially in the sections about quotient inductive-inductive definitions and their categorical characterization.",yes,"While implementations are discussed (GUMSMP, AugurV2), they serve to support broader theoretical contributions rather than being the sole focus.",yes,"The paper makes clear theoretical contributions, especially in the development of quotient inductive-inductive definitions and their theoretical framework, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper appears to be accessible, as it is a thesis which often has accessible full texts.",Include,"The research demonstrates strong theoretical foundations in programming language design, presenting formal mathematical frameworks for analyzing computational paradigms and language constructs. It provides deep theoretical contributions across probabilistic programming, parallel computation, and categorical characterizations, with a rigorous approach to understanding fundamental programming language principles. The work effectively bridges theoretical analysis with implementation considerations, offering a comprehensive examination of programming language foundations.",4.6
Exploring Codata : The Relation to Object-Orientation,Zachary J. Sullivan,-,-,-,0,2019,yes,"The paper provides strong evidence of fundamental analysis through its examination of basic programming language constructs (data, codata, objects) at a theoretical level.",yes,"The paper appears to use formal mathematical frameworks, discussing lambda-calculus, natural deduction, and type systems. The extension of a basic language with formal features suggests a rigorous approach.",yes,"The paper directly examines programming paradigm foundations, specifically the relationship between functional and object-oriented paradigms, and provides comparative theoretical analysis.",yes,The paper strongly addresses fundamental design principles by exploring the logical foundations of object-oriented programming and its relationship with functional programming. It specifically examines how objects arise naturally in logic and discusses fundamental constructs.,yes,"The paper has a strong theoretical foundation through its focus on logical foundations, type systems, and formal language extensions. The paper explicitly aims to establish theoretical connections between paradigms.",yes,The paper appears to use implementation aspects (language extension) to support theoretical contributions rather than focusing on practical implementation details.,yes,The paper clearly focuses on theoretical contributions rather than practical aspects. It aims to establish fundamental connections between programming paradigms and logic.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but this is a common limitation in screening.",Include,"This research explores fundamental programming language design principles by examining the logical foundations of object-oriented and functional programming paradigms. The study presents a rigorous theoretical framework that investigates the mathematical connections between programming constructs, focusing on formal analysis of language design and paradigm interactions. By extending a basic language with formal features and exploring the theoretical underpinnings of programming paradigms, the research contributes significantly to understanding computational language foundations.",4.9
Considerations on genericity for programming language design,H. Gast,-,-,-,1,1999,yes,"The paper analyzes fundamental programming language constructs including type systems, overload resolution, and higher-order functions at a theoretical level.",yes,"The abstract mentions using ""calculus"" to describe programming language constructs, suggesting the study presents or utilizes a formal mathematical framework or rigorous verification approach.",yes,"The paper explicitly examines the generic programming paradigm and its theoretical requirements, indicating it examines programming paradigm foundations or provides comparative theoretical analysis of paradigms.",yes,"The paper explicitly discusses type system design and programming language constructs, including fundamental principles like overload resolution and type constructors, indicating it investigates language design principles.",yes,"The paper appears to present a ""general approach"" to type system design and uses formal calculus for description, indicating it includes a formal theoretical foundation or mathematical framework.",yes,"While implementation is mentioned, it appears to serve theoretical purposes, discussing how language constructs can be described using calculus, indicating the study's discussion of implementation or tools serves to support broader theoretical contributions.",yes,"The focus appears to be on theoretical aspects of type systems and programming language design, rather than practical implementation details, suggesting the study contributes to theoretical understanding.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The presence of citations in the abstract suggests the full text of the paper is likely accessible, though this cannot be confirmed from the abstract alone.",Include,"The abstract demonstrates a rigorous theoretical approach to programming language design, focusing on generic programming paradigms, type systems, and formal mathematical frameworks. It presents a comprehensive examination of fundamental language constructs through calculus, emphasizing theoretical contributions to programming language principles and paradigm foundations. The study appears to provide a systematic, mathematically-grounded analysis of programming language design principles.",4.6
Deenite Clause Grammars for Lan- Guage Analysis | a Survey of the Formalism and a Comparison with Term Rewriting Although Term Rewriting Consists of Logical Components,J. Leeuwen,-,-,-,0,2007,yes,"The paper analyzes fundamental programming language constructs, particularly term rewriting and its relationship to logic programming.",maybe,"The paper appears to present a formal framework, discussing term rewriting systems and their theoretical foundations in logic programming, and the mention of ""deeper theoretical foundation"" suggests formal analysis.",yes,"The paper explicitly compares and analyzes different programming paradigms (logic programming, functional programming) and their theoretical foundations, indicating a strong focus on paradigm theory.",maybe,"The paper discusses term rewriting and programming paradigms, including functional programming principles, which addresses fundamental design principles in combining term rewriting with logic programming, even though it does not explicitly focus on orthogonality or minimality.",yes,"The paper explicitly mentions providing a ""deeper theoretical foundation"" and discusses formal aspects of term rewriting and logic programming, indicating a strong theoretical foundation.",maybe,The paper discusses implementation aspects (like Prolog implementation) but uses these to support broader theoretical contributions about programming paradigms and term rewriting.,yes,"The paper appears to focus on theoretical contributions, particularly in combining term rewriting with logic programming and analyzing programming paradigms, and while it mentions implementation aspects, these seem to support theoretical contributions.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research presents a rigorous theoretical exploration of programming paradigms, focusing on term rewriting and logic programming with a strong emphasis on formal frameworks and fundamental language constructs. By analyzing programming principles across different paradigms and providing a deeper theoretical foundation, the study contributes substantively to understanding computational design principles. The work demonstrates a sophisticated approach to examining programming language theory, balancing theoretical depth with practical implementation insights.",4.6
Extensional Semantics of Program Behaviour : Case for Support In,-,-,-,-,0,2008,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on computational effects, sequentiality, and program behavior.",yes,"The paper is heavily focused on formal mathematical frameworks, specifically game semantics and domain theory, for analyzing programming language properties. It discusses formal concepts like full abstraction and completeness.",yes,"The paper discusses different programming paradigms (sequential, imperative, concurrent) and their theoretical foundations, particularly in relation to game semantics and domain theory.",maybe,"The paper discusses fundamental principles of programming language semantics and behavior, particularly focusing on game semantics as a way to characterize programming languages. While not explicitly discussing orthogonality or minimality, it deeply engages with fundamental design principles.",yes,"The paper is fundamentally theoretical, discussing mathematical frameworks for understanding programming language semantics through game theory and domain theory.",yes,"While implementation aspects are mentioned (e.g., mutable variables), they serve to support broader theoretical contributions rather than being the focus.",yes,"The paper focuses entirely on theoretical contributions, specifically the relationship between game semantics and domain theory, and their application to understanding programming language behavior.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the academic nature and citations of the paper suggest it is likely accessible through academic channels.",Include,"This research deeply explores theoretical foundations of programming language semantics through game semantics and domain theory, presenting a rigorous mathematical framework for analyzing computational behavior across different programming paradigms. The study offers a comprehensive theoretical contribution that examines fundamental design principles, computational effects, and the relationship between intensional and extensional models of programming language behavior. Its focus on formal mathematical analysis and paradigm theory makes it a significant scholarly work in theoretical computer science.",4.9
"Voltaire: a database programming environment with a single execution model for evaluating queries, satisfying constraints and computing functions",Sunit K. Gala,-,-,-,1,1992,yes,"The paper analyzes fundamental language constructs, including set expressions, functions, constraints, type systems, and semantics.",yes,"The paper presents strong evidence of formal frameworks, including denotational semantics, type algebra, extensional semantics for behavior, and formal treatment of constraints and functions.",yes,"The paper examines the intersection of set-oriented and imperative paradigms, providing comparative analysis of how these paradigms can be combined.",maybe,"The paper discusses language design principles, particularly orthogonality in its modular but additive approach to language definition, though it does not explicitly focus on minimality.",yes,"The paper has a clear theoretical foundation, including formal semantics definition, type algebra framework, and mathematical treatment of constraints and functions.",maybe,"The implementation aspects (compiler, optimization) serve to support the theoretical contributions rather than being the primary focus.",yes,"The paper makes a strong theoretical contribution, including a novel language design combining paradigms, formal semantics development, and a theoretical framework for constraints and functions.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it appears to be a thesis.",Include,"The research presents a comprehensive theoretical exploration of a programming language, demonstrating strong formal frameworks, paradigm theory, and fundamental analysis of language constructs. By developing a novel set-oriented, imperative database programming language with rigorous mathematical foundations, the study contributes significantly to theoretical understanding of programming language design. The work integrates formal semantics, type algebra, and constraint theory while maintaining a balanced approach between theoretical depth and practical implementation considerations.",4.6
The epistemology of programming language paradigms,"F. Gobbo, M. Benini",-,-,-,0,2013,yes,"The paper analyzes fundamental programming language constructs and paradigms at a theoretical level, examining how different paradigms can simulate each other's constructions, meeting the fundamental analysis criterion.",yes,"The paper uses ""the method of levels of abstraction by Floridi (2008)"" as a formal analytical framework, meeting the formal framework criterion.",yes,"The paper explicitly examines four programming paradigms (procedural, functional, object-oriented, and logic-based) and provides comparative theoretical analysis, strongly meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles by analyzing different programming paradigms and their relationships, particularly focusing on how different languages can simulate each other's constructions, meeting the language design principles criterion.",yes,"The paper has a clear theoretical foundation, building on B√∂hm & Jacopini's structured program theorem and using Floridi's method of levels of abstraction, strongly meeting the theoretical foundation criterion.",yes,"The paper appears to focus on theoretical aspects rather than implementation details, meeting the implementation focus criterion.",yes,"The paper focuses on theoretical understanding of programming paradigms and their relationships, rather than practical aspects, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The study presents a rigorous theoretical analysis of programming language paradigms, utilizing a formal methodological framework to examine fundamental design principles across procedural, functional, object-oriented, and logic-based programming approaches. By exploring epistemological commitments and levels of abstraction, the research provides a comprehensive theoretical investigation of programming language constructs and their inter-relationships. The work demonstrates strong alignment with theoretical research criteria, focusing on fundamental computational principles rather than practical implementation details.",4.6
1 Self-composable Programming A Programming Paradigm for Constructing Reusable Software Patterns,Hiun Heinai,-,-,-,0,-,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on behavior modeling and abstraction.",maybe,"While the paper presents a theoretical framework (Self-composable Programming), it is not clear if it includes formal mathematical verification. The approach seems more conceptual than formally rigorous.",yes,"The paper examines programming paradigm foundations, comparing Self-composable Programming with AOP and discussing its relationship to Object-oriented Programming.",yes,"The paper discusses fundamental design principles through Self-composable Programming, including concepts of abstraction and inheritance, though it does not explicitly address orthogonality or minimality.",maybe,"The paper has a theoretical foundation in programming paradigms and behavior modeling, but it is not clear if this is supported by formal mathematical frameworks.",yes,"The implementation discussion appears to support theoretical contributions rather than being the sole focus, as evidenced by the balance between theoretical framework and practical evaluation.",yes,"The paper makes theoretical contributions to understanding behavior modeling and software modularity, though it also includes practical implementation aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it is classified under ACM CCS, though this cannot be determined from the abstract alone.",Exclude,"The research presents a novel programming paradigm with strong theoretical foundations, examining fundamental language design principles through Self-composable Programming. While demonstrating robust theoretical contributions and paradigm analysis, the study exhibits some limitations in formal mathematical rigor and comprehensive theoretical framework. The work balances theoretical insights with practical implementation, offering a nuanced approach to software modularity and behavior modeling.",4.3
The design and implementation of object-constraint programming,T. Felgentreff,-,-,-,0,2017,yes,"The paper analyzes fundamental programming language constructs, particularly focusing on how constraints and object-oriented programming can be unified at a theoretical level.",yes,"The abstract mentions ""executable semantics"" and discusses formal integration of constraint programming with object-oriented programming, suggesting a rigorous mathematical framework.",yes,"The paper explicitly examines the theoretical foundations of both constraint and imperative programming paradigms, analyzing their integration and comparative aspects.",yes,"The paper explicitly discusses language design principles, particularly focusing on unifying constructs for encapsulation and abstraction across paradigms. The Babelsberg language design is central to the paper.",yes,"The paper presents a formal theoretical foundation for integrating constraint programming with object-oriented programming, including semantics and implementation strategies.",yes,"The implementation discussion serves to support the theoretical contributions, with three concrete implementations demonstrating the feasibility of the theoretical framework.",yes,"While the paper includes implementation aspects, its primary focus is on theoretical contributions to programming language design and paradigm integration.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The detailed nature of the abstract suggests this is likely a formal academic paper that would be accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"The research presents a comprehensive theoretical exploration of programming language design, focusing on integrating constraint and object-oriented programming paradigms through a novel language framework called Babelsberg. By providing a rigorous mathematical approach to unifying programming constructs, the study offers significant theoretical contributions to understanding fundamental language principles and paradigm interactions. The work demonstrates a sophisticated analysis of computational primitives, language design principles, and theoretical foundations across multiple programming paradigms.",4.9
Towards a semiotic framework for programming languages,"Valle Andrea, Mazzei Alessandro",-,-,-,0,2013,yes,The paper shows strong evidence of fundamental analysis through its examination of basic programming language constructs and paradigms at a theoretical level.,maybe,"The abstract mentions a ""semiotic framework"" and discusses theoretical analysis of programming paradigms, suggesting some formal framework, though it's not explicitly mathematical.",yes,"The abstract explicitly mentions analyzing ""imperative, functional and object-oriented paradigms"" through a theoretical lens, indicating a strong focus on paradigm theory.",maybe,"The abstract discusses fundamental aspects of programming languages and their design, particularly regarding expressiveness and paradigm differences. While not explicitly mentioning orthogonality or minimality, it addresses fundamental design principles through the lens of semiotics and expressiveness.",yes,The paper shows strong evidence of theoretical foundation through its semiotic analysis and discussion of fundamental properties like Turing-completeness and paradigm analysis.,yes,"The paper appears to maintain a theoretical focus, with no indication of implementation being the primary concern.",yes,"The paper appears to focus on theoretical understanding, examining fundamental relationships between programming languages and their expressive capabilities, rather than practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract demonstrates a robust theoretical exploration of programming language paradigms, examining fundamental design principles through a semiotic lens and analyzing computational expressiveness across different programming approaches. Its strong focus on theoretical foundations, paradigm theory, and fundamental analysis of programming language constructs aligns closely with the screening criteria, though with some uncertainty regarding explicit mathematical formalism. The research appears to contribute substantively to understanding the theoretical underpinnings of programming language design and expressiveness.",4.6
Towards ASM Engineering and Modelling,"B. Thalheim, P. Schmidt",-,-,-,0,2007,yes,The paper analyzes fundamental computational primitives and modeling constructs at a theoretical level through ASMs.,yes,"The paper explicitly discusses formal mathematical frameworks, particularly ASMs as a foundation for computation processes and their formal properties.",yes,"The paper examines programming paradigms, discussing ""programming in the small,"" ""programming in the large,"" and ""programming in the world,"" providing comparative theoretical analysis.",maybe,"The paper discusses fundamental design principles through the lens of Abstract State Machines (ASMs), including structuring, evolution, collaboration, and abstraction, but does not specifically address orthogonality or minimality.",yes,The paper presents ASMs as a theoretical foundation for computation and discusses formal properties and principles of modeling.,maybe,"The paper balances theoretical and practical aspects, with implementation considerations serving to support broader theoretical contributions.",yes,"The paper appears to focus on theoretical contributions, particularly in developing principles and approaches for ASM specification and modeling theory.",yes,"The paper is written in English, meeting the language requirement.",maybe,"The paper appears to be an academic publication, suggesting likely accessibility of the full text.",Include,"The research presents a comprehensive theoretical exploration of Abstract State Machines (ASMs) as a foundational computational framework, addressing fundamental design principles, programming paradigms, and formal mathematical modeling approaches. By examining computational processes through a rigorous theoretical lens, the study contributes significant insights into programming language foundations, paradigm theory, and systematic software engineering methodologies. The work demonstrates a strong focus on theoretical contributions, analyzing computational primitives and modeling constructs at a sophisticated mathematical level.",4.6
"Proceedings of the Eleventh International Workshop on Developments in Computational Models, DCM 2015, Cali, Colombia, October 28, 2015","C. Mu√±oz, Jorge A. P√©rez",10.4204/EPTCS.204,https://doi.org/10.4204/EPTCS.204,-,0,2016,maybe,"The mention of ""abstract models of computation"" and ""new computational models"" suggests fundamental analysis is present.",maybe,"The abstract mentions ""abstract models of computation"" and ""theoretical aspects,"" suggesting formal frameworks may be present, but does not explicitly confirm this.",yes,"The abstract explicitly mentions ""new paradigms of software development"" and computational models, indicating paradigm theory is covered.",maybe,"The abstract mentions ""new families of programming languages"" and ""new paradigms of software development,"" suggesting language design principles are discussed, but does not specifically mention orthogonality or minimality.",maybe,"The focus on ""theoretical aspects"" and ""abstract models of computation"" suggests theoretical foundations are likely present.",yes,"The abstract emphasizes theoretical aspects over implementation, suggesting appropriate focus.",yes,"The workshop's focus on ""new computational models"" and theoretical aspects suggests theoretical contributions are central, rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract indicates that the paper is likely accessible through academic channels, but this cannot be confirmed from the abstract alone.",Exclude,"The workshop proceedings demonstrate strong alignment with theoretical programming language research, focusing on computational models, paradigms, and theoretical foundations. Multiple screening criteria are met, including language design principles, paradigm theory, and theoretical contributions, though some uncertainty exists regarding specific implementation details and formal frameworks. The abstract suggests a rigorous academic exploration of programming language development at a fundamental theoretical level.",4.3
CCS Programming in an ML Framework: An Account of LCS,B. Berthomieu,10.1007/978-1-4612-2274-3_4,https://doi.org/10.1007/978-1-4612-2274-3_4,-,0,1997,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including concurrency primitives, communication mechanisms, and type systems for concurrent programming.",yes,"The paper presents multiple formal frameworks, including a higher-order extension of CCS formalism, operational semantics using observation relations, labeled transition systems, and a formal type system with behavior types.",yes,"The paper explicitly examines behavioral paradigms (CSP and CCS) and their integration with functional programming (SML), providing comparative theoretical analysis.",yes,"The paper explicitly discusses language design principles, including orthogonality (layered design) and fundamental principles of concurrency and communication. The extension of SML with CCS formalism shows careful consideration of language design principles.",yes,"The paper has a solid theoretical foundation, including formal type theory (behavior types, polymorphic typing), operational semantics, and a mathematical framework for concurrency and communication.",yes,"While implementation is discussed, it clearly serves to support theoretical contributions rather than being the primary focus. The implementation model is derived from the theoretical framework.",yes,"The paper's primary focus is theoretical, contributing to new type theory (behavior types), formal semantics, and the theoretical foundations of concurrent programming.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language design, focusing on formal frameworks for concurrency and communication through a novel extension of Standard ML with CCS formalism. The study provides a comprehensive theoretical foundation, examining fundamental programming paradigms, type systems, and operational semantics while maintaining a strong emphasis on mathematical and computational principles. Its contributions span language design principles, theoretical foundations, and formal analysis of programming language constructs.",4.9
Design of Core Calculus for Implicit Programming,"Wonchan Lee, K. Yi",-,-,-,0,2012,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including type systems, operational semantics, and implicit programming mechanisms.",yes,"The paper presents a rigorous formal framework, including a ""core calculus,"" ""operational semantics,"" ""polymorphic type system,"" and ""type soundness.""",yes,"The paper explicitly examines programming paradigms, specifically implicit programming, and provides comparative analysis with existing implementations (Haskell type classes and C++ templates).",yes,"The paper explicitly focuses on language design principles, specifically addressing implicit programming paradigm design and its limitations in existing languages.",yes,The paper presents a formal theoretical foundation through its core calculus and includes mathematical concepts like System F and type systems.,yes,"While implementation aspects are discussed (type-directed translation), they serve to support the theoretical contributions rather than being the primary focus.",yes,"The paper focuses on theoretical contributions through its core calculus and formal analysis, rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature and academic style of the paper suggest it is likely a formal publication that would be accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"A rigorous theoretical investigation of programming language design principles, focusing on implicit programming paradigms through a formal mathematical framework. The study presents a core calculus with operational semantics, type systems, and theoretical foundations that analyze fundamental language constructs and paradigm limitations. Comprehensive theoretical contributions are supported by a systematic approach to understanding programming language design at a fundamental level.",4.9
"MELD: A Multi-Paradigm Language with Objects, Dataflow and Modules","Gail E Kaiser, D. Garlan",10.7916/D8CN7BS3,https://doi.org/10.7916/D8CN7BS3,-,0,1987,yes,"The paper analyzes fundamental programming language constructs, particularly around reusability and paradigm integration.",maybe,"While the paper discusses language design, it's not clear from the abstract whether it presents a formal mathematical framework. The focus seems more on practical design principles.",yes,"The paper explicitly examines multiple programming paradigms (declarative, object-oriented) and their combination, meeting this criterion.",yes,"The paper discusses fundamental design principles in programming languages, particularly focusing on reusability and language independence. It explicitly addresses design principles for combining different programming paradigms.",maybe,"The paper appears to have some theoretical foundation in its analysis of reusability approaches, but it's not explicitly clear if this is formalized mathematically.",yes,The discussion of implementation aspects (like component composition) appears to serve theoretical contributions about language design.,yes,"The paper appears to make theoretical contributions to understanding reusability and language design, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The abstract appears to be from a technical report (CUCS-281-87), but it's not clear from the abstract alone whether the full text is accessible.",Exclude,"The technical report explores fundamental programming language design principles, particularly focusing on reusability and multi-paradigm integration across declarative and object-oriented approaches. While demonstrating strong theoretical contributions in language design and paradigm analysis, the study exhibits some uncertainty regarding formal mathematical frameworks and full-text accessibility. The research provides insights into language independence, component composition, and flexibility in software system development.",4
Inheritance of specifications in the calculus of functional objects (preliminary report),O. Ry≈°av√Ω,-,-,-,0,2006,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly focusing on object types and their formal specification.",yes,"The paper clearly presents a formal mathematical framework, including type theory, logical propositions, and a new calculus. It discusses existential and recursive types, showing strong formal foundations.",yes,"The paper explicitly examines programming paradigm foundations, specifically the theoretical foundations of object-oriented programming in relation to functional and imperative paradigms.",yes,"The paper discusses fundamental design principles of object-oriented programming, including inheritance, late binding, and encapsulation. It presents a new calculus for object types, indicating strong alignment with this criterion.",yes,"The paper has a strong theoretical foundation, building on type theory and formal methods. It presents a mathematical framework for object types and their specifications.",yes,"The paper appears to focus on theoretical contributions rather than implementation details. While it mentions ""implementation,"" this is in the context of formal proofs and correctness.",yes,"The paper makes clear theoretical contributions, focusing on developing a formal foundation for object-oriented programming rather than practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, but this is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of object-oriented programming paradigms, developing a novel calculus that formally examines type theory, inheritance, and computational primitives. The study offers a sophisticated mathematical framework for understanding programming language foundations, with a strong emphasis on theoretical contributions and formal analysis of computational constructs. By introducing a new approach to object type specification and logical propositions, the work significantly advances theoretical understanding of programming language design principles.",4.9
D Datalog and Recursion,-,-,-,-,0,-,yes,"There is strong evidence of fundamental analysis of programming language constructs, particularly in query languages, recursion, and negation, meeting the fundamental analysis criterion.",yes,"The abstract indicates formal mathematical treatment through ""fundamentally operational terms"" and ""fixpoint semantics,"" and the discussion of formal semantics and theoretical foundations is explicit, meeting the formal framework criterion.",yes,"The paper explicitly compares and analyzes three programming paradigms (algebraic, logic, and deductive) and their theoretical foundations, meeting the paradigm theory criterion.",yes,"The paper discusses fundamental design principles of query languages, including the systematic enrichment of conjunctive queries with union, difference, and recursion, meeting the language design principles criterion.",yes,"There is strong evidence of theoretical foundation through formal semantics, mathematical frameworks for recursion and negation, and theoretical analysis across three paradigms (algebraic, logic, and deductive), meeting the theoretical foundation criterion.",yes,"The paper discusses implementation aspects (evaluation techniques, optimization) but primarily in service of theoretical understanding, meeting the implementation focus criterion.",yes,"The paper clearly focuses on theoretical contributions, including formal semantics, theoretical foundations, and fundamental analysis of query languages, while practical aspects serve theoretical understanding, meeting the theoretical contribution criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The detailed nature of the paper suggests it is likely from a book or academic publication that would be accessible, though this cannot be determined from the abstract alone.",Include,"This comprehensive theoretical work explores programming language paradigms through a rigorous examination of query languages, recursion, and negation across algebraic, logic, and deductive frameworks. The study presents a formal mathematical approach to understanding fundamental language constructs, with a strong emphasis on theoretical foundations, semantic analysis, and comparative paradigm theory. Its systematic investigation of language design principles and computational primitives demonstrates a deep theoretical contribution to programming language research.",4.9
An inquiry into trans-paradigmatic genericity,R. L√§mmel,-,-,-,0,2002,yes,"The paper analyzes fundamental programming concepts (strategies as first-class citizens, data processing actions) at a theoretical level.",maybe,"The abstract mentions providing a ""general definition"" of strategic programming, but it is unclear whether this is a formal or mathematical framework.",yes,"The paper explicitly discusses programming paradigms and how strategic programming can be realized across different paradigms, showing a strong match with this criterion.",maybe,"The paper discusses strategic programming as a generic programming idiom, which relates to fundamental design principles, but it does not explicitly address orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation in its definition of strategic programming, but the level of formality is not clear from the abstract.",yes,"The paper seems to balance theoretical and practical aspects, discussing both the theoretical framework and its implementation across paradigms.",yes,"The paper appears to make theoretical contributions by defining strategic programming and analyzing its realization across paradigms, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"Strategic programming research demonstrates strong theoretical foundations by exploring programming paradigms and fundamental computational constructs across different language frameworks. The study provides a comprehensive analysis of generic programming principles, focusing on theoretical contributions that examine programming language design and computational strategies. While some uncertainty exists regarding the formal mathematical framework, the research clearly addresses fundamental programming language principles and paradigm theory.",4.3
Structural Operational Semantics as a Basis for Formal Methods,"P. Degano, C. Priami",-,-,-,0,1996,yes,"The paper analyzes fundamental programming language constructs through the lens of SOS and discusses computational primitives at a theoretical level, meeting this criterion.",yes,"The paper is centrally focused on structural operational semantics as a formal mathematical framework for analyzing programming language properties, strongly meeting this criterion.",yes,"The paper explicitly mentions that SOS can handle ""virtually all paradigms (imperative, functional, logic, object-oriented, etc.)"" and discusses their integration, meeting this criterion.",maybe,"The paper discusses structural operational semantics (SOS) and its application to programming languages, which relates to fundamental design principles, though it does not explicitly focus on orthogonality or minimality.",yes,"The paper discusses the mathematical foundations of SOS and its application to formal verification and specification, clearly meeting this criterion.",yes,"While implementation is discussed, it is clearly in service of theoretical contributions, particularly regarding formal verification and specification, meeting this criterion.",yes,"The paper focuses on theoretical aspects of SOS and its application to formal methods, rather than practical implementation details, strongly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, given its age and academic nature, though this cannot be determined from the abstract alone.",Include,"The paper demonstrates strong alignment with theoretical programming language research, presenting a comprehensive exploration of structural operational semantics across multiple programming paradigms. Its rigorous mathematical framework, focus on formal methods, and theoretical contributions to understanding programming language properties make it a highly relevant candidate for systematic review. The study's depth in analyzing computational primitives and its ability to integrate diverse programming paradigms further underscore its theoretical significance.",4.9
Multi-Views Formal Specifications : A General Frame,Fabrice Barbier,-,-,-,0,-,yes,"The paper analyzes fundamental constructs of specification languages at a theoretical level, particularly focusing on the combination and integration of different aspects, meeting this criterion.",yes,"The paper explicitly aims to ""propose a logic for mixed specifications"" and discusses formal semantics, verification, and theoretical frameworks, indicating a strong match with this criterion.",yes,"The paper examines different specification paradigms and their integration, discussing both homogeneous and heterogeneous approaches to mixed specifications, indicating a match with this criterion.",maybe,"The paper discusses mixed specification languages and their theoretical foundations, but does not explicitly focus on orthogonality or minimality as primary design principles. However, it does mention orthogonality in the context of system aspects.",yes,"The paper focuses on developing a formal theoretical foundation for mixed specification languages, including denotational semantics and formal verification approaches, meeting this criterion.",yes,"The paper appropriately balances theoretical and implementation aspects, using implementation considerations to support theoretical contributions rather than focusing solely on practical aspects, meeting this criterion.",yes,"The paper's primary focus is on theoretical contributions, specifically developing a formal framework for mixed specifications rather than practical applications, meeting this criterion.",yes,"The paper is written in English, meeting the language requirement.",maybe,"The academic nature of the paper suggests it is likely accessible through proper channels, but this cannot be determined from the abstract alone.",Include,"The research presents a rigorous theoretical framework for mixed specification languages, focusing on formal semantics, verification approaches, and the integration of different system aspects. Its strong emphasis on theoretical foundations, paradigm analysis, and mathematical frameworks demonstrates a comprehensive approach to understanding programming language design principles. The study's primary contribution lies in developing a logic for mixed specifications that enables high-level reasoning about system properties without targeting specific implementation models.",4.6
Abacus as a Programming Language: Computer Science and History of Mathematics,Baptiste M√™les,10.1007/978-3-319-31502-7_3,https://doi.org/10.1007/978-3-319-31502-7_3,-,0,2016,yes,"The paper analyzes fundamental programming concepts (currying, semantics) at a theoretical level, meeting this criterion.",maybe,"The abstract mentions ""abstract concepts"" and ""semantics of programming languages"" but does not explicitly indicate a formal mathematical framework. There is some uncertainty about whether this criterion is met.",yes,"The paper explicitly examines programming paradigms (imperative and functional) and provides comparative analysis, strongly meeting this criterion.",maybe,"The paper discusses programming paradigms and their correspondence with historical computing tools, but does not explicitly address orthogonality or minimality. It partially meets this criterion.",maybe,"The paper appears to have a theoretical foundation in comparing programming paradigms with historical computing tools, but the level of mathematical rigor is not clear from the abstract.",yes,"The paper discusses historical implementations (abacus, counting rods) but uses these to support theoretical understanding of programming paradigms, meeting this criterion.",yes,"The paper appears to make theoretical contributions by establishing correspondences between historical computing tools and modern programming paradigms, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The research explores programming paradigms through a theoretical lens, examining the correspondence between historical computing tools and modern programming concepts. By analyzing fundamental programming constructs like currying and semantics, the study provides a comparative theoretical approach that bridges historical computational practices with contemporary programming principles. The work demonstrates strong theoretical contributions in understanding programming paradigms, with particular emphasis on functional and imperative programming styles.",4.3
Institution-independent logic programming,Ionut Tutu,-,-,-,0,2015,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including logic programs, clauses, and queries.",yes,"The paper presents a ""model-theoretic framework"" and uses formal mathematical concepts like Goguen and Burstall's theory of institutions, discussing formal properties and theorems.",yes,"The paper explicitly examines the logic programming paradigm, comparing different variants and providing theoretical analysis across different logical systems.",yes,"The paper examines fundamental design principles of logic programming languages, including their declarative and operational aspects, and how these principles are integrated across different variants of the paradigm.",yes,"The paper is heavily theoretical, developing abstract mathematical frameworks and formalizing concepts like logic programs, clauses, and queries.",maybe,"The paper appears to focus on theoretical aspects rather than implementation details, though it does discuss operational semantics in a theoretical context.",yes,"The paper makes clear theoretical contributions, focusing on abstract models and formal properties rather than practical implementations.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper may be accessible through academic channels, as it is a thesis, though this cannot be determined from the abstract alone.",Include,"This thesis presents a rigorous theoretical exploration of logic programming paradigms, offering a comprehensive formal framework that examines fundamental design principles across different logical systems. By developing an abstract model-theoretic approach and investigating core computational constructs, the research provides a sophisticated mathematical analysis of programming language foundations. The study's strong theoretical orientation, coupled with its systematic examination of paradigmatic principles, demonstrates a deep scholarly contribution to understanding computational logic.",4.9
PROGRAMMING PARADIGMS IN HIGHER EDUCATION,"L. Gorodnyaya, T. Andreyeva",10.31144/BNCC.CS.2542-1972.2015.N38.P67-90,https://doi.org/10.31144/BNCC.CS.2542-1972.2015.N38.P67-90,-,0,2015,maybe,"The focus on programming paradigms and formal definition suggests the study analyzes fundamental programming language constructs or computational primitives at a theoretical level, though specific constructs are not mentioned.",yes,"The abstract explicitly mentions ""formal definition"" of programming paradigms, indicating the study presents or utilizes a formal mathematical framework.",yes,"The paper explicitly focuses on ""analysis, comparison and formal definition of programming paradigms"", meeting the paradigm theory criterion.",maybe,"The abstract mentions ""formal definition of programming paradigms"", suggesting the study investigates fundamental design principles, though specifics about orthogonality or minimality are not mentioned.",maybe,"The focus on ""formal definition"" and ""methods of analysis"" suggests the study includes a formal theoretical foundation, though the depth is not clear from the abstract.",yes,"The abstract does not mention implementation details, suggesting a theoretical rather than practical focus.",yes,"The abstract suggests a theoretical focus on paradigm analysis rather than practical aspects, indicating the study contributes to theoretical understanding.",yes,"The abstract is written in English, meeting the publication language criterion.",maybe,The abstract does not provide enough information to determine the full-text accessibility of the paper.,Exclude,"The abstract demonstrates a strong theoretical orientation towards programming paradigms, with explicit focus on formal definition and comparative analysis. It meets multiple screening criteria related to theoretical foundations, paradigm theory, and fundamental language design principles, though the brevity of the text creates some uncertainty about the depth of formal framework and specific theoretical contributions.",4.3
"A Study on a Single Construct for Events, Aspects, and Behaviors","Yungyu Zhuang, Shigeru Chiba",-,-,-,0,2014,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly in how different paradigms can be supported through language design.",maybe,"While the paper presents a theoretical analysis of programming paradigms, it is not clear from the abstract whether it uses formal mathematical frameworks or rigorous verification approaches.",yes,"The paper strongly meets this criterion, as it explicitly examines multiple programming paradigms (OOP, event-handler, aspect-oriented) and their theoretical foundations.",yes,"The paper directly addresses language design principles, particularly focusing on how to support programming paradigms through different approaches (design patterns, dedicated constructs, and generic constructs).",yes,"The paper appears to have a theoretical foundation, analyzing the common ground among different paradigms and proposing a new theoretical construct (method slots).",yes,"While the paper includes implementation (DominoJ language and compiler), this appears to serve the theoretical contribution rather than being the primary focus.",yes,"The paper makes a theoretical contribution by identifying common ground among paradigms and proposing a new theoretical construct (method slots), rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The abstract indicates that the paper is from a thesis, but it is not clear from the abstract alone whether the full text is accessible.",Include,"The research presents a comprehensive theoretical exploration of programming paradigms, focusing on language design principles and proposing a novel generic construct called method slots. By analyzing the common ground among object-oriented, event-handler, and aspect-oriented programming paradigms, the study offers a rigorous theoretical contribution to understanding programming language foundations. The work demonstrates strong alignment with theoretical research criteria, particularly in examining fundamental programming language constructs and paradigm theory.",4.6
Under Consideration for Publication in Theory and Practice of Logic Programming Integration of Declarative and Constraint Programming,"P. Hofstedt, Peter Pepper",-,-,-,0,2006,yes,"The paper analyzes fundamental aspects of programming paradigms and their integration, meeting this criterion.",maybe,"The abstract mentions studying ""syntactic, semantic and operational impacts,"" suggesting a formal analytical approach, though the specific mathematical framework is not detailed.",yes,"The paper explicitly focuses on ""integrating different language paradigms"" and specifically mentions declarative and constraint programming paradigms, strongly meeting this criterion.",maybe,"The paper discusses integrating different language paradigms into a unified framework, which relates to fundamental design principles, though it does not explicitly mention orthogonality or minimality.",maybe,"The paper appears to have a theoretical foundation in studying the integration of programming paradigms and constraint solvers, though the depth of the mathematical framework is not clear from the abstract.",yes,"The abstract suggests the focus is on theoretical integration rather than implementation details, meeting this criterion.",yes,"The paper appears to make theoretical contributions by studying the fundamental integration of paradigms, rather than focusing on practical aspects.",yes,"The paper is written in English, meeting this criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The research demonstrates a strong theoretical approach to integrating programming paradigms, with a focus on fundamental language design principles and paradigm theory. By examining the syntactic, semantic, and operational impacts of combining different programming approaches, the study offers a rigorous exploration of computational frameworks that transcends practical implementation details. The work's emphasis on theoretical contribution and fundamental analysis of programming paradigms suggests significant scholarly potential.",4.6
Proceedings of the 7th ACM SIGPLAN international conference on Principles and practice of declarative programming,"P. Barahona, A. Felty",-,-,-,0,2005,yes,"The abstract suggests the study analyzes fundamental programming language constructs through its focus on ""logical formalisms"" and the ""programming-as-proof-search framework.""",yes,"The abstract provides strong evidence of the use of formal frameworks, mentioning ""logical formalisms,"" ""logic-based principles,"" and the ""programming-as-proof-search framework.""",yes,"The abstract indicates a strong focus on programming paradigms, specifically mentioning ""logic, constraint, and functional programming paradigms"" and their comparative analysis.",yes,"The abstract indicates a focus on ""logical formalisms and methods for specifying, performing, and analyzing computations"" and mentions design principles in declarative programming paradigms, suggesting the study investigates language design principles.",yes,"The abstract emphasizes a clear theoretical focus, with mentions of ""logical formalisms,"" ""logic-based principles,"" and formal analysis methods, indicating the study includes a formal theoretical foundation.",yes,"While implementation is mentioned, the abstract indicates it is in service of theoretical contributions, particularly regarding ""improved implementation methods"" for formal frameworks.",yes,"The abstract emphasizes theoretical aspects, including formal methods, logical principles, and theoretical foundations, rather than practical implementations, suggesting the study contributes to theoretical understanding.",yes,"The paper is written in English, as the abstract is in English and it appears to be an English language conference proceedings.",maybe,"While the abstract does not explicitly confirm full-text accessibility, I notes that as this is a conference proceedings from a major ACM symposium, it is likely accessible through academic libraries or the ACM digital library.",Include,"This conference proceedings demonstrates strong alignment with theoretical programming language research, focusing on formal frameworks, logical principles, and paradigm analysis across declarative programming domains. The abstract reveals a rigorous approach to investigating programming language foundations, emphasizing theoretical contributions and mathematical frameworks in logic, constraint, and functional programming paradigms. Multiple screening criteria are met, indicating high relevance to systematic review of theoretical programming language research.",4.6
Purely functional programming and the object-oriented inheritance,"C. L., G. L√É¬©gr√É¬°di",-,-,-,0,2002,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, including type systems, polymorphism, and inheritance mechanisms, strongly meeting this criterion.",yes,"The paper uses Fœâ‚â§ (higher-order, explicitly-typed, polymorphic Œª-calculus with subtyping) as a formal mathematical framework for analyzing programming language properties, clearly meeting this criterion.",yes,"The paper directly examines the theoretical foundations of both functional and object-oriented programming paradigms and their integration, including fundamental concepts like encapsulation, message passing, and inheritance, providing an excellent match for this criterion.",yes,"The paper explicitly discusses fundamental design principles by introducing functional paradigm principles into object-oriented programming, including pure values, first-class functions, and storage management, strongly meeting this criterion.",yes,"The paper is built on formal theoretical foundations, specifically the Œª-calculus and type theory, to support its claims about combining functional and object-oriented paradigms, strongly meeting this criterion.",yes,"The paper appears to maintain a theoretical focus, with any implementation discussion serving to support the theoretical contributions rather than being the primary focus, meeting this criterion.",yes,"The paper focuses on theoretical contributions rather than practical implementations, specifically addressing the theoretical integration of functional and object-oriented paradigms, clearly meeting this criterion.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"This research presents a rigorous theoretical exploration of programming language paradigms, utilizing formal mathematical frameworks like Œª-calculus to investigate the integration of functional and object-oriented programming principles. The study focuses on fundamental design principles, type systems, and paradigm foundations, offering a deep theoretical analysis of computational constructs and their underlying mathematical structures. By examining polymorphism, inheritance, and type theory, the work contributes significantly to understanding programming language design at a theoretical level.",4.9
Proceedings Workshop on Generic Programming (WGP2000),J. Jeuring,-,-,-,0,2000,yes,"The abstract indicates analysis of fundamental programming constructs, particularly around generic programming and polymorphism, meeting this criterion.",yes,"The abstract mentions ""theory of datatypes"" and ""theory about generic programs,"" suggesting that the study presents or utilizes a formal mathematical framework or rigorous verification approach for analyzing programming language properties.",yes,"The abstract explicitly mentions programming paradigms as parameters in generic programming and discusses different interpretations of generic programming, indicating that the research examines programming paradigm foundations or provides comparative theoretical analysis of paradigms.",yes,"The abstract discusses generic programming principles and polymorphism, which are fundamental design principles in programming languages, meeting this criterion.",yes,"The paper appears to have a strong theoretical foundation, discussing formal approaches to generic programming and theoretical frameworks around Bird-Meertens style programming, meeting this criterion.",yes,"While implementations are mentioned (C++ STL), they appear to serve as examples supporting theoretical contributions rather than being the primary focus, meeting this criterion.",yes,"The focus of the paper appears to be on theoretical aspects of generic programming rather than practical implementations, suggesting that the study contributes to theoretical understanding rather than focusing exclusively on practical patterns, optimization, or educational aspects.",yes,"The paper is written in English, which meets the publication language criterion.",maybe,"The abstract indicates that the paper is a workshop proceedings introduction, and while it is likely accessible, the full-text accessibility cannot be definitively determined from the abstract alone.",Include,"The workshop proceedings introduction demonstrates strong alignment with theoretical programming language research, particularly in generic programming principles, paradigm theory, and formal frameworks. Multiple screening criteria are met, including language design principles, theoretical foundations, and fundamental analysis of programming constructs. While some uncertainty exists regarding full-text accessibility, the abstract suggests a rigorous theoretical approach to programming language research.",4.6
Proceedings of the 7th ACM SIGPLAN international conference on Principles and practice of declarative programming,-,10.1145/1069774,https://doi.org/10.1145/1069774,-,0,2005,yes,"The abstract suggests the study analyzes fundamental programming language constructs through its focus on ""logical formalisms"" and the ""programming-as-proof-search framework.""",yes,"The abstract provides strong evidence of the use of formal frameworks, mentioning ""logical formalisms,"" ""logic-based principles,"" and the ""programming-as-proof-search framework.""",yes,"The abstract indicates a strong focus on programming paradigms, specifically mentioning ""logic, constraint, and functional programming paradigms"" and their comparative analysis.",yes,"The abstract indicates a focus on ""logical formalisms and methods for specifying, performing, and analyzing computations"" and mentions design principles in declarative programming paradigms, suggesting the study investigates language design principles.",yes,"The abstract emphasizes a clear theoretical focus, with mentions of ""logical formalisms,"" ""logic-based principles,"" and formal analysis methods, indicating the study includes a formal theoretical foundation.",yes,"While implementation is mentioned, the abstract indicates it is in service of theoretical contributions, particularly regarding ""improved implementation methods"" for formal frameworks.",yes,"The abstract emphasizes theoretical aspects, including formal methods, logical principles, and theoretical foundations, rather than practical implementations, suggesting the study contributes to theoretical understanding.",yes,"The paper is written in English, as the abstract is in English and it appears to be an English language conference proceedings.",maybe,"While the abstract does not explicitly confirm full-text accessibility, I notes that as this is a conference proceedings from a major ACM symposium, it is likely accessible through academic libraries or the ACM digital library.",Include,"This conference proceedings demonstrates strong alignment with theoretical programming language research, focusing on formal frameworks, logical principles, and paradigm analysis across declarative programming domains. The abstract reveals a rigorous approach to investigating programming language foundations, emphasizing theoretical contributions and mathematical frameworks in logic, constraint, and functional programming paradigms. Multiple screening criteria are met, indicating high relevance to systematic review of theoretical programming language research.",4.6
The Multi-Paradigm Synchronous,"ProgrammingLanguage LEALeszek Holenderski, A. Poign, Schloss Birlinghoven",-,-,-,0,1998,maybe,"The paper appears to analyze fundamental language constructs through the lens of Boolean automata, though the depth of analysis is not fully clear.",yes,"The paper presents Boolean automata as a formal intermediate format, suggesting a formal mathematical framework for analysis.",yes,"The paper explicitly deals with multiple programming paradigms (Lustre, Esterel, Argos) and their combination, strongly meeting this criterion.",maybe,"The paper discusses translation rules between programming languages, which relates to language design principles, though it does not explicitly mention orthogonality or minimality.",maybe,"The use of Boolean automata as a common intermediate format implies a theoretical foundation, though the depth is not clear from the abstract.",yes,"The abstract suggests the work is primarily theoretical, focusing on translation rules rather than implementation details.",yes,The focus on uniform translation rules and theoretical combination of paradigms suggests theoretical contribution rather than purely practical work.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Exclude,"The study presents a theoretical approach to translating synchronous programming languages into a common Boolean automata format, demonstrating strong alignment with programming paradigm theory and formal framework criteria. By focusing on uniform translation rules across multiple languages, the research contributes to theoretical understanding of programming language design and computational paradigms. The work appears to meet most screening criteria, particularly in its theoretical approach to language analysis and paradigm combination.",4.3
Types and operations (version 3),S. Ambroszkiewicz,-,-,-,0,2015,yes,"The paper provides a clear analysis of fundamental constructs through the examination of basic concepts of type and function, higher-order functionals, and computational primitives.",yes,"The paper presents a formal mathematical framework through the construction of operations and types as concrete finite structures, parameterization by natural numbers, discussion of formal theories, and a mathematical approach to higher-order functionals.",yes,"The paper addresses programming paradigms through the discussion of a non-von Neumann programming language, a challenge to the symbolic computation paradigm, and an analysis of functional programming aspects.",yes,"The paper appears to address fundamental design principles through its revision of basic concepts of type, function, and relation. The focus on constructing operations and types as concrete finite structures suggests attention to fundamental design principles.",yes,"The paper includes a clear theoretical foundation through the mathematical construction of the Universe, formal treatment of higher-order objects, and theoretical grounding for formal theories.",yes,"The paper appears to maintain a theoretical focus while discussing implementation aspects, particularly regarding a functional hardware description language.",yes,"The paper has a strong theoretical focus with a revision of fundamental concepts, mathematical construction methods, and a theoretical grounding rather than a focus on practical implementation.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full-text accessibility of the paper cannot be determined from the abstract alone, which is a common limitation in screening.",Include,"The abstract presents a rigorous theoretical exploration of programming language fundamentals, focusing on mathematical constructions of types, functions, and computational primitives. It demonstrates a strong theoretical foundation through its revision of basic concepts, parameterization of structures, and challenge to existing computational paradigms. The work appears to contribute substantively to theoretical understanding of programming language design and computational frameworks.",4.9
"Categories, Allegories and Circuit Design 5: Derived Operations on Pictures","Carolyn Brown, G. Hutton",-,-,-,0,1994,yes,"The paper analyzes fundamental constructs at a theoretical level, particularly in how pictorial representations relate to formal semantics and circuit design.",yes,"The paper presents a formal mathematical framework using unitary pretabular allegories and provides rigorous verification approaches for circuit design, including soundness and completeness proofs.",maybe,"The paper examines relational programming paradigms and their application to circuit design, but it is not primarily focused on comparing programming paradigms.",no,"The paper focuses on formalizing pictorial representations in circuit design using relational languages like Ruby, but it is more focused on circuit design than fundamental language design principles.",yes,"The paper is heavily theoretical, using allegories, categories, and formal mathematical frameworks to support its claims about circuit design and pictorial representations.",yes,The implementation aspects (circuit design) serve to support and demonstrate the theoretical contributions rather than being the primary focus.,yes,The paper makes clear theoretical contributions through its formalization of pictorial representations and mathematical framework for circuit design.,yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The paper appears to be an academic publication with references to other works, suggesting it is likely accessible through academic channels, though this cannot be determined from the abstract alone.",Include,"The paper presents a rigorous theoretical framework for circuit design using relational languages, with strong mathematical foundations in unitary pretabular allegories and formal verification techniques. Its comprehensive approach to pictorial representations and circuit semantics demonstrates significant theoretical contributions across multiple programming language and computational domains. The research provides a sophisticated mathematical analysis of circuit design principles, emphasizing formal frameworks and fundamental computational constructs.",4.6
A language-independent methodology for compiling declarations into open platform frameworks. (Compilation de d√©clarations dans des cadriciels : une m√©thodologie ind√©pendante du langage),Paul van der Walt,-,-,-,0,2015,yes,The paper analyzes fundamental programming language constructs through the lens of declaration languages and their compilation into frameworks.,maybe,"The paper mentions ""strong guarantees"" and compilation of declaration languages into frameworks, suggesting the use of a formal mathematical framework, though the level of formality is not explicitly stated.",yes,"The paper explicitly addresses multiple programming paradigms (static type systems, dynamic languages, object-oriented, functional languages) and provides comparative analysis across them.",maybe,"The paper discusses declaration languages and frameworks, which suggests it addresses fundamental design principles in programming languages, though it does not explicitly focus on orthogonality or minimality.",maybe,"The paper presents a ""generalised methodology"" and discusses compilation of declaration languages, suggesting the inclusion of a formal theoretical foundation, though the mathematical rigor is not explicitly detailed.",yes,"The paper balances theoretical contributions with implementation, using prototypes to demonstrate the approach while maintaining focus on the theoretical framework.",yes,"The paper makes theoretical contributions through its generalized methodology and framework for declaration-driven systems, rather than focusing solely on practical aspects.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The full text of the paper is likely accessible through academic channels, as it is a dissertation.",Exclude,"A comprehensive dissertation exploring declaration-driven frameworks across multiple programming paradigms, demonstrating strong theoretical contributions in language design and computational principles. The research provides a generalized methodology for developing frameworks that address privacy and safety concerns, with a focus on theoretical foundations and cross-paradigm analysis. While maintaining a balance between theoretical rigor and practical implementation, the study offers insights into fundamental programming language constructs and their compilation.",4.3
Science of Computer Programming,"G. Salvaneschi, Carlo Ghezzi, Matteo Pradella",-,-,-,0,2015,yes,"The paper analyzes fundamental programming language constructs at a theoretical level, particularly regarding adaptive abstractions and their integration with distribution and concurrency.",yes,"The paper explicitly mentions ""formal semantics"" and ""formal proofs"" for safety requirements, indicating a rigorous mathematical framework.",yes,The paper examines context-oriented programming as a paradigm and discusses its theoretical foundations and integration with other paradigms (distribution and concurrency).,yes,"The paper explicitly discusses language design principles, particularly for ContextErlang and its integration with distribution and concurrency. The focus on ""holistic design"" and ""systematic design principles"" indicates attention to fundamental design principles.",yes,"The paper presents formal semantics and theoretical foundations for ContextErlang, including formal proofs of safety requirements.",yes,"While the paper includes implementation aspects (executable prototype, case studies), these serve to validate and support the theoretical contributions rather than being the primary focus.",yes,"The paper focuses on theoretical contributions through formal semantics, safety proofs, and systematic design principles, rather than just practical applications.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"While the full-text accessibility cannot be determined from the abstract alone, the technical nature and academic context of the paper suggest it is likely accessible through academic channels.",Include,"The research presents a comprehensive theoretical exploration of context-oriented programming, demonstrating rigorous formal semantics, paradigm analysis, and systematic design principles across multiple programming languages. By integrating adaptive abstractions with distribution and concurrency, the study offers a fundamental theoretical contribution that goes beyond practical implementation, focusing on mathematical frameworks and safety proofs. The work systematically examines programming language constructs at a theoretical level, providing a holistic approach to understanding context-aware and adaptive software systems.",4.9
Certifying Choreography Compilation ‚ãÜ,"L. Cruz-Filipe, F. Montesi, Marco Peressotti",-,-,-,0,-,yes,"The study analyzes fundamental programming language constructs at a theoretical level, particularly focusing on concurrent and distributed programming paradigms.",yes,"The paper uses a formal mathematical framework, specifically mentioning ""process calculus"" and discussing formal proof of compilation correctness, indicating rigorous mathematical foundations.",yes,"The paper explicitly examines programming paradigms, specifically the relationship between global interactions and local actions in concurrent/distributed systems.",maybe,"The paper discusses choreographic programming as a paradigm, which relates to fundamental design principles of programming languages, though it does not explicitly address orthogonality or minimality.",yes,"The paper has a clear theoretical foundation, focusing on formal compilation and proof of correctness between different programming paradigms.",yes,The implementation aspects (compilation) serve to support theoretical contributions about programming paradigms and their relationships.,yes,"The paper clearly focuses on theoretical contributions, particularly in proving compilation correctness and relating different programming paradigms.",yes,"The paper is written in English, meeting the publication language criterion.",maybe,"The technical nature of the paper suggests it is likely an academic paper with accessible full text, though this cannot be determined from the abstract alone.",Include,"A rigorous theoretical study exploring choreographic programming paradigms through formal mathematical frameworks, demonstrating strong alignment with fundamental language design principles and theoretical contributions. The research provides a comprehensive analysis of concurrent and distributed systems, utilizing process calculus to examine compilation correctness and paradigm relationships. Its focus on theoretical foundations and formal verification makes it a significant contribution to programming language research.",4.6